{"ast":null,"code":"/**!\r\n * MixItUp v3.3.1\r\n * A high-performance, dependency-free library for animated filtering, sorting and more\r\n * Build 94e0fbf6-cd0b-4987-b3c0-14b59b67b8a0\r\n *\r\n * @copyright Copyright 2014-2018 KunkaLabs Limited.\r\n * @author    KunkaLabs Limited.\r\n * @link      https://www.kunkalabs.com/mixitup/\r\n *\r\n * @license   Commercial use requires a commercial license.\r\n *            https://www.kunkalabs.com/mixitup/licenses/\r\n *\r\n *            Non-commercial use permitted under same terms as CC BY-NC 3.0 license.\r\n *            http://creativecommons.org/licenses/by-nc/3.0/\r\n */\n(function (window) {\n  'use strict';\n\n  var _mixitup = null,\n      h = null;\n\n  (function () {\n    var VENDORS = ['webkit', 'moz', 'o', 'ms'],\n        canary = window.document.createElement('div'),\n        i = -1; // window.requestAnimationFrame\n\n    for (i = 0; i < VENDORS.length && !window.requestAnimationFrame; i++) {\n      window.requestAnimationFrame = window[VENDORS[i] + 'RequestAnimationFrame'];\n    } // Element.nextElementSibling\n\n\n    if (typeof canary.nextElementSibling === 'undefined') {\n      Object.defineProperty(window.Element.prototype, 'nextElementSibling', {\n        get: function get() {\n          var el = this.nextSibling;\n\n          while (el) {\n            if (el.nodeType === 1) {\n              return el;\n            }\n\n            el = el.nextSibling;\n          }\n\n          return null;\n        }\n      });\n    } // Element.matches\n\n\n    (function (ElementPrototype) {\n      ElementPrototype.matches = ElementPrototype.matches || ElementPrototype.machesSelector || ElementPrototype.mozMatchesSelector || ElementPrototype.msMatchesSelector || ElementPrototype.oMatchesSelector || ElementPrototype.webkitMatchesSelector || function (selector) {\n        return Array.prototype.indexOf.call(this.parentElement.querySelectorAll(selector), this) > -1;\n      };\n    })(window.Element.prototype); // Object.keys\n    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/keys\n\n\n    if (!Object.keys) {\n      Object.keys = function () {\n        var hasOwnProperty = Object.prototype.hasOwnProperty,\n            hasDontEnumBug = false,\n            dontEnums = [],\n            dontEnumsLength = -1;\n        hasDontEnumBug = !{\n          toString: null\n        }.propertyIsEnumerable('toString');\n        dontEnums = ['toString', 'toLocaleString', 'valueOf', 'hasOwnProperty', 'isPrototypeOf', 'propertyIsEnumerable', 'constructor'];\n        dontEnumsLength = dontEnums.length;\n        return function (obj) {\n          var result = [],\n              prop = '',\n              i = -1;\n\n          if (typeof obj !== 'object' && (typeof obj !== 'function' || obj === null)) {\n            throw new TypeError('Object.keys called on non-object');\n          }\n\n          for (prop in obj) {\n            if (hasOwnProperty.call(obj, prop)) {\n              result.push(prop);\n            }\n          }\n\n          if (hasDontEnumBug) {\n            for (i = 0; i < dontEnumsLength; i++) {\n              if (hasOwnProperty.call(obj, dontEnums[i])) {\n                result.push(dontEnums[i]);\n              }\n            }\n          }\n\n          return result;\n        };\n      }();\n    } // Array.isArray\n    // https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Array/isArray\n\n\n    if (!Array.isArray) {\n      Array.isArray = function (arg) {\n        return Object.prototype.toString.call(arg) === '[object Array]';\n      };\n    } // Object.create\n    // https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Object/create\n\n\n    if (typeof Object.create !== 'function') {\n      Object.create = function (undefined) {\n        var Temp = function Temp() {};\n\n        return function (prototype, propertiesObject) {\n          if (prototype !== Object(prototype) && prototype !== null) {\n            throw TypeError('Argument must be an object, or null');\n          }\n\n          Temp.prototype = prototype || {};\n          var result = new Temp();\n          Temp.prototype = null;\n\n          if (propertiesObject !== undefined) {\n            Object.defineProperties(result, propertiesObject);\n          }\n\n          if (prototype === null) {\n            /* jshint ignore:start */\n            result.__proto__ = null;\n            /* jshint ignore:end */\n          }\n\n          return result;\n        };\n      }();\n    } // String.prototyoe.trim\n\n\n    if (!String.prototype.trim) {\n      String.prototype.trim = function () {\n        return this.replace(/^[\\s\\uFEFF\\xA0]+|[\\s\\uFEFF\\xA0]+$/g, '');\n      };\n    } // Array.prototype.indexOf\n    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/indexOf\n\n\n    if (!Array.prototype.indexOf) {\n      Array.prototype.indexOf = function (searchElement) {\n        var n, k, t, len;\n\n        if (this === null) {\n          throw new TypeError();\n        }\n\n        t = Object(this);\n        len = t.length >>> 0;\n\n        if (len === 0) {\n          return -1;\n        }\n\n        n = 0;\n\n        if (arguments.length > 1) {\n          n = Number(arguments[1]);\n\n          if (n !== n) {\n            n = 0;\n          } else if (n !== 0 && n !== Infinity && n !== -Infinity) {\n            n = (n > 0 || -1) * Math.floor(Math.abs(n));\n          }\n        }\n\n        if (n >= len) {\n          return -1;\n        }\n\n        for (k = n >= 0 ? n : Math.max(len - Math.abs(n), 0); k < len; k++) {\n          if (k in t && t[k] === searchElement) {\n            return k;\n          }\n        }\n\n        return -1;\n      };\n    } // Function.prototype.bind\n    // https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_objects/Function/bind\n\n\n    if (!Function.prototype.bind) {\n      Function.prototype.bind = function (oThis) {\n        var aArgs, self, FNOP, fBound;\n\n        if (typeof this !== 'function') {\n          throw new TypeError();\n        }\n\n        aArgs = Array.prototype.slice.call(arguments, 1);\n        self = this;\n\n        FNOP = function FNOP() {};\n\n        fBound = function fBound() {\n          return self.apply(this instanceof FNOP ? this : oThis, aArgs.concat(Array.prototype.slice.call(arguments)));\n        };\n\n        if (this.prototype) {\n          FNOP.prototype = this.prototype;\n        }\n\n        fBound.prototype = new FNOP();\n        return fBound;\n      };\n    } // Element.prototype.dispatchEvent\n\n\n    if (!window.Element.prototype.dispatchEvent) {\n      window.Element.prototype.dispatchEvent = function (event) {\n        try {\n          return this.fireEvent('on' + event.type, event);\n        } catch (err) {}\n      };\n    }\n  })();\n  /**\r\n   * The `mixitup()` \"factory\" function creates and returns individual instances\r\n   * of MixItUp, known as \"mixers\", on which API methods can be called.\r\n   *\r\n   * When loading MixItUp via a script tag, the factory function is accessed\r\n   * via the global variable `mixitup`. When using a module loading\r\n   * system (e.g. ES2015, CommonJS, RequireJS), the factory function is\r\n   * exported into your module when you require the MixItUp library.\r\n   *\r\n   * @example\r\n   * mixitup(container [,config] [,foreignDoc])\r\n   *\r\n   * @example <caption>Example 1: Creating a mixer instance with an element reference</caption>\r\n   * var containerEl = document.querySelector('.container');\r\n   *\r\n   * var mixer = mixitup(containerEl);\r\n   *\r\n   * @example <caption>Example 2: Creating a mixer instance with a selector string</caption>\r\n   * var mixer = mixitup('.container');\r\n   *\r\n   * @example <caption>Example 3: Passing a configuration object</caption>\r\n   * var mixer = mixitup(containerEl, {\r\n   *     animation: {\r\n   *         effects: 'fade scale(0.5)'\r\n   *     }\r\n   * });\r\n   *\r\n   * @example <caption>Example 4: Passing an iframe reference</caption>\r\n   * var mixer = mixitup(containerEl, config, foreignDocument);\r\n   *\r\n   * @global\r\n   * @namespace\r\n   * @public\r\n   * @kind        function\r\n   * @since       3.0.0\r\n   * @param       {(Element|string)}  container\r\n   *      A DOM element or selector string representing the container(s) on which to instantiate MixItUp.\r\n   * @param       {object}            [config]\r\n   *      An optional \"configuration object\" used to customize the behavior of the MixItUp instance.\r\n   * @param       {object}            [foreignDoc]\r\n   *      An optional reference to a `document`, which can be used to control a MixItUp instance in an iframe.\r\n   * @return      {mixitup.Mixer}\r\n   *      A \"mixer\" object holding the MixItUp instance.\r\n   */\n\n\n  _mixitup = function mixitup(container, config, foreignDoc) {\n    var el = null,\n        returnCollection = false,\n        instance = null,\n        facade = null,\n        doc = null,\n        output = null,\n        instances = [],\n        id = '',\n        elements = [],\n        i = -1;\n    doc = foreignDoc || window.document;\n\n    if (returnCollection = arguments[3]) {\n      // A non-documented 4th paramater enabling control of multiple instances\n      returnCollection = typeof returnCollection === 'boolean';\n    }\n\n    if (typeof container === 'string') {\n      elements = doc.querySelectorAll(container);\n    } else if (container && typeof container === 'object' && h.isElement(container, doc)) {\n      elements = [container];\n    } else if (container && typeof container === 'object' && container.length) {\n      // Although not documented, the container may also be an array-like list of\n      // elements such as a NodeList or jQuery collection, is returnCollection is true\n      elements = container;\n    } else {\n      throw new Error(_mixitup.messages.errorFactoryInvalidContainer());\n    }\n\n    if (elements.length < 1) {\n      throw new Error(_mixitup.messages.errorFactoryContainerNotFound());\n    }\n\n    for (i = 0; el = elements[i]; i++) {\n      if (i > 0 && !returnCollection) break;\n\n      if (!el.id) {\n        id = 'MixItUp' + h.randomHex();\n        el.id = id;\n      } else {\n        id = el.id;\n      }\n\n      if (_mixitup.instances[id] instanceof _mixitup.Mixer) {\n        instance = _mixitup.instances[id];\n\n        if (!config || config && config.debug && config.debug.showWarnings !== false) {\n          console.warn(_mixitup.messages.warningFactoryPreexistingInstance());\n        }\n      } else {\n        instance = new _mixitup.Mixer();\n        instance.attach(el, doc, id, config);\n        _mixitup.instances[id] = instance;\n      }\n\n      facade = new _mixitup.Facade(instance);\n\n      if (config && config.debug && config.debug.enable) {\n        instances.push(instance);\n      } else {\n        instances.push(facade);\n      }\n    }\n\n    if (returnCollection) {\n      output = new _mixitup.Collection(instances);\n    } else {\n      // Return the first instance regardless\n      output = instances[0];\n    }\n\n    return output;\n  };\n  /**\r\n   * The `.use()` static method is used to extend the functionality of mixitup with compatible\r\n   * extensions and libraries in an environment with modular scoping e.g. ES2015, CommonJS, or RequireJS.\r\n   *\r\n   * You need only call the `.use()` function once per project, per extension, as module loaders\r\n   * will cache a single reference to MixItUp inclusive of all changes made.\r\n   *\r\n   * @example\r\n   * mixitup.use(extension)\r\n   *\r\n   * @example <caption>Example 1: Extending MixItUp with the Pagination Extension</caption>\r\n   *\r\n   * import mixitup from 'mixitup';\r\n   * import mixitupPagination from 'mixitup-pagination';\r\n   *\r\n   * mixitup.use(mixitupPagination);\r\n   *\r\n   * // All mixers created by the factory function in all modules will now\r\n   * // have pagination functionality\r\n   *\r\n   * var mixer = mixitup('.container');\r\n   *\r\n   * @public\r\n   * @name     use\r\n   * @memberof mixitup\r\n   * @kind     function\r\n   * @static\r\n   * @since    3.0.0\r\n   * @param    {*}  extension   A reference to the extension or library to be used.\r\n   * @return   {void}\r\n   */\n\n\n  _mixitup.use = function (extension) {\n    _mixitup.Base.prototype.callActions.call(_mixitup, 'beforeUse', arguments); // Call the extension's factory function, passing\n    // the mixitup factory as a paramater\n\n\n    if (typeof extension === 'function' && extension.TYPE === 'mixitup-extension') {\n      // Mixitup extension\n      if (typeof _mixitup.extensions[extension.NAME] === 'undefined') {\n        extension(_mixitup);\n        _mixitup.extensions[extension.NAME] = extension;\n      }\n    } else if (extension.fn && extension.fn.jquery) {\n      // jQuery\n      _mixitup.libraries.$ = extension;\n    }\n\n    _mixitup.Base.prototype.callActions.call(_mixitup, 'afterUse', arguments);\n  };\n\n  _mixitup.instances = {};\n  _mixitup.extensions = {};\n  _mixitup.libraries = {};\n  /**\r\n   * @private\r\n   */\n\n  h = {\n    /**\r\n     * @private\r\n     * @param   {HTMLElement}   el\r\n     * @param   {string}        cls\r\n     * @return  {boolean}\r\n     */\n    hasClass: function hasClass(el, cls) {\n      return !!el.className.match(new RegExp('(\\\\s|^)' + cls + '(\\\\s|$)'));\n    },\n\n    /**\r\n     * @private\r\n     * @param   {HTMLElement}   el\r\n     * @param   {string}        cls\r\n     * @return  {void}\r\n     */\n    addClass: function addClass(el, cls) {\n      if (!this.hasClass(el, cls)) el.className += el.className ? ' ' + cls : cls;\n    },\n\n    /**\r\n     * @private\r\n     * @param   {HTMLElement}   el\r\n     * @param   {string}        cls\r\n     * @return  {void}\r\n     */\n    removeClass: function removeClass(el, cls) {\n      if (this.hasClass(el, cls)) {\n        var reg = new RegExp('(\\\\s|^)' + cls + '(\\\\s|$)');\n        el.className = el.className.replace(reg, ' ').trim();\n      }\n    },\n\n    /**\r\n     * Merges the properties of the source object onto the\r\n     * target object. Alters the target object.\r\n     *\r\n     * @private\r\n     * @param   {object}    destination\r\n     * @param   {object}    source\r\n     * @param   {boolean}   [deep=false]\r\n     * @param   {boolean}   [handleErrors=false]\r\n     * @return  {void}\r\n     */\n    extend: function extend(destination, source, deep, handleErrors) {\n      var sourceKeys = [],\n          key = '',\n          i = -1;\n      deep = deep || false;\n      handleErrors = handleErrors || false;\n\n      try {\n        if (Array.isArray(source)) {\n          for (i = 0; i < source.length; i++) {\n            sourceKeys.push(i);\n          }\n        } else if (source) {\n          sourceKeys = Object.keys(source);\n        }\n\n        for (i = 0; i < sourceKeys.length; i++) {\n          key = sourceKeys[i];\n\n          if (!deep || typeof source[key] !== 'object' || this.isElement(source[key])) {\n            // All non-object properties, or all properties if shallow extend\n            destination[key] = source[key];\n          } else if (Array.isArray(source[key])) {\n            // Arrays\n            if (!destination[key]) {\n              destination[key] = [];\n            }\n\n            this.extend(destination[key], source[key], deep, handleErrors);\n          } else {\n            // Objects\n            if (!destination[key]) {\n              destination[key] = {};\n            }\n\n            this.extend(destination[key], source[key], deep, handleErrors);\n          }\n        }\n      } catch (err) {\n        if (handleErrors) {\n          this.handleExtendError(err, destination);\n        } else {\n          throw err;\n        }\n      }\n\n      return destination;\n    },\n\n    /**\r\n     * @private\r\n     * @param   {Error}  err\r\n     * @param   {object} destination\r\n     * @return  {void}\r\n     */\n    handleExtendError: function handleExtendError(err, destination) {\n      var re = /property \"?(\\w*)\"?[,:] object/i,\n          matches = null,\n          erroneous = '',\n          message = '',\n          suggestion = '',\n          probableMatch = '',\n          key = '',\n          mostMatchingChars = -1,\n          i = -1;\n\n      if (err instanceof TypeError && (matches = re.exec(err.message))) {\n        erroneous = matches[1];\n\n        for (key in destination) {\n          i = 0;\n\n          while (i < erroneous.length && erroneous.charAt(i) === key.charAt(i)) {\n            i++;\n          }\n\n          if (i > mostMatchingChars) {\n            mostMatchingChars = i;\n            probableMatch = key;\n          }\n        }\n\n        if (mostMatchingChars > 1) {\n          suggestion = _mixitup.messages.errorConfigInvalidPropertySuggestion({\n            probableMatch: probableMatch\n          });\n        }\n\n        message = _mixitup.messages.errorConfigInvalidProperty({\n          erroneous: erroneous,\n          suggestion: suggestion\n        });\n        throw new TypeError(message);\n      }\n\n      throw err;\n    },\n\n    /**\r\n     * @private\r\n     * @param   {string} str\r\n     * @return  {function}\r\n     */\n    template: function template(str) {\n      var re = /\\${([\\w]*)}/g,\n          dynamics = {},\n          matches = null;\n\n      while (matches = re.exec(str)) {\n        dynamics[matches[1]] = new RegExp('\\\\${' + matches[1] + '}', 'g');\n      }\n\n      return function (data) {\n        var key = '',\n            output = str;\n        data = data || {};\n\n        for (key in dynamics) {\n          output = output.replace(dynamics[key], typeof data[key] !== 'undefined' ? data[key] : '');\n        }\n\n        return output;\n      };\n    },\n\n    /**\r\n     * @private\r\n     * @param   {HTMLElement}   el\r\n     * @param   {string}        type\r\n     * @param   {function}      fn\r\n     * @param   {boolean}       useCapture\r\n     * @return  {void}\r\n     */\n    on: function on(el, type, fn, useCapture) {\n      if (!el) return;\n\n      if (el.addEventListener) {\n        el.addEventListener(type, fn, useCapture);\n      } else if (el.attachEvent) {\n        el['e' + type + fn] = fn;\n\n        el[type + fn] = function () {\n          el['e' + type + fn](window.event);\n        };\n\n        el.attachEvent('on' + type, el[type + fn]);\n      }\n    },\n\n    /**\r\n     * @private\r\n     * @param   {HTMLElement}   el\r\n     * @param   {string}        type\r\n     * @param   {function}      fn\r\n     * @return  {void}\r\n     */\n    off: function off(el, type, fn) {\n      if (!el) return;\n\n      if (el.removeEventListener) {\n        el.removeEventListener(type, fn, false);\n      } else if (el.detachEvent) {\n        el.detachEvent('on' + type, el[type + fn]);\n        el[type + fn] = null;\n      }\n    },\n\n    /**\r\n     * @private\r\n     * @param   {string}      eventType\r\n     * @param   {object}      detail\r\n     * @param   {Document}    [doc]\r\n     * @return  {CustomEvent}\r\n     */\n    getCustomEvent: function getCustomEvent(eventType, detail, doc) {\n      var event = null;\n      doc = doc || window.document;\n\n      if (typeof window.CustomEvent === 'function') {\n        event = new window.CustomEvent(eventType, {\n          detail: detail,\n          bubbles: true,\n          cancelable: true\n        });\n      } else if (typeof doc.createEvent === 'function') {\n        event = doc.createEvent('CustomEvent');\n        event.initCustomEvent(eventType, true, true, detail);\n      } else {\n        event = doc.createEventObject(), event.type = eventType;\n        event.returnValue = false;\n        event.cancelBubble = false;\n        event.detail = detail;\n      }\n\n      return event;\n    },\n\n    /**\r\n     * @private\r\n     * @param   {Event} e\r\n     * @return  {Event}\r\n     */\n    getOriginalEvent: function getOriginalEvent(e) {\n      if (e.touches && e.touches.length) {\n        return e.touches[0];\n      } else if (e.changedTouches && e.changedTouches.length) {\n        return e.changedTouches[0];\n      } else {\n        return e;\n      }\n    },\n\n    /**\r\n     * @private\r\n     * @param   {HTMLElement}   el\r\n     * @param   {string}        selector\r\n     * @return  {Number}\r\n     */\n    index: function index(el, selector) {\n      var i = 0;\n\n      while ((el = el.previousElementSibling) !== null) {\n        if (!selector || el.matches(selector)) {\n          ++i;\n        }\n      }\n\n      return i;\n    },\n\n    /**\r\n     * Converts a dash or snake-case string to camel case.\r\n     *\r\n     * @private\r\n     * @param   {string}    str\r\n     * @param   {boolean}   [isPascal]\r\n     * @return  {string}\r\n     */\n    camelCase: function camelCase(str) {\n      return str.toLowerCase().replace(/([_-][a-z])/g, function ($1) {\n        return $1.toUpperCase().replace(/[_-]/, '');\n      });\n    },\n\n    /**\r\n     * Converts a dash or snake-case string to pascal case.\r\n     *\r\n     * @private\r\n     * @param   {string}    str\r\n     * @param   {boolean}   [isPascal]\r\n     * @return  {string}\r\n     */\n    pascalCase: function pascalCase(str) {\n      return (str = this.camelCase(str)).charAt(0).toUpperCase() + str.slice(1);\n    },\n\n    /**\r\n     * Converts a camel or pascal-case string to dash case.\r\n     *\r\n     * @private\r\n     * @param   {string}    str\r\n     * @return  {string}\r\n     */\n    dashCase: function dashCase(str) {\n      return str.replace(/([A-Z])/g, '-$1').replace(/^-/, '').toLowerCase();\n    },\n\n    /**\r\n     * @private\r\n     * @param   {HTMLElement}       el\r\n     * @param   {HTMLHtmlElement}   [doc]\r\n     * @return  {boolean}\r\n     */\n    isElement: function isElement(el, doc) {\n      doc = doc || window.document;\n\n      if (window.HTMLElement && el instanceof window.HTMLElement) {\n        return true;\n      } else if (doc.defaultView && doc.defaultView.HTMLElement && el instanceof doc.defaultView.HTMLElement) {\n        return true;\n      } else {\n        return el !== null && el.nodeType === 1 && typeof el.nodeName === 'string';\n      }\n    },\n\n    /**\r\n     * @private\r\n     * @param   {string}            htmlString\r\n     * @param   {HTMLHtmlElement}   [doc]\r\n     * @return  {DocumentFragment}\r\n     */\n    createElement: function createElement(htmlString, doc) {\n      var frag = null,\n          temp = null;\n      doc = doc || window.document;\n      frag = doc.createDocumentFragment();\n      temp = doc.createElement('div');\n      temp.innerHTML = htmlString.trim();\n\n      while (temp.firstChild) {\n        frag.appendChild(temp.firstChild);\n      }\n\n      return frag;\n    },\n\n    /**\r\n     * @private\r\n     * @param   {Node} node\r\n     * @return  {void}\r\n     */\n    removeWhitespace: function removeWhitespace(node) {\n      var deleting;\n\n      while (node && node.nodeName === '#text') {\n        deleting = node;\n        node = node.previousSibling;\n        deleting.parentElement && deleting.parentElement.removeChild(deleting);\n      }\n    },\n\n    /**\r\n     * @private\r\n     * @param   {Array<*>}  a\r\n     * @param   {Array<*>}  b\r\n     * @return  {boolean}\r\n     */\n    isEqualArray: function isEqualArray(a, b) {\n      var i = a.length;\n      if (i !== b.length) return false;\n\n      while (i--) {\n        if (a[i] !== b[i]) return false;\n      }\n\n      return true;\n    },\n\n    /**\r\n     * @private\r\n     * @param   {object}  a\r\n     * @param   {object}  b\r\n     * @return  {boolean}\r\n     */\n    deepEquals: function deepEquals(a, b) {\n      var key;\n\n      if (typeof a === 'object' && a && typeof b === 'object' && b) {\n        if (Object.keys(a).length !== Object.keys(b).length) return false;\n\n        for (key in a) {\n          if (!b.hasOwnProperty(key) || !this.deepEquals(a[key], b[key])) return false;\n        }\n      } else if (a !== b) {\n        return false;\n      }\n\n      return true;\n    },\n\n    /**\r\n     * @private\r\n     * @param   {Array<*>}  oldArray\r\n     * @return  {Array<*>}\r\n     */\n    arrayShuffle: function arrayShuffle(oldArray) {\n      var newArray = oldArray.slice(),\n          len = newArray.length,\n          i = len,\n          p = -1,\n          t = [];\n\n      while (i--) {\n        p = ~~(Math.random() * len);\n        t = newArray[i];\n        newArray[i] = newArray[p];\n        newArray[p] = t;\n      }\n\n      return newArray;\n    },\n\n    /**\r\n     * @private\r\n     * @param   {object}    list\r\n     */\n    arrayFromList: function arrayFromList(list) {\n      var output, i;\n\n      try {\n        return Array.prototype.slice.call(list);\n      } catch (err) {\n        output = [];\n\n        for (i = 0; i < list.length; i++) {\n          output.push(list[i]);\n        }\n\n        return output;\n      }\n    },\n\n    /**\r\n     * @private\r\n     * @param   {function}  func\r\n     * @param   {Number}    wait\r\n     * @param   {boolean}   immediate\r\n     * @return  {function}\r\n     */\n    debounce: function debounce(func, wait, immediate) {\n      var timeout;\n      return function () {\n        var self = this,\n            args = arguments,\n            callNow = immediate && !timeout,\n            later = null;\n\n        later = function later() {\n          timeout = null;\n\n          if (!immediate) {\n            func.apply(self, args);\n          }\n        };\n\n        clearTimeout(timeout);\n        timeout = setTimeout(later, wait);\n        if (callNow) func.apply(self, args);\n      };\n    },\n\n    /**\r\n     * @private\r\n     * @param   {HTMLElement}   element\r\n     * @return  {object}\r\n     */\n    position: function position(element) {\n      var xPosition = 0,\n          yPosition = 0,\n          offsetParent = element;\n\n      while (element) {\n        xPosition -= element.scrollLeft;\n        yPosition -= element.scrollTop;\n\n        if (element === offsetParent) {\n          xPosition += element.offsetLeft;\n          yPosition += element.offsetTop;\n          offsetParent = element.offsetParent;\n        }\n\n        element = element.parentElement;\n      }\n\n      return {\n        x: xPosition,\n        y: yPosition\n      };\n    },\n\n    /**\r\n     * @private\r\n     * @param   {object}    node1\r\n     * @param   {object}    node2\r\n     * @return  {Number}\r\n     */\n    getHypotenuse: function getHypotenuse(node1, node2) {\n      var distanceX = node1.x - node2.x,\n          distanceY = node1.y - node2.y;\n      distanceX = distanceX < 0 ? distanceX * -1 : distanceX, distanceY = distanceY < 0 ? distanceY * -1 : distanceY;\n      return Math.sqrt(Math.pow(distanceX, 2) + Math.pow(distanceY, 2));\n    },\n\n    /**\r\n     * Calcuates the area of intersection between two rectangles and expresses it as\r\n     * a ratio in comparison to the area of the first rectangle.\r\n     *\r\n     * @private\r\n     * @param   {Rect}  box1\r\n     * @param   {Rect}  box2\r\n     * @return  {number}\r\n     */\n    getIntersectionRatio: function getIntersectionRatio(box1, box2) {\n      var controlArea = box1.width * box1.height,\n          intersectionX = -1,\n          intersectionY = -1,\n          intersectionArea = -1,\n          ratio = -1;\n      intersectionX = Math.max(0, Math.min(box1.left + box1.width, box2.left + box2.width) - Math.max(box1.left, box2.left));\n      intersectionY = Math.max(0, Math.min(box1.top + box1.height, box2.top + box2.height) - Math.max(box1.top, box2.top));\n      intersectionArea = intersectionY * intersectionX;\n      ratio = intersectionArea / controlArea;\n      return ratio;\n    },\n\n    /**\r\n     * @private\r\n     * @param   {object}            el\r\n     * @param   {string}            selector\r\n     * @param   {boolean}           [includeSelf]\r\n     * @param   {HTMLHtmlElement}   [doc]\r\n     * @return  {Element|null}\r\n     */\n    closestParent: function closestParent(el, selector, includeSelf, doc) {\n      var parent = el.parentNode;\n      doc = doc || window.document;\n\n      if (includeSelf && el.matches(selector)) {\n        return el;\n      }\n\n      while (parent && parent != doc.body) {\n        if (parent.matches && parent.matches(selector)) {\n          return parent;\n        } else if (parent.parentNode) {\n          parent = parent.parentNode;\n        } else {\n          return null;\n        }\n      }\n\n      return null;\n    },\n\n    /**\r\n     * @private\r\n     * @param   {HTMLElement}       el\r\n     * @param   {string}            selector\r\n     * @param   {HTMLHtmlElement}   [doc]\r\n     * @return  {NodeList}\r\n     */\n    children: function children(el, selector, doc) {\n      var children = [],\n          tempId = '';\n      doc = doc || window.doc;\n\n      if (el) {\n        if (!el.id) {\n          tempId = 'Temp' + this.randomHexKey();\n          el.id = tempId;\n        }\n\n        children = doc.querySelectorAll('#' + el.id + ' > ' + selector);\n\n        if (tempId) {\n          el.removeAttribute('id');\n        }\n      }\n\n      return children;\n    },\n\n    /**\r\n     * Creates a clone of a provided array, with any empty strings removed.\r\n     *\r\n     * @private\r\n     * @param   {Array<*>} originalArray\r\n     * @return  {Array<*>}\r\n     */\n    clean: function clean(originalArray) {\n      var cleanArray = [],\n          i = -1;\n\n      for (i = 0; i < originalArray.length; i++) {\n        if (originalArray[i] !== '') {\n          cleanArray.push(originalArray[i]);\n        }\n      }\n\n      return cleanArray;\n    },\n\n    /**\r\n     * Abstracts an ES6 promise into a q-like deferred interface for storage and deferred resolution.\r\n     *\r\n     * @private\r\n     * @param  {object} libraries\r\n     * @return {h.Deferred}\r\n     */\n    defer: function defer(libraries) {\n      var deferred = null,\n          promiseWrapper = null,\n          $ = null;\n      promiseWrapper = new this.Deferred();\n\n      if (_mixitup.features.has.promises) {\n        // ES6 native promise or polyfill\n        promiseWrapper.promise = new Promise(function (resolve, reject) {\n          promiseWrapper.resolve = resolve;\n          promiseWrapper.reject = reject;\n        });\n      } else if (($ = window.jQuery || libraries.$) && typeof $.Deferred === 'function') {\n        // jQuery\n        deferred = $.Deferred();\n        promiseWrapper.promise = deferred.promise();\n        promiseWrapper.resolve = deferred.resolve;\n        promiseWrapper.reject = deferred.reject;\n      } else if (window.console) {\n        // No implementation\n        console.warn(_mixitup.messages.warningNoPromiseImplementation());\n      }\n\n      return promiseWrapper;\n    },\n\n    /**\r\n     * @private\r\n     * @param   {Array<Promise>}    tasks\r\n     * @param   {object}            libraries\r\n     * @return  {Promise<Array>}\r\n     */\n    all: function all(tasks, libraries) {\n      var $ = null;\n\n      if (_mixitup.features.has.promises) {\n        return Promise.all(tasks);\n      } else if (($ = window.jQuery || libraries.$) && typeof $.when === 'function') {\n        return $.when.apply($, tasks).done(function () {\n          // jQuery when returns spread arguments rather than an array or resolutions\n          return arguments;\n        });\n      } // No implementation\n\n\n      if (window.console) {\n        console.warn(_mixitup.messages.warningNoPromiseImplementation());\n      }\n\n      return [];\n    },\n\n    /**\r\n     * @private\r\n     * @param   {HTMLElement}   el\r\n     * @param   {string}        property\r\n     * @param   {Array<string>} vendors\r\n     * @return  {string}\r\n     */\n    getPrefix: function getPrefix(el, property, vendors) {\n      var i = -1,\n          prefix = '';\n      if (h.dashCase(property) in el.style) return '';\n\n      for (i = 0; prefix = vendors[i]; i++) {\n        if (prefix + property in el.style) {\n          return prefix.toLowerCase();\n        }\n      }\n\n      return 'unsupported';\n    },\n\n    /**\r\n     * @private\r\n     * @return  {string}\r\n     */\n    randomHex: function randomHex() {\n      return ('00000' + (Math.random() * 16777216 << 0).toString(16)).substr(-6).toUpperCase();\n    },\n\n    /**\r\n     * @private\r\n     * @param   {HTMLDocument}  [doc]\r\n     * @return  {object}\r\n     */\n    getDocumentState: function getDocumentState(doc) {\n      doc = typeof doc.body === 'object' ? doc : window.document;\n      return {\n        scrollTop: window.pageYOffset,\n        scrollLeft: window.pageXOffset,\n        docHeight: doc.documentElement.scrollHeight,\n        docWidth: doc.documentElement.scrollWidth,\n        viewportHeight: doc.documentElement.clientHeight,\n        viewportWidth: doc.documentElement.clientWidth\n      };\n    },\n\n    /**\r\n     * @private\r\n     * @param   {object}    obj\r\n     * @param   {function}  fn\r\n     * @return  {function}\r\n     */\n    bind: function bind(obj, fn) {\n      return function () {\n        return fn.apply(obj, arguments);\n      };\n    },\n\n    /**\r\n     * @private\r\n     * @param   {HTMLElement}   el\r\n     * @return  {boolean}\r\n     */\n    isVisible: function isVisible(el) {\n      var styles = null;\n      if (el.offsetParent) return true;\n      styles = window.getComputedStyle(el);\n\n      if (styles.position === 'fixed' && styles.visibility !== 'hidden' && styles.opacity !== '0') {\n        // Fixed elements report no offsetParent,\n        // but may still be invisible\n        return true;\n      }\n\n      return false;\n    },\n\n    /**\r\n     * @private\r\n     * @param   {object}    obj\r\n     */\n    seal: function seal(obj) {\n      if (typeof Object.seal === 'function') {\n        Object.seal(obj);\n      }\n    },\n\n    /**\r\n     * @private\r\n     * @param   {object}    obj\r\n     */\n    freeze: function freeze(obj) {\n      if (typeof Object.freeze === 'function') {\n        Object.freeze(obj);\n      }\n    },\n\n    /**\r\n     * @private\r\n     * @param   {string}    control\r\n     * @param   {string}    specimen\r\n     * @return  {boolean}\r\n     */\n    compareVersions: function compareVersions(control, specimen) {\n      var controlParts = control.split('.'),\n          specimenParts = specimen.split('.'),\n          controlPart = -1,\n          specimenPart = -1,\n          i = -1;\n\n      for (i = 0; i < controlParts.length; i++) {\n        controlPart = parseInt(controlParts[i].replace(/[^\\d.]/g, ''));\n        specimenPart = parseInt(specimenParts[i].replace(/[^\\d.]/g, '') || 0);\n\n        if (specimenPart < controlPart) {\n          return false;\n        } else if (specimenPart > controlPart) {\n          return true;\n        }\n      }\n\n      return true;\n    },\n\n    /**\r\n     * @private\r\n     * @constructor\r\n     */\n    Deferred: function Deferred() {\n      this.promise = null;\n      this.resolve = null;\n      this.reject = null;\n      this.id = h.randomHex();\n    },\n\n    /**\r\n     * @private\r\n     * @param   {object}  obj\r\n     * @return  {boolean}\r\n     */\n    isEmptyObject: function isEmptyObject(obj) {\n      var key = '';\n\n      if (typeof Object.keys === 'function') {\n        return Object.keys(obj).length === 0;\n      }\n\n      for (key in obj) {\n        if (obj.hasOwnProperty(key)) {\n          return false;\n        }\n      }\n\n      return true;\n    },\n\n    /**\r\n     * @param   {mixitup.Config.ClassNames}   classNames\r\n     * @param   {string}                      elementName\r\n     * @param   {string}                      [modifier]\r\n     * @return  {string}\r\n     */\n    getClassname: function getClassname(classNames, elementName, modifier) {\n      var classname = '';\n      classname += classNames.block;\n\n      if (classname.length) {\n        classname += classNames.delineatorElement;\n      }\n\n      classname += classNames['element' + this.pascalCase(elementName)];\n      if (!modifier) return classname;\n\n      if (classname.length) {\n        classname += classNames.delineatorModifier;\n      }\n\n      classname += modifier;\n      return classname;\n    },\n\n    /**\r\n     * Returns the value of a property on a given object via its string key.\r\n     *\r\n     * @param   {object}    obj\r\n     * @param   {string}    stringKey\r\n     * @return  {*} value\r\n     */\n    getProperty: function getProperty(obj, stringKey) {\n      var parts = stringKey.split('.'),\n          returnCurrent = null,\n          current = '',\n          i = 0;\n\n      if (!stringKey) {\n        return obj;\n      }\n\n      returnCurrent = function returnCurrent(obj) {\n        if (!obj) {\n          return null;\n        } else {\n          return obj[current];\n        }\n      };\n\n      while (i < parts.length) {\n        current = parts[i];\n        obj = returnCurrent(obj);\n        i++;\n      }\n\n      if (typeof obj !== 'undefined') {\n        return obj;\n      } else {\n        return null;\n      }\n    }\n  };\n  _mixitup.h = h;\n  /**\r\n   * The Base class adds instance methods to all other extensible MixItUp classes,\r\n   * enabling the calling of any registered hooks.\r\n   *\r\n   * @constructor\r\n   * @namespace\r\n   * @memberof    mixitup\r\n   * @private\r\n   * @since       3.0.0\r\n   */\n\n  _mixitup.Base = function () {};\n\n  _mixitup.Base.prototype = {\n    constructor: _mixitup.Base,\n\n    /**\r\n     * Calls any registered hooks for the provided action.\r\n     *\r\n     * @memberof    mixitup.Base\r\n     * @private\r\n     * @instance\r\n     * @since       2.0.0\r\n     * @param       {string}    actionName\r\n     * @param       {Array<*>}  args\r\n     * @return      {void}\r\n     */\n    callActions: function callActions(actionName, args) {\n      var self = this,\n          hooks = self.constructor.actions[actionName],\n          extensionName = '';\n      if (!hooks || h.isEmptyObject(hooks)) return;\n\n      for (extensionName in hooks) {\n        hooks[extensionName].apply(self, args);\n      }\n    },\n\n    /**\r\n     * Calls any registered hooks for the provided filter.\r\n     *\r\n     * @memberof    mixitup.Base\r\n     * @private\r\n     * @instance\r\n     * @since       2.0.0\r\n     * @param       {string}    filterName\r\n     * @param       {*}         input\r\n     * @param       {Array<*>}  args\r\n     * @return      {*}\r\n     */\n    callFilters: function callFilters(filterName, input, args) {\n      var self = this,\n          hooks = self.constructor.filters[filterName],\n          output = input,\n          extensionName = '';\n      if (!hooks || h.isEmptyObject(hooks)) return output;\n      args = args || [];\n\n      for (extensionName in hooks) {\n        args = h.arrayFromList(args);\n        args.unshift(output);\n        output = hooks[extensionName].apply(self, args);\n      }\n\n      return output;\n    }\n  };\n  /**\r\n   * The BaseStatic class holds a set of static methods which are then added to all other\r\n   * extensible MixItUp classes as a means of integrating extensions via the addition of new\r\n   * methods and/or actions and hooks.\r\n   *\r\n   * @constructor\r\n   * @namespace\r\n   * @memberof    mixitup\r\n   * @private\r\n   * @since       3.0.0\r\n   */\n\n  _mixitup.BaseStatic = function () {\n    this.actions = {};\n    this.filters = {};\n    /**\r\n     * Performs a shallow extend on the class's prototype, adding one or more new members to\r\n     * the class in a single operation.\r\n     *\r\n     * @memberof    mixitup.BaseStatic\r\n     * @public\r\n     * @static\r\n     * @since       2.1.0\r\n     * @param       {object} extension\r\n     * @return      {void}\r\n     */\n\n    this.extend = function (extension) {\n      h.extend(this.prototype, extension);\n    };\n    /**\r\n     * Registers a function to be called on the action hook of the provided name.\r\n     *\r\n     * @memberof    mixitup.BaseStatic\r\n     * @public\r\n     * @static\r\n     * @since       2.1.0\r\n     * @param       {string}    hookName\r\n     * @param       {string}    extensionName\r\n     * @param       {function}  func\r\n     * @return      {void}\r\n     */\n\n\n    this.registerAction = function (hookName, extensionName, func) {\n      (this.actions[hookName] = this.actions[hookName] || {})[extensionName] = func;\n    };\n    /**\r\n     * Registers a function to be called on the filter of the provided name.\r\n     *\r\n     * @memberof    mixitup.BaseStatic\r\n     * @public\r\n     * @static\r\n     * @since       2.1.0\r\n     * @param       {string}    hookName\r\n     * @param       {string}    extensionName\r\n     * @param       {function}  func\r\n     * @return      {void}\r\n     */\n\n\n    this.registerFilter = function (hookName, extensionName, func) {\n      (this.filters[hookName] = this.filters[hookName] || {})[extensionName] = func;\n    };\n  };\n  /**\r\n   * The `mixitup.Features` class performs all feature and CSS prefix detection\r\n   * neccessary for MixItUp to function correctly, as well as storing various\r\n   * string and array constants. All feature decection is on evaluation of the\r\n   * library and stored in a singleton instance for use by other internal classes.\r\n   *\r\n   * @constructor\r\n   * @namespace\r\n   * @memberof    mixitup\r\n   * @private\r\n   * @since       3.0.0\r\n   */\n\n\n  _mixitup.Features = function () {\n    _mixitup.Base.call(this);\n\n    this.callActions('beforeConstruct');\n    this.boxSizingPrefix = '';\n    this.transformPrefix = '';\n    this.transitionPrefix = '';\n    this.boxSizingPrefix = '';\n    this.transformProp = '';\n    this.transformRule = '';\n    this.transitionProp = '';\n    this.perspectiveProp = '';\n    this.perspectiveOriginProp = '';\n    this.has = new _mixitup.Has();\n    this.canary = null;\n    this.BOX_SIZING_PROP = 'boxSizing';\n    this.TRANSITION_PROP = 'transition';\n    this.TRANSFORM_PROP = 'transform';\n    this.PERSPECTIVE_PROP = 'perspective';\n    this.PERSPECTIVE_ORIGIN_PROP = 'perspectiveOrigin';\n    this.VENDORS = ['Webkit', 'moz', 'O', 'ms'];\n    this.TWEENABLE = ['opacity', 'width', 'height', 'marginRight', 'marginBottom', 'x', 'y', 'scale', 'translateX', 'translateY', 'translateZ', 'rotateX', 'rotateY', 'rotateZ'];\n    this.callActions('afterConstruct');\n  };\n\n  _mixitup.BaseStatic.call(_mixitup.Features);\n\n  _mixitup.Features.prototype = Object.create(_mixitup.Base.prototype);\n  h.extend(_mixitup.Features.prototype,\n  /** @lends mixitup.Features */\n  {\n    constructor: _mixitup.Features,\n\n    /**\r\n     * @private\r\n     * @return  {void}\r\n     */\n    init: function init() {\n      var self = this;\n      self.callActions('beforeInit', arguments);\n      self.canary = document.createElement('div');\n      self.setPrefixes();\n      self.runTests();\n      self.callActions('beforeInit', arguments);\n    },\n\n    /**\r\n     * @private\r\n     * @return  {void}\r\n     */\n    runTests: function runTests() {\n      var self = this;\n      self.callActions('beforeRunTests', arguments);\n      self.has.promises = typeof window.Promise === 'function';\n      self.has.transitions = self.transitionPrefix !== 'unsupported';\n      self.callActions('afterRunTests', arguments);\n      h.freeze(self.has);\n    },\n\n    /**\r\n     * @private\r\n     * @return  {void}\r\n     */\n    setPrefixes: function setPrefixes() {\n      var self = this;\n      self.callActions('beforeSetPrefixes', arguments);\n      self.transitionPrefix = h.getPrefix(self.canary, 'Transition', self.VENDORS);\n      self.transformPrefix = h.getPrefix(self.canary, 'Transform', self.VENDORS);\n      self.boxSizingPrefix = h.getPrefix(self.canary, 'BoxSizing', self.VENDORS);\n      self.boxSizingProp = self.boxSizingPrefix ? self.boxSizingPrefix + h.pascalCase(self.BOX_SIZING_PROP) : self.BOX_SIZING_PROP;\n      self.transitionProp = self.transitionPrefix ? self.transitionPrefix + h.pascalCase(self.TRANSITION_PROP) : self.TRANSITION_PROP;\n      self.transformProp = self.transformPrefix ? self.transformPrefix + h.pascalCase(self.TRANSFORM_PROP) : self.TRANSFORM_PROP;\n      self.transformRule = self.transformPrefix ? '-' + self.transformPrefix + '-' + self.TRANSFORM_PROP : self.TRANSFORM_PROP;\n      self.perspectiveProp = self.transformPrefix ? self.transformPrefix + h.pascalCase(self.PERSPECTIVE_PROP) : self.PERSPECTIVE_PROP;\n      self.perspectiveOriginProp = self.transformPrefix ? self.transformPrefix + h.pascalCase(self.PERSPECTIVE_ORIGIN_PROP) : self.PERSPECTIVE_ORIGIN_PROP;\n      self.callActions('afterSetPrefixes', arguments);\n    }\n  });\n  /**\r\n   * @constructor\r\n   * @memberof    mixitup\r\n   * @private\r\n   * @since       3.0.0\r\n   */\n\n  _mixitup.Has = function () {\n    this.transitions = false;\n    this.promises = false;\n    h.seal(this);\n  }; // Assign a singleton instance to `mixitup.features` and initialise:\n\n\n  _mixitup.features = new _mixitup.Features();\n\n  _mixitup.features.init();\n  /**\r\n   * A group of properties defining the mixer's animation and effects settings.\r\n   *\r\n   * @constructor\r\n   * @memberof    mixitup.Config\r\n   * @name        animation\r\n   * @namespace\r\n   * @public\r\n   * @since       2.0.0\r\n   */\n\n\n  _mixitup.ConfigAnimation = function () {\n    _mixitup.Base.call(this);\n\n    this.callActions('beforeConstruct');\n    /**\r\n     * A boolean dictating whether or not animation should be enabled for the MixItUp instance.\r\n     * If `false`, all operations will occur instantly and syncronously, although callback\r\n     * functions and any returned promises will still be fulfilled.\r\n     *\r\n     * @example <caption>Example: Create a mixer with all animations disabled</caption>\r\n     * var mixer = mixitup(containerEl, {\r\n     *     animation: {\r\n     *         enable: false\r\n     *     }\r\n     * });\r\n     *\r\n     * @name        enable\r\n     * @memberof    mixitup.Config.animation\r\n     * @instance\r\n     * @type        {boolean}\r\n     * @default     true\r\n     */\n\n    this.enable = true;\n    /**\r\n     * A string of one or more space-seperated properties to which transitions will be\r\n     * applied for all filtering animations.\r\n     *\r\n     * Properties can be listed any order or combination, although they will be applied in a specific\r\n     * predefined order to produce consistent results.\r\n     *\r\n     * To learn more about available effects, experiment with our <a href=\"https://www.kunkalabs.com/mixitup/\">\r\n     * sandbox demo</a> and try out the \"Export config\" button in the Animation options drop down.\r\n     *\r\n     * @example <caption>Example: Apply \"fade\" and \"translateZ\" effects to all animations</caption>\r\n     * // As targets are filtered in and out, they will fade between\r\n     * // opacity 1 and 0 and transform between translateZ(-100px) and\r\n     * // translateZ(0).\r\n     *\r\n     * var mixer = mixitup(containerEl, {\r\n     *     animation: {\r\n     *         effects: 'fade translateZ(-100px)'\r\n     *     }\r\n     * });\r\n     *\r\n     * @name        effects\r\n     * @memberof    mixitup.Config.animation\r\n     * @instance\r\n     * @type        {string}\r\n     * @default     'fade scale'\r\n     */\n\n    this.effects = 'fade scale';\n    /**\r\n     * A string of one or more space-seperated effects to be applied only to filter-in\r\n     * animations, overriding `config.animation.effects` if set.\r\n     *\r\n     * @example <caption>Example: Apply downwards vertical translate to targets being filtered in</caption>\r\n     *\r\n     * var mixer = mixitup(containerEl, {\r\n     *     animation: {\r\n     *         effectsIn: 'fade translateY(-100%)'\r\n     *     }\r\n     * });\r\n     *\r\n     * @name        effectsIn\r\n     * @memberof    mixitup.Config.animation\r\n     * @instance\r\n     * @type        {string}\r\n     * @default     ''\r\n     */\n\n    this.effectsIn = '';\n    /**\r\n     * A string of one or more space-seperated effects to be applied only to filter-out\r\n     * animations, overriding `config.animation.effects` if set.\r\n     *\r\n     * @example <caption>Example: Apply upwards vertical translate to targets being filtered out</caption>\r\n     *\r\n     * var mixer = mixitup(containerEl, {\r\n     *     animation: {\r\n     *         effectsOut: 'fade translateY(-100%)'\r\n     *     }\r\n     * });\r\n     *\r\n     * @name        effectsOut\r\n     * @memberof    mixitup.Config.animation\r\n     * @instance\r\n     * @type        {string}\r\n     * @default     ''\r\n     */\n\n    this.effectsOut = '';\n    /**\r\n     * An integer dictating the duration of all MixItUp animations in milliseconds, not\r\n     * including any additional delay apllied via the `'stagger'` effect.\r\n     *\r\n     * @example <caption>Example: Apply an animation duration of 200ms to all mixitup animations</caption>\r\n     *\r\n     * var mixer = mixitup(containerEl, {\r\n     *     animation: {\r\n     *         duration: 200\r\n     *     }\r\n     * });\r\n     *\r\n     * @name        duration\r\n     * @memberof    mixitup.Config.animation\r\n     * @instance\r\n     * @type        {number}\r\n     * @default     600\r\n     */\n\n    this.duration = 600;\n    /**\r\n     * A valid CSS3 transition-timing function or shorthand. For a full list of accepted\r\n     * values, visit <a href=\"http://easings.net\" target=\"_blank\">easings.net</a>.\r\n     *\r\n     * @example <caption>Example 1: Apply \"ease-in-out\" easing to all animations</caption>\r\n     *\r\n     * var mixer = mixitup(containerEl, {\r\n     *     animation: {\r\n     *         easing: 'ease-in-out'\r\n     *     }\r\n     * });\r\n     *\r\n     * @example <caption>Example 2: Apply a custom \"cubic-bezier\" easing function to all animations</caption>\r\n     * var mixer = mixitup(containerEl, {\r\n     *     animation: {\r\n     *         easing: 'cubic-bezier(0.645, 0.045, 0.355, 1)'\r\n     *     }\r\n     * });\r\n     *\r\n     * @name        easing\r\n     * @memberof    mixitup.Config.animation\r\n     * @instance\r\n     * @type        {string}\r\n     * @default     'ease'\r\n     */\n\n    this.easing = 'ease';\n    /**\r\n     * A boolean dictating whether or not to apply perspective to the MixItUp container\r\n     * during animations. By default, perspective is always applied and creates the\r\n     * illusion of three-dimensional space for effects such as `translateZ`, `rotateX`,\r\n     * and `rotateY`.\r\n     *\r\n     * You may wish to disable this and define your own perspective settings via CSS.\r\n     *\r\n     * @example <caption>Example: Prevent perspective from being applied to any 3D transforms</caption>\r\n     * var mixer = mixitup(containerEl, {\r\n     *     animation: {\r\n     *         applyPerspective: false\r\n     *     }\r\n     * });\r\n     *\r\n     * @name        applyPerspective\r\n     * @memberof    mixitup.Config.animation\r\n     * @instance\r\n     * @type        {bolean}\r\n     * @default     true\r\n     */\n\n    this.applyPerspective = true;\n    /**\r\n     * The perspective distance value to be applied to the container during animations,\r\n     * affecting any 3D-transform-based effects.\r\n     *\r\n     * @example <caption>Example: Set a perspective distance of 2000px</caption>\r\n     * var mixer = mixitup(containerEl, {\r\n     *     animation: {\r\n     *         effects: 'rotateY(-25deg)',\r\n     *         perspectiveDistance: '2000px'\r\n     *     }\r\n     * });\r\n     *\r\n     * @name        perspectiveDistance\r\n     * @memberof    mixitup.Config.animation\r\n     * @instance\r\n     * @type        {string}\r\n     * @default     '3000px'\r\n     */\n\n    this.perspectiveDistance = '3000px';\n    /**\r\n     * The perspective-origin value to be applied to the container during animations,\r\n     * affecting any 3D-transform-based effects.\r\n     *\r\n     * @example <caption>Example: Set a perspective origin in the top-right of the container</caption>\r\n     * var mixer = mixitup(containerEl, {\r\n     *     animation: {\r\n     *         effects: 'transateZ(-200px)',\r\n     *         perspectiveOrigin: '100% 0'\r\n     *     }\r\n     * });\r\n     *\r\n     * @name        perspectiveOrigin\r\n     * @memberof    mixitup.Config.animation\r\n     * @instance\r\n     * @type        {string}\r\n     * @default     '50% 50%'\r\n     */\n\n    this.perspectiveOrigin = '50% 50%';\n    /**\r\n     * A boolean dictating whether or not to enable the queuing of operations.\r\n     *\r\n     * If `true` (default), and a control is clicked or an API call is made while another\r\n     * operation is progress, the operation will go into the queue and will be automatically exectuted\r\n     * when the previous operaitons is finished.\r\n     *\r\n     * If `false`, any requested operations will be ignored, and the `onMixBusy` callback and `mixBusy`\r\n     * event will be fired. If `debug.showWarnings` is enabled, a console warning will also occur.\r\n     *\r\n     * @example <caption>Example: Disable queuing</caption>\r\n     * var mixer = mixitup(containerEl, {\r\n     *     animation: {\r\n     *         queue: false\r\n     *     }\r\n     * });\r\n     *\r\n     * @name        queue\r\n     * @memberof    mixitup.Config.animation\r\n     * @instance\r\n     * @type        {boolean}\r\n     * @default     true\r\n     */\n\n    this.queue = true;\n    /**\r\n     * An integer dictacting the maximum number of operations allowed in the queue at\r\n     * any time, when queuing is enabled.\r\n     *\r\n     * @example <caption>Example: Allow a maximum of 5 operations in the queue at any time</caption>\r\n     * var mixer = mixitup(containerEl, {\r\n     *     animation: {\r\n     *         queueLimit: 5\r\n     *     }\r\n     * });\r\n     *\r\n     * @name        queueLimit\r\n     * @memberof    mixitup.Config.animation\r\n     * @instance\r\n     * @type        {number}\r\n     * @default     3\r\n     */\n\n    this.queueLimit = 3;\n    /**\r\n     * A boolean dictating whether or not to transition the height and width of the\r\n     * container as elements are filtered in and out. If disabled, the container height\r\n     * will change abruptly.\r\n     *\r\n     * It may be desirable to disable this on mobile devices as the CSS `height` and\r\n     * `width` properties do not receive GPU-acceleration and can therefore cause stuttering.\r\n     *\r\n     * @example <caption>Example 1: Disable the transitioning of the container height and/or width</caption>\r\n     * var mixer = mixitup(containerEl, {\r\n     *     animation: {\r\n     *         animateResizeContainer: false\r\n     *     }\r\n     * });\r\n     *\r\n     * @example <caption>Example 2: Disable the transitioning of the container height and/or width for mobile devices only</caption>\r\n     * var mixer = mixitup(containerEl, {\r\n     *     animation: {\r\n     *         animateResizeContainer: myFeatureTests.isMobile ? false : true\r\n     *     }\r\n     * });\r\n     *\r\n     * @name        animateResizeContainer\r\n     * @memberof    mixitup.Config.animation\r\n     * @instance\r\n     * @type        {boolean}\r\n     * @default     true\r\n     */\n\n    this.animateResizeContainer = true;\n    /**\r\n     * A boolean dictating whether or not to transition the height and width of target\r\n     * elements as they change throughout the course of an animation.\r\n     *\r\n     * This is often a must for flex-box grid layouts where the size of target elements may change\r\n     * depending on final their position in relation to their siblings, or for `.changeLayout()`\r\n     * operations where the size of targets change between layouts.\r\n     *\r\n     * NB: This feature requires additional calculations and manipulation to non-hardware-accelerated\r\n     * properties which may adversely affect performance on slower devices, and is therefore\r\n     * disabled by default.\r\n     *\r\n     * @example <caption>Example: Enable the transitioning of target widths and heights</caption>\r\n     * var mixer = mixitup(containerEl, {\r\n     *     animation: {\r\n     *         animateResizeTargets: true\r\n     *     }\r\n     * });\r\n     *\r\n     * @name        animateResizeTargets\r\n     * @memberof    mixitup.Config.animation\r\n     * @instance\r\n     * @type        {boolean}\r\n     * @default     false\r\n     */\n\n    this.animateResizeTargets = false;\n    /**\r\n     * A custom function used to manipulate the order in which the stagger delay is\r\n     * incremented when using the ‘stagger’ effect.\r\n     *\r\n     * When using the 'stagger' effect, the delay applied to each target element is incremented\r\n     * based on its index. You may create a custom function to manipulate the order in which the\r\n     * delay is incremented and create engaging non-linear stagger effects.\r\n     *\r\n     * The function receives the index of the target element as a parameter, and must\r\n     * return an integer which serves as the multiplier for the stagger delay.\r\n     *\r\n     * @example <caption>Example 1: Stagger target elements by column in a 3-column grid</caption>\r\n     * var mixer = mixitup(containerEl, {\r\n     *     animation: {\r\n     *         effects: 'fade stagger(100ms)',\r\n     *         staggerSequence: function(i) {\r\n     *             return i % 3;\r\n     *         }\r\n     *     }\r\n     * });\r\n     *\r\n     * @example <caption>Example 2: Using an algorithm to produce a more complex sequence</caption>\r\n     * var mixer = mixitup(containerEl, {\r\n     *     animation: {\r\n     *         effects: 'fade stagger(100ms)',\r\n     *         staggerSequence: function(i) {\r\n     *             return (2*i) - (5*((i/3) - ((1/3) * (i%3))));\r\n     *         }\r\n     *     }\r\n     * });\r\n     *\r\n     * @name        staggerSequence\r\n     * @memberof    mixitup.Config.animation\r\n     * @instance\r\n     * @type        {function}\r\n     * @default     null\r\n     */\n\n    this.staggerSequence = null;\n    /**\r\n     * A boolean dictating whether or not to reverse the direction of `translate`\r\n     * and `rotate` transforms for elements being filtered out.\r\n     *\r\n     * It can be used to create carousel-like animations where elements enter and exit\r\n     * from opposite directions. If enabled, the effect `translateX(-100%)` for elements\r\n     * being filtered in would become `translateX(100%)` for targets being filtered out.\r\n     *\r\n     * This functionality can also be achieved by providing seperate effects\r\n     * strings for `config.animation.effectsIn` and `config.animation.effectsOut`.\r\n     *\r\n     * @example <caption>Example: Reverse the desired direction on any translate/rotate effect for targets being filtered out</caption>\r\n     * // Elements being filtered in will be translated from '100%' to '0' while\r\n     * // elements being filtered out will be translated from 0 to '-100%'\r\n     *\r\n     * var mixer = mixitup(containerEl, {\r\n     *     animation: {\r\n     *         effects: 'fade translateX(100%)',\r\n     *         reverseOut: true,\r\n     *         nudge: false // Disable nudging to create a carousel-like effect\r\n     *     }\r\n     * });\r\n     *\r\n     * @name        reverseOut\r\n     * @memberof    mixitup.Config.animation\r\n     * @instance\r\n     * @type        {boolean}\r\n     * @default     false\r\n     */\n\n    this.reverseOut = false;\n    /**\r\n     * A boolean dictating whether or not to \"nudge\" the animation path of targets\r\n     * when they are being filtered in and out simulatenously.\r\n     *\r\n     * This has been the default behavior of MixItUp since version 1, but it\r\n     * may be desirable to disable this effect when filtering directly from\r\n     * one exclusive set of targets to a different exclusive set of targets,\r\n     * to create a carousel-like effect, or a generally more subtle animation.\r\n     *\r\n     * @example <caption>Example: Disable the \"nudging\" of targets being filtered in and out simulatenously</caption>\r\n     *\r\n     * var mixer = mixitup(containerEl, {\r\n     *     animation: {\r\n     *         nudge: false\r\n     *     }\r\n     * });\r\n     *\r\n     * @name        nudge\r\n     * @memberof    mixitup.Config.animation\r\n     * @instance\r\n     * @type        {boolean}\r\n     * @default     true\r\n     */\n\n    this.nudge = true;\n    /**\r\n     * A boolean dictating whether or not to clamp the height of the container while MixItUp's\r\n     * geometry tests are carried out before an operation.\r\n     *\r\n     * To prevent scroll-bar flicker, clamping is turned on by default. But in the case where the\r\n     * height of the container might affect its vertical positioning in the viewport\r\n     * (e.g. a vertically-centered container), this should be turned off to ensure accurate\r\n     * test results and a smooth animation.\r\n     *\r\n     * @example <caption>Example: Disable container height-clamping</caption>\r\n     *\r\n     * var mixer = mixitup(containerEl, {\r\n     *     animation: {\r\n     *         clampHeight: false\r\n     *     }\r\n     * });\r\n     *\r\n     * @name        clampHeight\r\n     * @memberof    mixitup.Config.animation\r\n     * @instance\r\n     * @type        {boolean}\r\n     * @default     true\r\n     */\n\n    this.clampHeight = true;\n    /**\r\n     * A boolean dictating whether or not to clamp the width of the container while MixItUp's\r\n     * geometry tests are carried out before an operation.\r\n     *\r\n     * To prevent scroll-bar flicker, clamping is turned on by default. But in the case where the\r\n     * width of the container might affect its horitzontal positioning in the viewport\r\n     * (e.g. a horizontall-centered container), this should be turned off to ensure accurate\r\n     * test results and a smooth animation.\r\n     *\r\n     * @example <caption>Example: Disable container width-clamping</caption>\r\n     *\r\n     * var mixer = mixitup(containerEl, {\r\n     *     animation: {\r\n     *         clampWidth: false\r\n     *     }\r\n     * });\r\n     *\r\n     * @name        clampWidth\r\n     * @memberof    mixitup.Config.animation\r\n     * @instance\r\n     * @type        {boolean}\r\n     * @default     true\r\n     */\n\n    this.clampWidth = true;\n    this.callActions('afterConstruct');\n    h.seal(this);\n  };\n\n  _mixitup.BaseStatic.call(_mixitup.ConfigAnimation);\n\n  _mixitup.ConfigAnimation.prototype = Object.create(_mixitup.Base.prototype);\n  _mixitup.ConfigAnimation.prototype.constructor = _mixitup.ConfigAnimation;\n  /**\r\n   * A group of properties relating to the behavior of the Mixer.\r\n   *\r\n   * @constructor\r\n   * @memberof    mixitup.Config\r\n   * @name        behavior\r\n   * @namespace\r\n   * @public\r\n   * @since       3.1.12\r\n   */\n\n  _mixitup.ConfigBehavior = function () {\n    _mixitup.Base.call(this);\n\n    this.callActions('beforeConstruct');\n    /**\r\n     * A boolean dictating whether to allow \"live\" sorting of the mixer.\r\n     *\r\n     * Because of the expensive nature of sorting, MixItUp makes use of several\r\n     * internal optimizations to skip redundant sorting operations, such as when\r\n     * the newly requested sort command is the same as the active one. The caveat\r\n     * to this optimization is that \"live\" edits to the value of a target's sorting\r\n     * attribute will be ignored when requesting a re-sort by the same attribute.\r\n     *\r\n     * By setting to `behavior.liveSort` to `true`, the mixer will always re-sort\r\n     * regardless of whether or not the sorting attribute and order have changed.\r\n     *\r\n     * @example <caption>Example: Enabling `liveSort` to allow for re-sorting</caption>\r\n     *\r\n     * var mixer = mixitup(containerEl, {\r\n     *     behavior: {\r\n     *         liveSort: true\r\n     *     },\r\n     *     load: {\r\n     *         sort: 'edited:desc'\r\n     *     }\r\n     * });\r\n     *\r\n     * var target = containerEl.children[3];\r\n     *\r\n     * console.log(target.getAttribute('data-edited')); // '2015-04-24'\r\n     *\r\n     * target.setAttribute('data-edited', '2017-08-10'); // Update the target's edited date\r\n     *\r\n     * mixer.sort('edited:desc')\r\n     *     .then(function(state) {\r\n     *         // The target is now at the top of the list\r\n     *\r\n     *         console.log(state.targets[0] === target); // true\r\n     *     });\r\n     *\r\n     * @name        liveSort\r\n     * @memberof    mixitup.Config.behavior\r\n     * @instance\r\n     * @type        {boolean}\r\n     * @default     false\r\n     */\n\n    this.liveSort = false;\n    this.callActions('afterConstruct');\n    h.seal(this);\n  };\n\n  _mixitup.BaseStatic.call(_mixitup.ConfigBehavior);\n\n  _mixitup.ConfigBehavior.prototype = Object.create(_mixitup.Base.prototype);\n  _mixitup.ConfigBehavior.prototype.constructor = _mixitup.ConfigBehavior;\n  /**\r\n   * A group of optional callback functions to be invoked at various\r\n   * points within the lifecycle of a mixer operation.\r\n   *\r\n   * Each function is analogous to an event of the same name triggered from the\r\n   * container element, and is invoked immediately after it.\r\n   *\r\n   * All callback functions receive the current `state` object as their first\r\n   * argument, as well as other more specific arguments described below.\r\n   *\r\n   * @constructor\r\n   * @memberof    mixitup.Config\r\n   * @name        callbacks\r\n   * @namespace\r\n   * @public\r\n   * @since       2.0.0\r\n   */\n\n  _mixitup.ConfigCallbacks = function () {\n    _mixitup.Base.call(this);\n\n    this.callActions('beforeConstruct');\n    /**\r\n     * A callback function invoked immediately after any MixItUp operation is requested\r\n     * and before animations have begun.\r\n     *\r\n     * A second `futureState` argument is passed to the function which represents the final\r\n     * state of the mixer once the requested operation has completed.\r\n     *\r\n     * @example <caption>Example: Adding an `onMixStart` callback function</caption>\r\n     * var mixer = mixitup(containerEl, {\r\n     *     callbacks: {\r\n     *         onMixStart: function(state, futureState) {\r\n     *              console.log('Starting operation...');\r\n     *         }\r\n     *     }\r\n     * });\r\n     *\r\n     * @name        onMixStart\r\n     * @memberof    mixitup.Config.callbacks\r\n     * @instance\r\n     * @type        {function}\r\n     * @default     null\r\n     */\n\n    this.onMixStart = null;\n    /**\r\n     * A callback function invoked when a MixItUp operation is requested while another\r\n     * operation is in progress, and the animation queue is full, or queueing\r\n     * is disabled.\r\n     *\r\n     * @example <caption>Example: Adding an `onMixBusy` callback function</caption>\r\n     * var mixer = mixitup(containerEl, {\r\n     *     callbacks: {\r\n     *         onMixBusy: function(state) {\r\n     *              console.log('Mixer busy');\r\n     *         }\r\n     *     }\r\n     * });\r\n     *\r\n     * @name        onMixBusy\r\n     * @memberof    mixitup.Config.callbacks\r\n     * @instance\r\n     * @type        {function}\r\n     * @default     null\r\n     */\n\n    this.onMixBusy = null;\n    /**\r\n     * A callback function invoked after any MixItUp operation has completed, and the\r\n     * state has been updated.\r\n     *\r\n     * @example <caption>Example: Adding an `onMixEnd` callback function</caption>\r\n     * var mixer = mixitup(containerEl, {\r\n     *     callbacks: {\r\n     *         onMixEnd: function(state) {\r\n     *              console.log('Operation complete');\r\n     *         }\r\n     *     }\r\n     * });\r\n     *\r\n     * @name        onMixEnd\r\n     * @memberof    mixitup.Config.callbacks\r\n     * @instance\r\n     * @type        {function}\r\n     * @default     null\r\n     */\n\n    this.onMixEnd = null;\n    /**\r\n     * A callback function invoked whenever an operation \"fails\", i.e. no targets\r\n     * could be found matching the requested filter.\r\n     *\r\n     * @example <caption>Example: Adding an `onMixFail` callback function</caption>\r\n     * var mixer = mixitup(containerEl, {\r\n     *     callbacks: {\r\n     *         onMixFail: function(state) {\r\n     *              console.log('No items could be found matching the requested filter');\r\n     *         }\r\n     *     }\r\n     * });\r\n     *\r\n     * @name        onMixFail\r\n     * @memberof    mixitup.Config.callbacks\r\n     * @instance\r\n     * @type        {function}\r\n     * @default     null\r\n     */\n\n    this.onMixFail = null;\n    /**\r\n     * A callback function invoked whenever a MixItUp control is clicked, and before its\r\n     * respective operation is requested.\r\n     *\r\n     * The clicked element is assigned to the `this` keyword within the function. The original\r\n     * click event is passed to the function as the second argument, which can be useful if\r\n     * using `<a>` tags as controls where the default behavior needs to be prevented.\r\n     *\r\n     * Returning `false` from the callback will prevent the control click from triggering\r\n     * an operation.\r\n     *\r\n     * @example <caption>Example 1: Adding an `onMixClick` callback function</caption>\r\n     * var mixer = mixitup(containerEl, {\r\n     *     callbacks: {\r\n     *         onMixClick: function(state, originalEvent) {\r\n     *              console.log('The control \"' + this.innerText + '\" was clicked');\r\n     *         }\r\n     *     }\r\n     * });\r\n     *\r\n     * @example <caption>Example 2: Using `onMixClick` to manipulate the original click event</caption>\r\n     * var mixer = mixitup(containerEl, {\r\n     *     callbacks: {\r\n     *         onMixClick: function(state, originalEvent) {\r\n     *              // Prevent original click event from bubbling up:\r\n     *              originalEvent.stopPropagation();\r\n     *\r\n     *              // Prevent default behavior of clicked element:\r\n     *              originalEvent.preventDefault();\r\n     *         }\r\n     *     }\r\n     * });\r\n     *\r\n     * @example <caption>Example 3: Using `onMixClick` to conditionally cancel operations</caption>\r\n     * var mixer = mixitup(containerEl, {\r\n     *     callbacks: {\r\n     *         onMixClick: function(state, originalEvent) {\r\n     *              // Perform some conditional check:\r\n     *\r\n     *              if (myApp.isLoading) {\r\n     *                  // By returning false, we can prevent the control click from triggering an operation.\r\n     *\r\n     *                  return false;\r\n     *              }\r\n     *         }\r\n     *     }\r\n     * });\r\n     *\r\n     * @name        onMixClick\r\n     * @memberof    mixitup.Config.callbacks\r\n     * @instance\r\n     * @type        {function}\r\n     * @default     null\r\n     */\n\n    this.onMixClick = null;\n    this.callActions('afterConstruct');\n    h.seal(this);\n  };\n\n  _mixitup.BaseStatic.call(_mixitup.ConfigCallbacks);\n\n  _mixitup.ConfigCallbacks.prototype = Object.create(_mixitup.Base.prototype);\n  _mixitup.ConfigCallbacks.prototype.constructor = _mixitup.ConfigCallbacks;\n  /**\r\n   * A group of properties relating to clickable control elements.\r\n   *\r\n   * @constructor\r\n   * @memberof    mixitup.Config\r\n   * @name        controls\r\n   * @namespace\r\n   * @public\r\n   * @since       2.0.0\r\n   */\n\n  _mixitup.ConfigControls = function () {\n    _mixitup.Base.call(this);\n\n    this.callActions('beforeConstruct');\n    /**\r\n     * A boolean dictating whether or not controls should be enabled for the mixer instance.\r\n     *\r\n     * If `true` (default behavior), MixItUp will search the DOM for any clickable elements with\r\n     * `data-filter`, `data-sort` or `data-toggle` attributes, and bind them for click events.\r\n     *\r\n     * If `false`, no click handlers will be bound, and all functionality must therefore be performed\r\n     * via the mixer's API methods.\r\n     *\r\n     * If you do not intend to use the default controls, setting this property to `false` will\r\n     * marginally improve the startup time of your mixer instance, and will also prevent any other active\r\n     * mixer instances in the DOM which are bound to controls from controlling the instance.\r\n     *\r\n     * @example <caption>Example: Disabling controls</caption>\r\n     * var mixer = mixitup(containerEl, {\r\n     *     controls: {\r\n     *         enable: false\r\n     *     }\r\n     * });\r\n     *\r\n     * // With the default controls disabled, we can only control\r\n     * // the mixer via its API methods, e.g.:\r\n     *\r\n     * mixer.filter('.cat-1');\r\n     *\r\n     * @name        enable\r\n     * @memberof    mixitup.Config.controls\r\n     * @instance\r\n     * @type        {boolean}\r\n     * @default     true\r\n     */\n\n    this.enable = true;\n    /**\r\n     * A boolean dictating whether or not to use event delegation when binding click events\r\n     * to the default controls.\r\n     *\r\n     * If `false` (default behavior), each control button in the DOM will be found and\r\n     * individually bound when a mixer is instantiated, with their corresponding actions\r\n     * cached for performance.\r\n     *\r\n     * If `true`, a single click handler will be applied to the `window` (or container element - see\r\n     * `config.controls.scope`), and any click events triggered by elements with `data-filter`,\r\n     * `data-sort` or `data-toggle` attributes present will be handled as they propagate upwards.\r\n     *\r\n     * If you require a user interface where control buttons may be added, removed, or changed during the\r\n     * lifetime of a mixer, `controls.live` should be set to `true`. There is a marginal but unavoidable\r\n     * performance deficit when using live controls, as the value of each control button must be read\r\n     * from the DOM in real time once the click event has propagated.\r\n     *\r\n     * @example <caption>Example: Setting live controls</caption>\r\n     * var mixer = mixitup(containerEl, {\r\n     *     controls: {\r\n     *         live: true\r\n     *     }\r\n     * });\r\n     *\r\n     * // Control buttons can now be added, remove and changed without breaking\r\n     * // the mixer's UI\r\n     *\r\n     * @name        live\r\n     * @memberof    mixitup.Config.controls\r\n     * @instance\r\n     * @type        {boolean}\r\n     * @default     true\r\n     */\n\n    this.live = false;\n    /**\r\n     * A string dictating the \"scope\" to use when binding or querying the default controls. The available\r\n     * values are `'global'` or `'local'`.\r\n     *\r\n     * When set to `'global'` (default behavior), MixItUp will query the entire document for control buttons\r\n     * to bind, or delegate click events from (see `config.controls.live`).\r\n     *\r\n     * When set to `'local'`, MixItUp will only query (or bind click events to) its own container element.\r\n     * This may be desireable if you require multiple active mixer instances within the same document, with\r\n     * controls that would otherwise intefere with each other if scoped globally.\r\n     *\r\n     * Conversely, if you wish to control multiple instances with a single UI, you would create one\r\n     * set of controls and keep the controls scope of each mixer set to `global`.\r\n     *\r\n     * @example <caption>Example: Setting 'local' scoped controls</caption>\r\n     * var mixerOne = mixitup(containerOne, {\r\n     *     controls: {\r\n     *         scope: 'local'\r\n     *     }\r\n     * });\r\n     *\r\n     * var mixerTwo = mixitup(containerTwo, {\r\n     *     controls: {\r\n     *         scope: 'local'\r\n     *     }\r\n     * });\r\n     *\r\n     * // Both mixers can now exist within the same document with\r\n     * // isolated controls placed within their container elements.\r\n     *\r\n     * @name        scope\r\n     * @memberof    mixitup.Config.controls\r\n     * @instance\r\n     * @type        {string}\r\n     * @default     'global'\r\n     */\n\n    this.scope = 'global'; // enum: ['local' ,'global']\n\n    /**\r\n     * A string dictating the type of logic to apply when concatenating the filter selectors of\r\n     * active toggle buttons (i.e. any clickable element with a `data-toggle` attribute).\r\n     *\r\n     * If set to `'or'` (default behavior), selectors will be concatenated together as\r\n     * a comma-seperated list. For example:\r\n     *\r\n     * `'.cat-1, .cat-2'` (shows any elements matching `'.cat-1'` OR `'.cat-2'`)\r\n     *\r\n     * If set to `'and'`, selectors will be directly concatenated together. For example:\r\n     *\r\n     * `'.cat-1.cat-2'` (shows any elements which match both `'.cat-1'` AND `'.cat-2'`)\r\n     *\r\n     * @example <caption>Example: Setting \"and\" toggle logic</caption>\r\n     * var mixer = mixitup(containerEl, {\r\n     *     controls: {\r\n     *         toggleLogic: 'and'\r\n     *     }\r\n     * });\r\n     *\r\n     * @name        toggleLogic\r\n     * @memberof    mixitup.Config.controls\r\n     * @instance\r\n     * @type        {string}\r\n     * @default     'or'\r\n     */\n\n    this.toggleLogic = 'or'; // enum: ['or', 'and']\n\n    /**\r\n     * A string dictating the filter behavior when all toggles are inactive.\r\n     *\r\n     * When set to `'all'` (default behavior), *all* targets will be shown by default\r\n     * when no toggles are active, or at the moment all active toggles are toggled off.\r\n     *\r\n     * When set to `'none'`, no targets will be shown by default when no toggles are\r\n     * active, or at the moment all active toggles are toggled off.\r\n     *\r\n     * @example <caption>Example 1: Setting the default toggle behavior to `'all'`</caption>\r\n     * var mixer = mixitup(containerEl, {\r\n     *     controls: {\r\n     *         toggleDefault: 'all'\r\n     *     }\r\n     * });\r\n     *\r\n     * mixer.toggleOn('.cat-2')\r\n     *     .then(function() {\r\n     *         // Deactivate all active toggles\r\n     *\r\n     *         return mixer.toggleOff('.cat-2')\r\n     *     })\r\n     *     .then(function(state) {\r\n     *          console.log(state.activeFilter.selector); // 'all'\r\n     *          console.log(state.totalShow); // 12\r\n     *     });\r\n     *\r\n     * @example <caption>Example 2: Setting the default toggle behavior to `'none'`</caption>\r\n     * var mixer = mixitup(containerEl, {\r\n     *     controls: {\r\n     *         toggleDefault: 'none'\r\n     *     }\r\n     * });\r\n     *\r\n     * mixer.toggleOn('.cat-2')\r\n     *     .then(function() {\r\n     *         // Deactivate all active toggles\r\n     *\r\n     *         return mixer.toggleOff('.cat-2')\r\n     *     })\r\n     *     .then(function(state) {\r\n     *          console.log(state.activeFilter.selector); // 'none'\r\n     *          console.log(state.totalShow); // 0\r\n     *     });\r\n     *\r\n     * @name        toggleDefault\r\n     * @memberof    mixitup.Config.controls\r\n     * @instance\r\n     * @type        {string}\r\n     * @default     'all'\r\n     */\n\n    this.toggleDefault = 'all'; // enum: ['all', 'none']\n\n    this.callActions('afterConstruct');\n    h.seal(this);\n  };\n\n  _mixitup.BaseStatic.call(_mixitup.ConfigControls);\n\n  _mixitup.ConfigControls.prototype = Object.create(_mixitup.Base.prototype);\n  _mixitup.ConfigControls.prototype.constructor = _mixitup.ConfigControls;\n  /**\r\n   * A group of properties defining the output and structure of class names programmatically\r\n   * added to controls and containers to reflect the state of the mixer.\r\n   *\r\n   * Most commonly, class names are added to controls by MixItUp to indicate that\r\n   * the control is active so that it can be styled accordingly - `'mixitup-control-active'` by default.\r\n   *\r\n   * Using a \"BEM\" like structure, each classname is broken into the three parts:\r\n   * a block namespace (`'mixitup'`), an element name (e.g. `'control'`), and an optional modifier\r\n   * name (e.g. `'active'`) reflecting the state of the element.\r\n   *\r\n   * By default, each part of the classname is concatenated together using single hyphens as\r\n   * delineators, but this can be easily customised to match the naming convention and style of\r\n   * your project.\r\n   *\r\n   * @constructor\r\n   * @memberof    mixitup.Config\r\n   * @name        classNames\r\n   * @namespace\r\n   * @public\r\n   * @since       3.0.0\r\n   */\n\n  _mixitup.ConfigClassNames = function () {\n    _mixitup.Base.call(this);\n\n    this.callActions('beforeConstruct');\n    /**\r\n     * The \"block\" portion, or top-level namespace added to the start of any class names created by MixItUp.\r\n     *\r\n     * @example <caption>Example 1: changing the `config.classNames.block` value</caption>\r\n     * var mixer = mixitup(containerEl, {\r\n     *     classNames: {\r\n     *         block: 'portfolio'\r\n     *     }\r\n     * });\r\n     *\r\n     * // Active control output: \"portfolio-control-active\"\r\n     *\r\n     * @example <caption>Example 2: Removing `config.classNames.block`</caption>\r\n     * var mixer = mixitup(containerEl, {\r\n     *     classNames: {\r\n     *         block: ''\r\n     *     }\r\n     * });\r\n     *\r\n     * // Active control output: \"control-active\"\r\n     *\r\n     * @name        block\r\n     * @memberof    mixitup.Config.classNames\r\n     * @instance\r\n     * @type        {string}\r\n     * @default     'mixitup'\r\n     */\n\n    this.block = 'mixitup';\n    /**\r\n     * The \"element\" portion of the class name added to container.\r\n     *\r\n     * @name        elementContainer\r\n     * @memberof    mixitup.Config.classNames\r\n     * @instance\r\n     * @type        {string}\r\n     * @default     'container'\r\n     */\n\n    this.elementContainer = 'container';\n    /**\r\n     * The \"element\" portion of the class name added to filter controls.\r\n     *\r\n     * By default, all filter, sort, multimix and toggle controls take the same element value of `'control'`, but\r\n     * each type's element value can be individually overwritten to match the unique classNames of your controls as needed.\r\n     *\r\n     * @example <caption>Example 1: changing the `config.classNames.elementFilter` value</caption>\r\n     * var mixer = mixitup(containerEl, {\r\n     *     classNames: {\r\n     *         elementFilter: 'filter'\r\n     *     }\r\n     * });\r\n     *\r\n     * // Active filter output: \"mixitup-filter-active\"\r\n     *\r\n     * @example <caption>Example 2: changing the `config.classNames.block` and `config.classNames.elementFilter` values</caption>\r\n     * var mixer = mixitup(containerEl, {\r\n     *     classNames: {\r\n     *         block: 'portfolio',\r\n     *         elementFilter: 'filter'\r\n     *     }\r\n     * });\r\n     *\r\n     * // Active filter output: \"portfolio-filter-active\"\r\n     *\r\n     * @name        elementFilter\r\n     * @memberof    mixitup.Config.classNames\r\n     * @instance\r\n     * @type        {string}\r\n     * @default     'control'\r\n     */\n\n    this.elementFilter = 'control';\n    /**\r\n     * The \"element\" portion of the class name added to sort controls.\r\n     *\r\n     * By default, all filter, sort, multimix and toggle controls take the same element value of `'control'`, but\r\n     * each type's element value can be individually overwritten to match the unique classNames of your controls as needed.\r\n     *\r\n     * @example <caption>Example 1: changing the `config.classNames.elementSort` value</caption>\r\n     * var mixer = mixitup(containerEl, {\r\n     *     classNames: {\r\n     *         elementSort: 'sort'\r\n     *     }\r\n     * });\r\n     *\r\n     * // Active sort output: \"mixitup-sort-active\"\r\n     *\r\n     * @example <caption>Example 2: changing the `config.classNames.block` and `config.classNames.elementSort` values</caption>\r\n     * var mixer = mixitup(containerEl, {\r\n     *     classNames: {\r\n     *         block: 'portfolio',\r\n     *         elementSort: 'sort'\r\n     *     }\r\n     * });\r\n     *\r\n     * // Active sort output: \"portfolio-sort-active\"\r\n     *\r\n     * @name        elementSort\r\n     * @memberof    mixitup.Config.classNames\r\n     * @instance\r\n     * @type        {string}\r\n     * @default     'control'\r\n     */\n\n    this.elementSort = 'control';\n    /**\r\n     * The \"element\" portion of the class name added to multimix controls.\r\n     *\r\n     * By default, all filter, sort, multimix and toggle controls take the same element value of `'control'`, but\r\n     * each type's element value can be individually overwritten to match the unique classNames of your controls as needed.\r\n     *\r\n     * @example <caption>Example 1: changing the `config.classNames.elementMultimix` value</caption>\r\n     * var mixer = mixitup(containerEl, {\r\n     *     classNames: {\r\n     *         elementMultimix: 'multimix'\r\n     *     }\r\n     * });\r\n     *\r\n     * // Active multimix output: \"mixitup-multimix-active\"\r\n     *\r\n     * @example <caption>Example 2: changing the `config.classNames.block` and `config.classNames.elementMultimix` values</caption>\r\n     * var mixer = mixitup(containerEl, {\r\n     *     classNames: {\r\n     *         block: 'portfolio',\r\n     *         elementSort: 'multimix'\r\n     *     }\r\n     * });\r\n     *\r\n     * // Active multimix output: \"portfolio-multimix-active\"\r\n     *\r\n     * @name        elementMultimix\r\n     * @memberof    mixitup.Config.classNames\r\n     * @instance\r\n     * @type        {string}\r\n     * @default     'control'\r\n     */\n\n    this.elementMultimix = 'control';\n    /**\r\n     * The \"element\" portion of the class name added to toggle controls.\r\n     *\r\n     * By default, all filter, sort, multimix and toggle controls take the same element value of `'control'`, but\r\n     * each type's element value can be individually overwritten to match the unique classNames of your controls as needed.\r\n     *\r\n     * @example <caption>Example 1: changing the `config.classNames.elementToggle` value</caption>\r\n     * var mixer = mixitup(containerEl, {\r\n     *     classNames: {\r\n     *         elementToggle: 'toggle'\r\n     *     }\r\n     * });\r\n     *\r\n     * // Active toggle output: \"mixitup-toggle-active\"\r\n     *\r\n     * @example <caption>Example 2: changing the `config.classNames.block` and `config.classNames.elementToggle` values</caption>\r\n     * var mixer = mixitup(containerEl, {\r\n     *     classNames: {\r\n     *         block: 'portfolio',\r\n     *         elementToggle: 'toggle'\r\n     *     }\r\n     * });\r\n     *\r\n     * // Active toggle output: \"portfolio-toggle-active\"\r\n     *\r\n     * @name        elementToggle\r\n     * @memberof    mixitup.Config.classNames\r\n     * @instance\r\n     * @type        {string}\r\n     * @default     'control'\r\n     */\n\n    this.elementToggle = 'control';\n    /**\r\n     * The \"modifier\" portion of the class name added to active controls.\r\n     * @name        modifierActive\r\n     * @memberof    mixitup.Config.classNames\r\n     * @instance\r\n     * @type        {string}\r\n     * @default     'active'\r\n     */\n\n    this.modifierActive = 'active';\n    /**\r\n     * The \"modifier\" portion of the class name added to disabled controls.\r\n     *\r\n     * @name        modifierDisabled\r\n     * @memberof    mixitup.Config.classNames\r\n     * @instance\r\n     * @type        {string}\r\n     * @default     'disabled'\r\n     */\n\n    this.modifierDisabled = 'disabled';\n    /**\r\n     * The \"modifier\" portion of the class name added to the container when in a \"failed\" state.\r\n     *\r\n     * @name        modifierFailed\r\n     * @memberof    mixitup.Config.classNames\r\n     * @instance\r\n     * @type        {string}\r\n     * @default     'failed'\r\n     */\n\n    this.modifierFailed = 'failed';\n    /**\r\n     * The delineator used between the \"block\" and \"element\" portions of any class name added by MixItUp.\r\n     *\r\n     * If the block portion is ommited by setting it to an empty string, no delineator will be added.\r\n     *\r\n     * @example <caption>Example: changing the delineator to match BEM convention</caption>\r\n     * var mixer = mixitup(containerEl, {\r\n     *     classNames: {\r\n     *         delineatorElement: '__'\r\n     *     }\r\n     * });\r\n     *\r\n     * // example active control output: \"mixitup__control-active\"\r\n     *\r\n     * @name        delineatorElement\r\n     * @memberof    mixitup.Config.classNames\r\n     * @instance\r\n     * @type        {string}\r\n     * @default     '-'\r\n     */\n\n    this.delineatorElement = '-';\n    /**\r\n     * The delineator used between the \"element\" and \"modifier\" portions of any class name added by MixItUp.\r\n     *\r\n     * If the element portion is ommited by setting it to an empty string, no delineator will be added.\r\n     *\r\n     * @example <caption>Example: changing both delineators to match BEM convention</caption>\r\n     * var mixer = mixitup(containerEl, {\r\n     *     classNames: {\r\n     *         delineatorElement: '__'\r\n     *         delineatorModifier: '--'\r\n     *     }\r\n     * });\r\n     *\r\n     * // Active control output: \"mixitup__control--active\"\r\n     *\r\n     * @name        delineatorModifier\r\n     * @memberof    mixitup.Config.classNames\r\n     * @instance\r\n     * @type        {string}\r\n     * @default     '-'\r\n     */\n\n    this.delineatorModifier = '-';\n    this.callActions('afterConstruct');\n    h.seal(this);\n  };\n\n  _mixitup.BaseStatic.call(_mixitup.ConfigClassNames);\n\n  _mixitup.ConfigClassNames.prototype = Object.create(_mixitup.Base.prototype);\n  _mixitup.ConfigClassNames.prototype.constructor = _mixitup.ConfigClassNames;\n  /**\r\n   * A group of properties relating to MixItUp's dataset API.\r\n   *\r\n   * @constructor\r\n   * @memberof    mixitup.Config\r\n   * @name        data\r\n   * @namespace\r\n   * @public\r\n   * @since       3.0.0\r\n   */\n\n  _mixitup.ConfigData = function () {\n    _mixitup.Base.call(this);\n\n    this.callActions('beforeConstruct');\n    /**\r\n     * A string specifying the name of the key containing your data model's unique\r\n     * identifier (UID). To use the dataset API, a UID key must be specified and\r\n     * be present and unique on all objects in the dataset you provide to MixItUp.\r\n     *\r\n     * For example, if your dataset is made up of MongoDB documents, the UID\r\n     * key would be `'id'` or `'_id'`.\r\n     *\r\n     * @example <caption>Example: Setting the UID to `'id'`</caption>\r\n     * var mixer = mixitup(containerEl, {\r\n     *     data: {\r\n     *         uidKey: 'id'\r\n     *     }\r\n     * });\r\n     *\r\n     * @name        uidKey\r\n     * @memberof    mixitup.Config.data\r\n     * @instance\r\n     * @type        {string}\r\n     * @default     ''\r\n     */\n\n    this.uidKey = '';\n    /**\r\n     * A boolean dictating whether or not MixItUp should \"dirty check\" each object in\r\n     * your dataset for changes whenever `.dataset()` is called, and re-render any targets\r\n     * for which a change is found.\r\n     *\r\n     * Depending on the complexity of your data model, dirty checking can be expensive\r\n     * and is therefore disabled by default.\r\n     *\r\n     * NB: For changes to be detected, a new immutable instance of the edited model must be\r\n     * provided to mixitup, rather than manipulating properties on the existing instance.\r\n     * If your changes are a result of a DB write and read, you will most likely be calling\r\n     * `.dataset()` with a clean set of objects each time, so this will not be an issue.\r\n     *\r\n     * @example <caption>Example: Enabling dirty checking</caption>\r\n     *\r\n     * var myDataset = [\r\n     *     {\r\n     *         id: 0,\r\n     *         title: \"Blog Post Title 0\"\r\n     *         ...\r\n     *     },\r\n     *     {\r\n     *         id: 1,\r\n     *         title: \"Blog Post Title 1\"\r\n     *         ...\r\n     *     }\r\n     * ];\r\n     *\r\n     * // Instantiate a mixer with a pre-loaded dataset, and a target renderer\r\n     * // function defined\r\n     *\r\n     * var mixer = mixitup(containerEl, {\r\n     *     data: {\r\n     *         uidKey: 'id',\r\n     *         dirtyCheck: true\r\n     *     },\r\n     *     load: {\r\n     *         dataset: myDataset\r\n     *     },\r\n     *     render: {\r\n     *         target: function() { ... }\r\n     *     }\r\n     * });\r\n     *\r\n     * // For illustration, we will clone and edit the second object in the dataset.\r\n     * // NB: this would typically be done server-side in response to a DB update,\r\n     * and then re-queried via an API.\r\n     *\r\n     * myDataset[1] = Object.assign({}, myDataset[1]);\r\n     *\r\n     * myDataset[1].title = 'Blog Post Title 11';\r\n     *\r\n     * mixer.dataset(myDataset)\r\n     *    .then(function() {\r\n     *        // the target with ID \"1\", will be re-rendered reflecting its new title\r\n     *    });\r\n     *\r\n     * @name        dirtyCheck\r\n     * @memberof    mixitup.Config.data\r\n     * @instance\r\n     * @type        {boolean}\r\n     * @default     false\r\n     */\n\n    this.dirtyCheck = false;\n    this.callActions('afterConstruct');\n    h.seal(this);\n  };\n\n  _mixitup.BaseStatic.call(_mixitup.ConfigData);\n\n  _mixitup.ConfigData.prototype = Object.create(_mixitup.Base.prototype);\n  _mixitup.ConfigData.prototype.constructor = _mixitup.ConfigData;\n  /**\r\n   * A group of properties allowing the toggling of various debug features.\r\n   *\r\n   * @constructor\r\n   * @memberof    mixitup.Config\r\n   * @name        debug\r\n   * @namespace\r\n   * @public\r\n   * @since       3.0.0\r\n   */\n\n  _mixitup.ConfigDebug = function () {\n    _mixitup.Base.call(this);\n\n    this.callActions('beforeConstruct');\n    /**\r\n     * A boolean dictating whether or not the mixer instance returned by the\r\n     * `mixitup()` factory function should expose private properties and methods.\r\n     *\r\n     * By default, mixer instances only expose their public API, but enabling\r\n     * debug mode will give you access to various mixer internals which may aid\r\n     * in debugging, or the authoring of extensions.\r\n     *\r\n     * @example <caption>Example: Enabling debug mode</caption>\r\n     *\r\n     * var mixer = mixitup(containerEl, {\r\n     *     debug: {\r\n     *         enable: true\r\n     *     }\r\n     * });\r\n     *\r\n     * // Private properties and methods will now be visible on the mixer instance:\r\n     *\r\n     * console.log(mixer);\r\n     *\r\n     * @name        enable\r\n     * @memberof    mixitup.Config.debug\r\n     * @instance\r\n     * @type        {boolean}\r\n     * @default     false\r\n     */\n\n    this.enable = false;\n    /**\r\n     * A boolean dictating whether or not warnings should be shown when various\r\n     * common gotchas occur.\r\n     *\r\n     * Warnings are intended to provide insights during development when something\r\n     * occurs that is not a fatal, but may indicate an issue with your integration,\r\n     * and are therefore turned on by default. However, you may wish to disable\r\n     * them in production.\r\n     *\r\n     * @example <caption>Example 1: Disabling warnings</caption>\r\n     *\r\n     * var mixer = mixitup(containerEl, {\r\n     *     debug: {\r\n     *         showWarnings: false\r\n     *     }\r\n     * });\r\n     *\r\n     * @example <caption>Example 2: Disabling warnings based on environment</caption>\r\n     *\r\n     * var showWarnings = myAppConfig.environment === 'development' ? true : false;\r\n     *\r\n     * var mixer = mixitup(containerEl, {\r\n     *     debug: {\r\n     *         showWarnings: showWarnings\r\n     *     }\r\n     * });\r\n     *\r\n     * @name        showWarnings\r\n     * @memberof    mixitup.Config.debug\r\n     * @instance\r\n     * @type        {boolean}\r\n     * @default     true\r\n     */\n\n    this.showWarnings = true;\n    /**\r\n     * Used for server-side testing only.\r\n     *\r\n     * @private\r\n     * @name        fauxAsync\r\n     * @memberof    mixitup.Config.debug\r\n     * @instance\r\n     * @type        {boolean}\r\n     * @default     false\r\n     */\n\n    this.fauxAsync = false;\n    this.callActions('afterConstruct');\n    h.seal(this);\n  };\n\n  _mixitup.BaseStatic.call(_mixitup.ConfigDebug);\n\n  _mixitup.ConfigDebug.prototype = Object.create(_mixitup.Base.prototype);\n  _mixitup.ConfigDebug.prototype.constructor = _mixitup.ConfigDebug;\n  /**\r\n   * A group of properties relating to the layout of the container.\r\n   *\r\n   * @constructor\r\n   * @memberof    mixitup.Config\r\n   * @name        layout\r\n   * @namespace\r\n   * @public\r\n   * @since       3.0.0\r\n   */\n\n  _mixitup.ConfigLayout = function () {\n    _mixitup.Base.call(this);\n\n    this.callActions('beforeConstruct');\n    /**\r\n     * A boolean dictating whether or not mixitup should query all descendants\r\n     * of the container for targets, or only immediate children.\r\n     *\r\n     * By default, mixitup will query all descendants matching the\r\n     * `selectors.target` selector when indexing targets upon instantiation.\r\n     * This allows for targets to be nested inside a sub-container which is\r\n     * useful when ring-fencing targets from locally scoped controls in your\r\n     * markup (see `controls.scope`).\r\n     *\r\n     * However, if you are building a more complex UI requiring the nesting\r\n     * of mixers within mixers, you will most likely want to limit targets to\r\n     * immediate children of the container by setting this property to `false`.\r\n     *\r\n     * @example <caption>Example: Restricting targets to immediate children</caption>\r\n     *\r\n     * var mixer = mixitup(containerEl, {\r\n     *     layout: {\r\n     *         allowNestedTargets: false\r\n     *     }\r\n     * });\r\n     *\r\n     * @name        allowNestedTargets\r\n     * @memberof    mixitup.Config.layout\r\n     * @instance\r\n     * @type        {boolean}\r\n     * @default     true\r\n     */\n\n    this.allowNestedTargets = true;\n    /**\r\n     * A string specifying an optional class name to apply to the container when in\r\n     * its default state.\r\n     *\r\n     * By changing this class name or adding a class name to the container via the\r\n     * `.changeLayout()` API method, the CSS layout of the container can be changed,\r\n     * and MixItUp will attemp to gracefully animate the container and its targets\r\n     * between states.\r\n     *\r\n     * @example <caption>Example 1: Specifying a container class name</caption>\r\n     *\r\n     * var mixer = mixitup(containerEl, {\r\n     *     layout: {\r\n     *         containerClassName: 'grid'\r\n     *     }\r\n     * });\r\n     *\r\n     * @example <caption>Example 2: Changing the default class name with `.changeLayout()`</caption>\r\n     *\r\n     * var mixer = mixitup(containerEl, {\r\n     *     layout: {\r\n     *         containerClassName: 'grid'\r\n     *     }\r\n     * });\r\n     *\r\n     * mixer.changeLayout('list')\r\n     *     .then(function(state) {\r\n     *          console.log(state.activeContainerClass); // \"list\"\r\n     *     });\r\n     *\r\n     * @name        containerClassName\r\n     * @memberof    mixitup.Config.layout\r\n     * @instance\r\n     * @type        {string}\r\n     * @default     ''\r\n     */\n\n    this.containerClassName = '';\n    /**\r\n     * A reference to a non-target sibling element after which to insert targets\r\n     * when there are no targets in the container.\r\n     *\r\n     * @example <caption>Example: Setting a `siblingBefore` reference element</caption>\r\n     *\r\n     * var addButton = containerEl.querySelector('button');\r\n     *\r\n     * var mixer = mixitup(containerEl, {\r\n     *     layout: {\r\n     *         siblingBefore: addButton\r\n     *     }\r\n     * });\r\n     *\r\n     * @name        siblingBefore\r\n     * @memberof    mixitup.Config.layout\r\n     * @instance\r\n     * @type        {HTMLElement}\r\n     * @default     null\r\n     */\n\n    this.siblingBefore = null;\n    /**\r\n     * A reference to a non-target sibling element before which to insert targets\r\n     * when there are no targets in the container.\r\n     *\r\n     * @example <caption>Example: Setting an `siblingAfter` reference element</caption>\r\n     *\r\n     * var gap = containerEl.querySelector('.gap');\r\n     *\r\n     * var mixer = mixitup(containerEl, {\r\n     *     layout: {\r\n     *         siblingAfter: gap\r\n     *     }\r\n     * });\r\n     *\r\n     * @name        siblingAfter\r\n     * @memberof    mixitup.Config.layout\r\n     * @instance\r\n     * @type        {HTMLElement}\r\n     * @default     null\r\n     */\n\n    this.siblingAfter = null;\n    this.callActions('afterConstruct');\n    h.seal(this);\n  };\n\n  _mixitup.BaseStatic.call(_mixitup.ConfigLayout);\n\n  _mixitup.ConfigLayout.prototype = Object.create(_mixitup.Base.prototype);\n  _mixitup.ConfigLayout.prototype.constructor = _mixitup.ConfigLayout;\n  /**\r\n   * A group of properties defining the initial state of the mixer on load (instantiation).\r\n   *\r\n   * @constructor\r\n   * @memberof    mixitup.Config\r\n   * @name        load\r\n   * @namespace\r\n   * @public\r\n   * @since       2.0.0\r\n   */\n\n  _mixitup.ConfigLoad = function () {\n    _mixitup.Base.call(this);\n\n    this.callActions('beforeConstruct');\n    /**\r\n     * A string defining any filtering to be statically applied to the mixer on load.\r\n     * As per the `.filter()` API, this can be any valid selector string, or the\r\n     * values `'all'` or `'none'`.\r\n     *\r\n     * @example <caption>Example 1: Defining an initial filter selector to be applied on load</caption>\r\n     *\r\n     * // The mixer will show only those targets matching '.category-a' on load.\r\n     *\r\n     * var mixer = mixitup(containerEl, {\r\n     *     load: {\r\n     *         filter: '.category-a'\r\n     *     }\r\n     * });\r\n     *\r\n     * @example <caption>Example 2: Hiding all targets on load</caption>\r\n     *\r\n     * // The mixer will show hide all targets on load.\r\n     *\r\n     * var mixer = mixitup(containerEl, {\r\n     *     load: {\r\n     *         filter: 'none'\r\n     *     }\r\n     * });\r\n     *\r\n     * @name        filter\r\n     * @memberof    mixitup.Config.load\r\n     * @instance\r\n     * @type        {string}\r\n     * @default     'all'\r\n     */\n\n    this.filter = 'all';\n    /**\r\n     * A string defining any sorting to be statically applied to the mixer on load.\r\n     * As per the `.sort()` API, this should be a valid \"sort string\" made up of\r\n     * an attribute to sort by (or `'default'`) followed by an optional sorting\r\n     * order, or the value `'random'`;\r\n     *\r\n     * @example <caption>Example: Defining sorting to be applied on load</caption>\r\n     *\r\n     * // The mixer will sort the container by the value of the `data-published-date`\r\n     * // attribute, in descending order.\r\n     *\r\n     * var mixer = mixitup(containerEl, {\r\n     *     load: {\r\n     *         sort: 'published-date:desc'\r\n     *     }\r\n     * });\r\n     *\r\n     * @name        sort\r\n     * @memberof    mixitup.Config.load\r\n     * @instance\r\n     * @type        {string}\r\n     * @default     'default:asc'\r\n     */\n\n    this.sort = 'default:asc';\n    /**\r\n     * An array of objects representing the underlying data of any pre-rendered targets,\r\n     * when using the `.dataset()` API.\r\n     *\r\n     * NB: If targets are pre-rendered when the mixer is instantiated, this must be set.\r\n     *\r\n     * @example <caption>Example: Defining the initial underyling dataset</caption>\r\n     *\r\n     * var myDataset = [\r\n     *     {\r\n     *         id: 0,\r\n     *         title: \"Blog Post Title 0\",\r\n     *         ...\r\n     *     },\r\n     *     {\r\n     *         id: 1,\r\n     *         title: \"Blog Post Title 1\",\r\n     *         ...\r\n     *     }\r\n     * ];\r\n     *\r\n     * var mixer = mixitup(containerEl, {\r\n     *     data: {\r\n     *         uidKey: 'id'\r\n     *     },\r\n     *     load: {\r\n     *         dataset: myDataset\r\n     *     }\r\n     * });\r\n     *\r\n     * @name        dataset\r\n     * @memberof    mixitup.Config.load\r\n     * @instance\r\n     * @type        {Array.<object>}\r\n     * @default     null\r\n     */\n\n    this.dataset = null;\n    this.callActions('afterConstruct');\n    h.seal(this);\n  };\n\n  _mixitup.BaseStatic.call(_mixitup.ConfigLoad);\n\n  _mixitup.ConfigLoad.prototype = Object.create(_mixitup.Base.prototype);\n  _mixitup.ConfigLoad.prototype.constructor = _mixitup.ConfigLoad;\n  /**\r\n   * A group of properties defining the selectors used to query elements within a mixitup container.\r\n   *\r\n   * @constructor\r\n   * @memberof    mixitup.Config\r\n   * @name        selectors\r\n   * @namespace\r\n   * @public\r\n   * @since       3.0.0\r\n   */\n\n  _mixitup.ConfigSelectors = function () {\n    _mixitup.Base.call(this);\n\n    this.callActions('beforeConstruct');\n    /**\r\n     * A selector string used to query and index target elements within the container.\r\n     *\r\n     * By default, the class selector `'.mix'` is used, but this can be changed to an\r\n     * attribute or element selector to match the style of your project.\r\n     *\r\n     * @example <caption>Example 1: Changing the target selector</caption>\r\n     *\r\n     * var mixer = mixitup(containerEl, {\r\n     *     selectors: {\r\n     *         target: '.portfolio-item'\r\n     *     }\r\n     * });\r\n     *\r\n     * @example <caption>Example 2: Using an attribute selector as a target selector</caption>\r\n     *\r\n     * // The mixer will search for any children with the attribute `data-ref=\"mix\"`\r\n     *\r\n     * var mixer = mixitup(containerEl, {\r\n     *     selectors: {\r\n     *         target: '[data-ref=\"mix\"]'\r\n     *     }\r\n     * });\r\n     *\r\n     * @name        target\r\n     * @memberof    mixitup.Config.selectors\r\n     * @instance\r\n     * @type        {string}\r\n     * @default     '.mix'\r\n     */\n\n    this.target = '.mix';\n    /**\r\n     * A optional selector string used to add further specificity to the querying of control elements,\r\n     * in addition to their mandatory data attribute (e.g. `data-filter`, `data-toggle`, `data-sort`).\r\n     *\r\n     * This can be used if other elements in your document must contain the above attributes\r\n     * (e.g. for use in third-party scripts), and would otherwise interfere with MixItUp. Adding\r\n     * an additional `control` selector of your choice allows MixItUp to restrict event handling\r\n     * to only those elements matching the defined selector.\r\n     *\r\n     * @name        control\r\n     * @memberof    mixitup.Config.selectors\r\n     * @instance\r\n     * @type        {string}\r\n     * @default     ''\r\n     *\r\n     * @example <caption>Example 1: Adding a `selectors.control` selector</caption>\r\n     *\r\n     * var mixer = mixitup(containerEl, {\r\n     *     selectors: {\r\n     *         control: '.mixitup-control'\r\n     *     }\r\n     * });\r\n     *\r\n     * // Will not be handled:\r\n     * // <button data-filter=\".category-a\"></button>\r\n     *\r\n     * // Will be handled:\r\n     * // <button class=\"mixitup-control\" data-filter=\".category-a\"></button>\r\n     */\n\n    this.control = '';\n    this.callActions('afterConstruct');\n    h.seal(this);\n  };\n\n  _mixitup.BaseStatic.call(_mixitup.ConfigSelectors);\n\n  _mixitup.ConfigSelectors.prototype = Object.create(_mixitup.Base.prototype);\n  _mixitup.ConfigSelectors.prototype.constructor = _mixitup.ConfigSelectors;\n  /**\r\n   * A group of optional render functions for creating and updating elements.\r\n   *\r\n   * All render functions receive a data object, and should return a valid HTML string.\r\n   *\r\n   * @constructor\r\n   * @memberof    mixitup.Config\r\n   * @name        render\r\n   * @namespace\r\n   * @public\r\n   * @since       3.0.0\r\n   */\n\n  _mixitup.ConfigRender = function () {\n    _mixitup.Base.call(this);\n\n    this.callActions('beforeConstruct');\n    /**\r\n     * A function returning an HTML string representing a target element, or a reference to a\r\n     * single DOM element.\r\n     *\r\n     * The function is invoked as part of the `.dataset()` API, whenever a new item is added\r\n     * to the dataset, or an item in the dataset changes (if `dataset.dirtyCheck` is enabled).\r\n     *\r\n     * The function receives the relevant dataset item as its first parameter.\r\n     *\r\n     * @example <caption>Example 1: Using string concatenation</caption>\r\n     *\r\n     * var mixer = mixitup(containerEl, {\r\n     *     render: {\r\n     *         target: function(item) {\r\n     *             return (\r\n     *                 '&lt;div class=\"mix\"&gt;' +\r\n     *                     '&lt;h2&gt;' + item.title + '&lt;/h2&gt;' +\r\n     *                 '&lt;/div&gt;'\r\n     *             );\r\n     *         }\r\n     *     }\r\n     * });\r\n     *\r\n     * @example <caption>Example 2: Using an ES2015 template literal</caption>\r\n     *\r\n     * var mixer = mixitup(containerEl, {\r\n     *     render: {\r\n     *         target: function(item) {\r\n     *             return (\r\n     *                 `&lt;div class=\"mix\"&gt;\r\n     *                     &lt;h2&gt;${item.title}&lt;/h2&gt;\r\n     *                  &lt;/div&gt;`\r\n     *             );\r\n     *         }\r\n     *     }\r\n     * });\r\n     *\r\n     * @example <caption>Example 3: Using a Handlebars template</caption>\r\n     *\r\n     * var targetTemplate = Handlebars.compile('&lt;div class=\"mix\"&gt;&lt;h2&gt;{{title}}&lt;/h2&gt;&lt;/div&gt;');\r\n     *\r\n     * var mixer = mixitup(containerEl, {\r\n     *     render: {\r\n     *         target: targetTemplate\r\n     *     }\r\n     * });\r\n     *\r\n     * @example <caption>Example 4: Returning a DOM element</caption>\r\n     *\r\n     * var mixer = mixitup(containerEl, {\r\n     *     render: {\r\n     *         target: function(item) {\r\n     *              // Create a single element using your framework's built-in renderer\r\n     *\r\n     *              var el = ...\r\n     *\r\n     *              return el;\r\n     *         }\r\n     *     }\r\n     * });\r\n     *\r\n     * @name        target\r\n     * @memberof    mixitup.Config.render\r\n     * @instance\r\n     * @type        {function}\r\n     * @default     'null'\r\n     */\n\n    this.target = null;\n    this.callActions('afterConstruct');\n    h.seal(this);\n  };\n\n  _mixitup.BaseStatic.call(_mixitup.ConfigRender);\n\n  _mixitup.ConfigRender.prototype = Object.create(_mixitup.Base.prototype);\n  _mixitup.ConfigRender.prototype.constructor = _mixitup.ConfigRender;\n  /**\r\n   * @constructor\r\n   * @memberof    mixitup\r\n   * @private\r\n   * @since       3.0.0\r\n   */\n\n  _mixitup.ConfigTemplates = function () {\n    _mixitup.Base.call(this);\n\n    this.callActions('beforeConstruct');\n    this.callActions('afterConstruct');\n    h.seal(this);\n  };\n\n  _mixitup.BaseStatic.call(_mixitup.ConfigTemplates);\n\n  _mixitup.ConfigTemplates.prototype = Object.create(_mixitup.Base.prototype);\n  _mixitup.ConfigTemplates.prototype.constructor = _mixitup.ConfigTemplates;\n  /**\r\n   * `mixitup.Config` is an interface used for customising the functionality of a\r\n   * mixer instance. It is organised into several semantically distinct sub-objects,\r\n   * each one pertaining to a particular aspect of MixItUp functionality.\r\n   *\r\n   * An object literal containing any or all of the available properies,\r\n   * known as the \"configuration object\", can be passed as the second parameter to\r\n   * the `mixitup` factory function when creating a mixer instance to customise its\r\n   * functionality as needed.\r\n   *\r\n   * If no configuration object is passed, the mixer instance will take on the default\r\n   * configuration values detailed below.\r\n   *\r\n   * @example <caption>Example 1: Creating and passing the configuration object</caption>\r\n   * // Create a configuration object with desired values\r\n   *\r\n   * var config = {\r\n   *     animation: {\r\n   *         enable: false\r\n   *     },\r\n   *     selectors: {\r\n   *         target: '.item'\r\n   *     }\r\n   * };\r\n   *\r\n   * // Pass the configuration object to the mixitup factory function\r\n   *\r\n   * var mixer = mixitup(containerEl, config);\r\n   *\r\n   * @example <caption>Example 2: Passing the configuration object inline</caption>\r\n   * // Typically, the configuration object is passed inline for brevity.\r\n   *\r\n   * var mixer = mixitup(containerEl, {\r\n   *     controls: {\r\n   *         live: true,\r\n   *         toggleLogic: 'and'\r\n   *     }\r\n   * });\r\n   *\r\n   *\r\n   * @constructor\r\n   * @memberof    mixitup\r\n   * @namespace\r\n   * @public\r\n   * @since       2.0.0\r\n   */\n\n  _mixitup.Config = function () {\n    _mixitup.Base.call(this);\n\n    this.callActions('beforeConstruct');\n    this.animation = new _mixitup.ConfigAnimation();\n    this.behavior = new _mixitup.ConfigBehavior();\n    this.callbacks = new _mixitup.ConfigCallbacks();\n    this.controls = new _mixitup.ConfigControls();\n    this.classNames = new _mixitup.ConfigClassNames();\n    this.data = new _mixitup.ConfigData();\n    this.debug = new _mixitup.ConfigDebug();\n    this.layout = new _mixitup.ConfigLayout();\n    this.load = new _mixitup.ConfigLoad();\n    this.selectors = new _mixitup.ConfigSelectors();\n    this.render = new _mixitup.ConfigRender();\n    this.templates = new _mixitup.ConfigTemplates();\n    this.callActions('afterConstruct');\n    h.seal(this);\n  };\n\n  _mixitup.BaseStatic.call(_mixitup.Config);\n\n  _mixitup.Config.prototype = Object.create(_mixitup.Base.prototype);\n  _mixitup.Config.prototype.constructor = _mixitup.Config;\n  /**\r\n   * @constructor\r\n   * @memberof    mixitup\r\n   * @private\r\n   * @since       3.0.0\r\n   */\n\n  _mixitup.MixerDom = function () {\n    _mixitup.Base.call(this);\n\n    this.callActions('beforeConstruct');\n    this.document = null;\n    this.body = null;\n    this.container = null;\n    this.parent = null;\n    this.targets = [];\n    this.callActions('afterConstruct');\n    h.seal(this);\n  };\n\n  _mixitup.BaseStatic.call(_mixitup.MixerDom);\n\n  _mixitup.MixerDom.prototype = Object.create(_mixitup.Base.prototype);\n  _mixitup.MixerDom.prototype.constructor = _mixitup.MixerDom;\n  /**\r\n   * @constructor\r\n   * @memberof    mixitup\r\n   * @private\r\n   * @since       3.0.0\r\n   */\n\n  _mixitup.UiClassNames = function () {\n    _mixitup.Base.call(this);\n\n    this.callActions('beforeConstruct');\n    this.base = '';\n    this.active = '';\n    this.disabled = '';\n    this.callActions('afterConstruct');\n    h.seal(this);\n  };\n\n  _mixitup.BaseStatic.call(_mixitup.UiClassNames);\n\n  _mixitup.UiClassNames.prototype = Object.create(_mixitup.Base.prototype);\n  _mixitup.UiClassNames.prototype.constructor = _mixitup.UiClassNames;\n  /**\r\n   * An object into which all arbitrary arguments sent to '.dataset()' are mapped.\r\n   *\r\n   * @constructor\r\n   * @memberof    mixitup\r\n   * @private\r\n   * @since       3.0.0\r\n   */\n\n  _mixitup.CommandDataset = function () {\n    _mixitup.Base.call(this);\n\n    this.callActions('beforeConstruct');\n    this.dataset = null;\n    this.callActions('afterConstruct');\n    h.seal(this);\n  };\n\n  _mixitup.BaseStatic.call(_mixitup.CommandDataset);\n\n  _mixitup.CommandDataset.prototype = Object.create(_mixitup.Base.prototype);\n  _mixitup.CommandDataset.prototype.constructor = _mixitup.CommandDataset;\n  /**\r\n   * An object into which all arbitrary arguments sent to '.multimix()' are mapped.\r\n   *\r\n   * @constructor\r\n   * @memberof    mixitup\r\n   * @private\r\n   * @since       3.0.0\r\n   */\n\n  _mixitup.CommandMultimix = function () {\n    _mixitup.Base.call(this);\n\n    this.callActions('beforeConstruct');\n    this.filter = null;\n    this.sort = null;\n    this.insert = null;\n    this.remove = null;\n    this.changeLayout = null;\n    this.callActions('afterConstruct');\n    h.seal(this);\n  };\n\n  _mixitup.BaseStatic.call(_mixitup.CommandMultimix);\n\n  _mixitup.CommandMultimix.prototype = Object.create(_mixitup.Base.prototype);\n  _mixitup.CommandMultimix.prototype.constructor = _mixitup.CommandMultimix;\n  /**\r\n   * An object into which all arbitrary arguments sent to '.filter()' are mapped.\r\n   *\r\n   * @constructor\r\n   * @memberof    mixitup\r\n   * @private\r\n   * @since       3.0.0\r\n   */\n\n  _mixitup.CommandFilter = function () {\n    _mixitup.Base.call(this);\n\n    this.callActions('beforeConstruct');\n    this.selector = '';\n    this.collection = null;\n    this.action = 'show'; // enum: ['show', 'hide']\n\n    this.callActions('afterConstruct');\n    h.seal(this);\n  };\n\n  _mixitup.BaseStatic.call(_mixitup.CommandFilter);\n\n  _mixitup.CommandFilter.prototype = Object.create(_mixitup.Base.prototype);\n  _mixitup.CommandFilter.prototype.constructor = _mixitup.CommandFilter;\n  /**\r\n   * An object into which all arbitrary arguments sent to '.sort()' are mapped.\r\n   *\r\n   * @constructor\r\n   * @memberof    mixitup\r\n   * @private\r\n   * @since       3.0.0\r\n   */\n\n  _mixitup.CommandSort = function () {\n    _mixitup.Base.call(this);\n\n    this.callActions('beforeConstruct');\n    this.sortString = '';\n    this.attribute = '';\n    this.order = 'asc';\n    this.collection = null;\n    this.next = null;\n    this.callActions('afterConstruct');\n    h.seal(this);\n  };\n\n  _mixitup.BaseStatic.call(_mixitup.CommandSort);\n\n  _mixitup.CommandSort.prototype = Object.create(_mixitup.Base.prototype);\n  _mixitup.CommandSort.prototype.constructor = _mixitup.CommandSort;\n  /**\r\n   * An object into which all arbitrary arguments sent to '.insert()' are mapped.\r\n   *\r\n   * @constructor\r\n   * @memberof    mixitup\r\n   * @private\r\n   * @since       3.0.0\r\n   */\n\n  _mixitup.CommandInsert = function () {\n    _mixitup.Base.call(this);\n\n    this.callActions('beforeConstruct');\n    this.index = 0;\n    this.collection = [];\n    this.position = 'before'; // enum: ['before', 'after']\n\n    this.sibling = null;\n    this.callActions('afterConstruct');\n    h.seal(this);\n  };\n\n  _mixitup.BaseStatic.call(_mixitup.CommandInsert);\n\n  _mixitup.CommandInsert.prototype = Object.create(_mixitup.Base.prototype);\n  _mixitup.CommandInsert.prototype.constructor = _mixitup.CommandInsert;\n  /**\r\n   * An object into which all arbitrary arguments sent to '.remove()' are mapped.\r\n   *\r\n   * @constructor\r\n   * @memberof    mixitup\r\n   * @private\r\n   * @since       3.0.0\r\n   */\n\n  _mixitup.CommandRemove = function () {\n    _mixitup.Base.call(this);\n\n    this.callActions('beforeConstruct');\n    this.targets = [];\n    this.collection = [];\n    this.callActions('afterConstruct');\n    h.seal(this);\n  };\n\n  _mixitup.BaseStatic.call(_mixitup.CommandRemove);\n\n  _mixitup.CommandRemove.prototype = Object.create(_mixitup.Base.prototype);\n  _mixitup.CommandRemove.prototype.constructor = _mixitup.CommandRemove;\n  /**\r\n   * An object into which all arbitrary arguments sent to '.changeLayout()' are mapped.\r\n   *\r\n   * @constructor\r\n   * @memberof    mixitup\r\n   * @private\r\n   * @since       3.0.0\r\n   */\n\n  _mixitup.CommandChangeLayout = function () {\n    _mixitup.Base.call(this);\n\n    this.callActions('beforeConstruct');\n    this.containerClassName = '';\n    this.callActions('afterConstruct');\n    h.seal(this);\n  };\n\n  _mixitup.BaseStatic.call(_mixitup.CommandChangeLayout);\n\n  _mixitup.CommandChangeLayout.prototype = Object.create(_mixitup.Base.prototype);\n  _mixitup.CommandChangeLayout.prototype.constructor = _mixitup.CommandChangeLayout;\n  /**\r\n   * @constructor\r\n   * @memberof    mixitup\r\n   * @private\r\n   * @since       3.0.0\r\n   * @param       {string}        type\r\n   * @param       {string}        selector\r\n   * @param       {boolean}       [live]\r\n   * @param       {string}        [parent]\r\n   *     An optional string representing the name of the mixer.dom property containing a reference to a parent element.\r\n   */\n\n  _mixitup.ControlDefinition = function (type, selector, live, parent) {\n    _mixitup.Base.call(this);\n\n    this.callActions('beforeConstruct');\n    this.type = type;\n    this.selector = selector;\n    this.live = live || false;\n    this.parent = parent || '';\n    this.callActions('afterConstruct');\n    h.freeze(this);\n    h.seal(this);\n  };\n\n  _mixitup.BaseStatic.call(_mixitup.ControlDefinition);\n\n  _mixitup.ControlDefinition.prototype = Object.create(_mixitup.Base.prototype);\n  _mixitup.ControlDefinition.prototype.constructor = _mixitup.ControlDefinition;\n  _mixitup.controlDefinitions = [];\n\n  _mixitup.controlDefinitions.push(new _mixitup.ControlDefinition('multimix', '[data-filter][data-sort]'));\n\n  _mixitup.controlDefinitions.push(new _mixitup.ControlDefinition('filter', '[data-filter]'));\n\n  _mixitup.controlDefinitions.push(new _mixitup.ControlDefinition('sort', '[data-sort]'));\n\n  _mixitup.controlDefinitions.push(new _mixitup.ControlDefinition('toggle', '[data-toggle]'));\n  /**\r\n   * @constructor\r\n   * @memberof    mixitup\r\n   * @private\r\n   * @since       3.0.0\r\n   */\n\n\n  _mixitup.Control = function () {\n    _mixitup.Base.call(this);\n\n    this.callActions('beforeConstruct');\n    this.el = null;\n    this.selector = '';\n    this.bound = [];\n    this.pending = -1;\n    this.type = '';\n    this.status = 'inactive'; // enum: ['inactive', 'active', 'disabled', 'live']\n\n    this.filter = '';\n    this.sort = '';\n    this.canDisable = false;\n    this.handler = null;\n    this.classNames = new _mixitup.UiClassNames();\n    this.callActions('afterConstruct');\n    h.seal(this);\n  };\n\n  _mixitup.BaseStatic.call(_mixitup.Control);\n\n  _mixitup.Control.prototype = Object.create(_mixitup.Base.prototype);\n  h.extend(_mixitup.Control.prototype,\n  /** @lends mixitup.Control */\n  {\n    constructor: _mixitup.Control,\n\n    /**\r\n     * @private\r\n     * @param {HTMLElement} el\r\n     * @param {string}      type\r\n     * @param {string}      selector\r\n     */\n    init: function init(el, type, selector) {\n      var self = this;\n      this.callActions('beforeInit', arguments);\n      self.el = el;\n      self.type = type;\n      self.selector = selector;\n\n      if (self.selector) {\n        self.status = 'live';\n      } else {\n        self.canDisable = typeof self.el.disable === 'boolean';\n\n        switch (self.type) {\n          case 'filter':\n            self.filter = self.el.getAttribute('data-filter');\n            break;\n\n          case 'toggle':\n            self.filter = self.el.getAttribute('data-toggle');\n            break;\n\n          case 'sort':\n            self.sort = self.el.getAttribute('data-sort');\n            break;\n\n          case 'multimix':\n            self.filter = self.el.getAttribute('data-filter');\n            self.sort = self.el.getAttribute('data-sort');\n            break;\n        }\n      }\n\n      self.bindClick();\n\n      _mixitup.controls.push(self);\n\n      this.callActions('afterInit', arguments);\n    },\n\n    /**\r\n     * @private\r\n     * @param  {mixitup.Mixer} mixer\r\n     * @return {boolean}\r\n     */\n    isBound: function isBound(mixer) {\n      var self = this,\n          isBound = false;\n      this.callActions('beforeIsBound', arguments);\n      isBound = self.bound.indexOf(mixer) > -1;\n      return self.callFilters('afterIsBound', isBound, arguments);\n    },\n\n    /**\r\n     * @private\r\n     * @param  {mixitup.Mixer} mixer\r\n     * @return {void}\r\n     */\n    addBinding: function addBinding(mixer) {\n      var self = this;\n      this.callActions('beforeAddBinding', arguments);\n\n      if (!self.isBound()) {\n        self.bound.push(mixer);\n      }\n\n      this.callActions('afterAddBinding', arguments);\n    },\n\n    /**\r\n     * @private\r\n     * @param  {mixitup.Mixer} mixer\r\n     * @return {void}\r\n     */\n    removeBinding: function removeBinding(mixer) {\n      var self = this,\n          removeIndex = -1;\n      this.callActions('beforeRemoveBinding', arguments);\n\n      if ((removeIndex = self.bound.indexOf(mixer)) > -1) {\n        self.bound.splice(removeIndex, 1);\n      }\n\n      if (self.bound.length < 1) {\n        // No bindings exist, unbind event click handlers\n        self.unbindClick(); // Remove from `mixitup.controls` list\n\n        removeIndex = _mixitup.controls.indexOf(self);\n\n        _mixitup.controls.splice(removeIndex, 1);\n\n        if (self.status === 'active') {\n          self.renderStatus(self.el, 'inactive');\n        }\n      }\n\n      this.callActions('afterRemoveBinding', arguments);\n    },\n\n    /**\r\n     * @private\r\n     * @return {void}\r\n     */\n    bindClick: function bindClick() {\n      var self = this;\n      this.callActions('beforeBindClick', arguments);\n\n      self.handler = function (e) {\n        self.handleClick(e);\n      };\n\n      h.on(self.el, 'click', self.handler);\n      this.callActions('afterBindClick', arguments);\n    },\n\n    /**\r\n     * @private\r\n     * @return {void}\r\n     */\n    unbindClick: function unbindClick() {\n      var self = this;\n      this.callActions('beforeUnbindClick', arguments);\n      h.off(self.el, 'click', self.handler);\n      self.handler = null;\n      this.callActions('afterUnbindClick', arguments);\n    },\n\n    /**\r\n     * @private\r\n     * @param   {MouseEvent} e\r\n     * @return  {void}\r\n     */\n    handleClick: function handleClick(e) {\n      var self = this,\n          button = null,\n          mixer = null,\n          isActive = false,\n          returnValue = void 0,\n          command = {},\n          clone = null,\n          commands = [],\n          i = -1;\n      this.callActions('beforeHandleClick', arguments);\n      this.pending = 0;\n      mixer = self.bound[0];\n\n      if (!self.selector) {\n        button = self.el;\n      } else {\n        button = h.closestParent(e.target, mixer.config.selectors.control + self.selector, true, mixer.dom.document);\n      }\n\n      if (!button) {\n        self.callActions('afterHandleClick', arguments);\n        return;\n      }\n\n      switch (self.type) {\n        case 'filter':\n          command.filter = self.filter || button.getAttribute('data-filter');\n          break;\n\n        case 'sort':\n          command.sort = self.sort || button.getAttribute('data-sort');\n          break;\n\n        case 'multimix':\n          command.filter = self.filter || button.getAttribute('data-filter');\n          command.sort = self.sort || button.getAttribute('data-sort');\n          break;\n\n        case 'toggle':\n          command.filter = self.filter || button.getAttribute('data-toggle');\n\n          if (self.status === 'live') {\n            isActive = h.hasClass(button, self.classNames.active);\n          } else {\n            isActive = self.status === 'active';\n          }\n\n          break;\n      }\n\n      for (i = 0; i < self.bound.length; i++) {\n        // Create a clone of the command for each bound mixer instance\n        clone = new _mixitup.CommandMultimix();\n        h.extend(clone, command);\n        commands.push(clone);\n      }\n\n      commands = self.callFilters('commandsHandleClick', commands, arguments);\n      self.pending = self.bound.length;\n\n      for (i = 0; mixer = self.bound[i]; i++) {\n        command = commands[i];\n\n        if (!command) {\n          // An extension may set a command null to indicate that the click should not be handled\n          continue;\n        }\n\n        if (!mixer.lastClicked) {\n          mixer.lastClicked = button;\n        }\n\n        _mixitup.events.fire('mixClick', mixer.dom.container, {\n          state: mixer.state,\n          instance: mixer,\n          originalEvent: e,\n          control: mixer.lastClicked\n        }, mixer.dom.document);\n\n        if (typeof mixer.config.callbacks.onMixClick === 'function') {\n          returnValue = mixer.config.callbacks.onMixClick.call(mixer.lastClicked, mixer.state, e, mixer);\n\n          if (returnValue === false) {\n            // User has returned `false` from the callback, so do not handle click\n            continue;\n          }\n        }\n\n        if (self.type === 'toggle') {\n          isActive ? mixer.toggleOff(command.filter) : mixer.toggleOn(command.filter);\n        } else {\n          mixer.multimix(command);\n        }\n      }\n\n      this.callActions('afterHandleClick', arguments);\n    },\n\n    /**\r\n     * @param   {object}          command\r\n     * @param   {Array<string>}   toggleArray\r\n     * @return  {void}\r\n     */\n    update: function update(command, toggleArray) {\n      var self = this,\n          actions = new _mixitup.CommandMultimix();\n      self.callActions('beforeUpdate', arguments);\n      self.pending--;\n      self.pending = Math.max(0, self.pending);\n      if (self.pending > 0) return;\n\n      if (self.status === 'live') {\n        // Live control (status unknown)\n        self.updateLive(command, toggleArray);\n      } else {\n        // Static control\n        actions.sort = self.sort;\n        actions.filter = self.filter;\n        self.callFilters('actionsUpdate', actions, arguments);\n        self.parseStatusChange(self.el, command, actions, toggleArray);\n      }\n\n      self.callActions('afterUpdate', arguments);\n    },\n\n    /**\r\n     * @param   {mixitup.CommandMultimix} command\r\n     * @param   {Array<string>}           toggleArray\r\n     * @return  {void}\r\n     */\n    updateLive: function updateLive(command, toggleArray) {\n      var self = this,\n          controlButtons = null,\n          actions = null,\n          button = null,\n          i = -1;\n      self.callActions('beforeUpdateLive', arguments);\n      if (!self.el) return;\n      controlButtons = self.el.querySelectorAll(self.selector);\n\n      for (i = 0; button = controlButtons[i]; i++) {\n        actions = new _mixitup.CommandMultimix();\n\n        switch (self.type) {\n          case 'filter':\n            actions.filter = button.getAttribute('data-filter');\n            break;\n\n          case 'sort':\n            actions.sort = button.getAttribute('data-sort');\n            break;\n\n          case 'multimix':\n            actions.filter = button.getAttribute('data-filter');\n            actions.sort = button.getAttribute('data-sort');\n            break;\n\n          case 'toggle':\n            actions.filter = button.getAttribute('data-toggle');\n            break;\n        }\n\n        actions = self.callFilters('actionsUpdateLive', actions, arguments);\n        self.parseStatusChange(button, command, actions, toggleArray);\n      }\n\n      self.callActions('afterUpdateLive', arguments);\n    },\n\n    /**\r\n     * @param   {HTMLElement}             button\r\n     * @param   {mixitup.CommandMultimix} command\r\n     * @param   {mixitup.CommandMultimix} actions\r\n     * @param   {Array<string>}           toggleArray\r\n     * @return  {void}\r\n     */\n    parseStatusChange: function parseStatusChange(button, command, actions, toggleArray) {\n      var self = this,\n          alias = '',\n          toggle = '',\n          i = -1;\n      self.callActions('beforeParseStatusChange', arguments);\n\n      switch (self.type) {\n        case 'filter':\n          if (command.filter === actions.filter) {\n            self.renderStatus(button, 'active');\n          } else {\n            self.renderStatus(button, 'inactive');\n          }\n\n          break;\n\n        case 'multimix':\n          if (command.sort === actions.sort && command.filter === actions.filter) {\n            self.renderStatus(button, 'active');\n          } else {\n            self.renderStatus(button, 'inactive');\n          }\n\n          break;\n\n        case 'sort':\n          if (command.sort.match(/:asc/g)) {\n            alias = command.sort.replace(/:asc/g, '');\n          }\n\n          if (command.sort === actions.sort || alias === actions.sort) {\n            self.renderStatus(button, 'active');\n          } else {\n            self.renderStatus(button, 'inactive');\n          }\n\n          break;\n\n        case 'toggle':\n          if (toggleArray.length < 1) self.renderStatus(button, 'inactive');\n\n          if (command.filter === actions.filter) {\n            self.renderStatus(button, 'active');\n          }\n\n          for (i = 0; i < toggleArray.length; i++) {\n            toggle = toggleArray[i];\n\n            if (toggle === actions.filter) {\n              // Button matches one active toggle\n              self.renderStatus(button, 'active');\n              break;\n            }\n\n            self.renderStatus(button, 'inactive');\n          }\n\n          break;\n      }\n\n      self.callActions('afterParseStatusChange', arguments);\n    },\n\n    /**\r\n     * @param   {HTMLElement}   button\r\n     * @param   {string}        status\r\n     * @return  {void}\r\n     */\n    renderStatus: function renderStatus(button, status) {\n      var self = this;\n      self.callActions('beforeRenderStatus', arguments);\n\n      switch (status) {\n        case 'active':\n          h.addClass(button, self.classNames.active);\n          h.removeClass(button, self.classNames.disabled);\n          if (self.canDisable) self.el.disabled = false;\n          break;\n\n        case 'inactive':\n          h.removeClass(button, self.classNames.active);\n          h.removeClass(button, self.classNames.disabled);\n          if (self.canDisable) self.el.disabled = false;\n          break;\n\n        case 'disabled':\n          if (self.canDisable) self.el.disabled = true;\n          h.addClass(button, self.classNames.disabled);\n          h.removeClass(button, self.classNames.active);\n          break;\n      }\n\n      if (self.status !== 'live') {\n        // Update the control's status propery if not live\n        self.status = status;\n      }\n\n      self.callActions('afterRenderStatus', arguments);\n    }\n  });\n  _mixitup.controls = [];\n  /**\r\n   * @constructor\r\n   * @memberof    mixitup\r\n   * @private\r\n   * @since       3.0.0\r\n   */\n\n  _mixitup.StyleData = function () {\n    _mixitup.Base.call(this);\n\n    this.callActions('beforeConstruct');\n    this.x = 0;\n    this.y = 0;\n    this.top = 0;\n    this.right = 0;\n    this.bottom = 0;\n    this.left = 0;\n    this.width = 0;\n    this.height = 0;\n    this.marginRight = 0;\n    this.marginBottom = 0;\n    this.opacity = 0;\n    this.scale = new _mixitup.TransformData();\n    this.translateX = new _mixitup.TransformData();\n    this.translateY = new _mixitup.TransformData();\n    this.translateZ = new _mixitup.TransformData();\n    this.rotateX = new _mixitup.TransformData();\n    this.rotateY = new _mixitup.TransformData();\n    this.rotateZ = new _mixitup.TransformData();\n    this.callActions('afterConstruct');\n    h.seal(this);\n  };\n\n  _mixitup.BaseStatic.call(_mixitup.StyleData);\n\n  _mixitup.StyleData.prototype = Object.create(_mixitup.Base.prototype);\n  _mixitup.StyleData.prototype.constructor = _mixitup.StyleData;\n  /**\r\n   * @constructor\r\n   * @memberof    mixitup\r\n   * @private\r\n   * @since       3.0.0\r\n   */\n\n  _mixitup.TransformData = function () {\n    _mixitup.Base.call(this);\n\n    this.callActions('beforeConstruct');\n    this.value = 0;\n    this.unit = '';\n    this.callActions('afterConstruct');\n    h.seal(this);\n  };\n\n  _mixitup.BaseStatic.call(_mixitup.TransformData);\n\n  _mixitup.TransformData.prototype = Object.create(_mixitup.Base.prototype);\n  _mixitup.TransformData.prototype.constructor = _mixitup.TransformData;\n  /**\r\n   * @constructor\r\n   * @memberof    mixitup\r\n   * @private\r\n   * @since       3.0.0\r\n   */\n\n  _mixitup.TransformDefaults = function () {\n    _mixitup.StyleData.apply(this);\n\n    this.callActions('beforeConstruct');\n    this.scale.value = 0.01;\n    this.scale.unit = '';\n    this.translateX.value = 20;\n    this.translateX.unit = 'px';\n    this.translateY.value = 20;\n    this.translateY.unit = 'px';\n    this.translateZ.value = 20;\n    this.translateZ.unit = 'px';\n    this.rotateX.value = 90;\n    this.rotateX.unit = 'deg';\n    this.rotateY.value = 90;\n    this.rotateY.unit = 'deg';\n    this.rotateX.value = 90;\n    this.rotateX.unit = 'deg';\n    this.rotateZ.value = 180;\n    this.rotateZ.unit = 'deg';\n    this.callActions('afterConstruct');\n    h.seal(this);\n  };\n\n  _mixitup.BaseStatic.call(_mixitup.TransformDefaults);\n\n  _mixitup.TransformDefaults.prototype = Object.create(_mixitup.StyleData.prototype);\n  _mixitup.TransformDefaults.prototype.constructor = _mixitup.TransformDefaults;\n  /**\r\n   * @private\r\n   * @static\r\n   * @since   3.0.0\r\n   * @type    {mixitup.TransformDefaults}\r\n   */\n\n  _mixitup.transformDefaults = new _mixitup.TransformDefaults();\n  /**\r\n   * @constructor\r\n   * @memberof    mixitup\r\n   * @private\r\n   * @since       3.0.0\r\n   */\n\n  _mixitup.EventDetail = function () {\n    this.state = null;\n    this.futureState = null;\n    this.instance = null;\n    this.originalEvent = null;\n  };\n  /**\r\n   * The `mixitup.Events` class contains all custom events dispatched by MixItUp at various\r\n   * points within the lifecycle of a mixer operation.\r\n   *\r\n   * Each event is analogous to the callback function of the same name defined in\r\n   * the `callbacks` configuration object, and is triggered immediately before it.\r\n   *\r\n   * Events are always triggered from the container element on which MixItUp is instantiated\r\n   * upon.\r\n   *\r\n   * As with any event, registered event handlers receive the event object as a parameter\r\n   * which includes a `detail` property containting references to the current `state`,\r\n   * the `mixer` instance, and other event-specific properties described below.\r\n   *\r\n   * @constructor\r\n   * @namespace\r\n   * @memberof    mixitup\r\n   * @public\r\n   * @since       3.0.0\r\n   */\n\n\n  _mixitup.Events = function () {\n    _mixitup.Base.call(this);\n\n    this.callActions('beforeConstruct');\n    /**\r\n     * A custom event triggered immediately after any MixItUp operation is requested\r\n     * and before animations have begun.\r\n     *\r\n     * The `mixStart` event also exposes a `futureState` property via the\r\n     * `event.detail` object, which represents the final state of the mixer once\r\n     * the requested operation has completed.\r\n     *\r\n     * @name        mixStart\r\n     * @memberof    mixitup.Events\r\n     * @static\r\n     * @type        {CustomEvent}\r\n     */\n\n    this.mixStart = null;\n    /**\r\n     * A custom event triggered when a MixItUp operation is requested while another\r\n     * operation is in progress, and the animation queue is full, or queueing\r\n     * is disabled.\r\n     *\r\n     * @name        mixBusy\r\n     * @memberof    mixitup.Events\r\n     * @static\r\n     * @type        {CustomEvent}\r\n     */\n\n    this.mixBusy = null;\n    /**\r\n     * A custom event triggered after any MixItUp operation has completed, and the\r\n     * state has been updated.\r\n     *\r\n     * @name        mixEnd\r\n     * @memberof    mixitup.Events\r\n     * @static\r\n     * @type        {CustomEvent}\r\n     */\n\n    this.mixEnd = null;\n    /**\r\n     * A custom event triggered whenever a filter operation \"fails\", i.e. no targets\r\n     * could be found matching the requested filter.\r\n     *\r\n     * @name        mixFail\r\n     * @memberof    mixitup.Events\r\n     * @static\r\n     * @type        {CustomEvent}\r\n     */\n\n    this.mixFail = null;\n    /**\r\n     * A custom event triggered whenever a MixItUp control is clicked, and before its\r\n     * respective operation is requested.\r\n     *\r\n     * This event also exposes an `originalEvent` property via the `event.detail`\r\n     * object, which holds a reference to the original click event.\r\n     *\r\n     * @name        mixClick\r\n     * @memberof    mixitup.Events\r\n     * @static\r\n     * @type        {CustomEvent}\r\n     */\n\n    this.mixClick = null;\n    this.callActions('afterConstruct');\n    h.seal(this);\n  };\n\n  _mixitup.BaseStatic.call(_mixitup.Events);\n\n  _mixitup.Events.prototype = Object.create(_mixitup.Base.prototype);\n  _mixitup.Events.prototype.constructor = _mixitup.Events;\n  /**\r\n   * @private\r\n   * @param   {string}      eventType\r\n   * @param   {Element}     el\r\n   * @param   {object}      detail\r\n   * @param   {Document}    [doc]\r\n   */\n\n  _mixitup.Events.prototype.fire = function (eventType, el, detail, doc) {\n    var self = this,\n        event = null,\n        eventDetail = new _mixitup.EventDetail();\n    self.callActions('beforeFire', arguments);\n\n    if (typeof self[eventType] === 'undefined') {\n      throw new Error('Event type \"' + eventType + '\" not found.');\n    }\n\n    eventDetail.state = new _mixitup.State();\n    h.extend(eventDetail.state, detail.state);\n\n    if (detail.futureState) {\n      eventDetail.futureState = new _mixitup.State();\n      h.extend(eventDetail.futureState, detail.futureState);\n    }\n\n    eventDetail.instance = detail.instance;\n\n    if (detail.originalEvent) {\n      eventDetail.originalEvent = detail.originalEvent;\n    }\n\n    event = h.getCustomEvent(eventType, eventDetail, doc);\n    self.callFilters('eventFire', event, arguments);\n    el.dispatchEvent(event);\n  }; // Asign a singleton instance to `mixitup.events`:\n\n\n  _mixitup.events = new _mixitup.Events();\n  /**\r\n   * @constructor\r\n   * @memberof    mixitup\r\n   * @private\r\n   * @since       3.0.0\r\n   */\n\n  _mixitup.QueueItem = function () {\n    _mixitup.Base.call(this);\n\n    this.callActions('beforeConstruct');\n    this.args = [];\n    this.instruction = null;\n    this.triggerElement = null;\n    this.deferred = null;\n    this.isToggling = false;\n    this.callActions('afterConstruct');\n    h.seal(this);\n  };\n\n  _mixitup.BaseStatic.call(_mixitup.QueueItem);\n\n  _mixitup.QueueItem.prototype = Object.create(_mixitup.Base.prototype);\n  _mixitup.QueueItem.prototype.constructor = _mixitup.QueueItem;\n  /**\r\n   * The `mixitup.Mixer` class is used to hold discreet, user-configured\r\n   * instances of MixItUp on a provided container element.\r\n   *\r\n   * Mixer instances are returned whenever the `mixitup()` factory function is called,\r\n   * which expose a range of methods enabling API-based filtering, sorting,\r\n   * insertion, removal and more.\r\n   *\r\n   * @constructor\r\n   * @namespace\r\n   * @memberof    mixitup\r\n   * @public\r\n   * @since       3.0.0\r\n   */\n\n  _mixitup.Mixer = function () {\n    _mixitup.Base.call(this);\n\n    this.callActions('beforeConstruct');\n    this.config = new _mixitup.Config();\n    this.id = '';\n    this.isBusy = false;\n    this.isToggling = false;\n    this.incPadding = true;\n    this.controls = [];\n    this.targets = [];\n    this.origOrder = [];\n    this.cache = {};\n    this.toggleArray = [];\n    this.targetsMoved = 0;\n    this.targetsImmovable = 0;\n    this.targetsBound = 0;\n    this.targetsDone = 0;\n    this.staggerDuration = 0;\n    this.effectsIn = null;\n    this.effectsOut = null;\n    this.transformIn = [];\n    this.transformOut = [];\n    this.queue = [];\n    this.state = null;\n    this.lastOperation = null;\n    this.lastClicked = null;\n    this.userCallback = null;\n    this.userDeferred = null;\n    this.dom = new _mixitup.MixerDom();\n    this.callActions('afterConstruct');\n    h.seal(this);\n  };\n\n  _mixitup.BaseStatic.call(_mixitup.Mixer);\n\n  _mixitup.Mixer.prototype = Object.create(_mixitup.Base.prototype);\n  h.extend(_mixitup.Mixer.prototype,\n  /** @lends mixitup.Mixer */\n  {\n    constructor: _mixitup.Mixer,\n\n    /**\r\n     * @private\r\n     * @instance\r\n     * @since 3.0.0\r\n     * @param {HTMLElement} container\r\n     * @param {HTMLElement} document\r\n     * @param {string}      id\r\n     * @param {object}      [config]\r\n     */\n    attach: function attach(container, document, id, config) {\n      var self = this,\n          target = null,\n          i = -1;\n      self.callActions('beforeAttach', arguments);\n      self.id = id;\n\n      if (config) {\n        h.extend(self.config, config, true, true);\n      }\n\n      self.sanitizeConfig();\n      self.cacheDom(container, document);\n\n      if (self.config.layout.containerClassName) {\n        h.addClass(self.dom.container, self.config.layout.containerClassName);\n      }\n\n      if (!_mixitup.features.has.transitions) {\n        self.config.animation.enable = false;\n      }\n\n      if (typeof window.console === 'undefined') {\n        self.config.debug.showWarnings = false;\n      }\n\n      if (self.config.data.uidKey) {\n        // If the dataset API is in use, force disable controls\n        self.config.controls.enable = false;\n      }\n\n      self.indexTargets();\n      self.state = self.getInitialState();\n\n      for (i = 0; target = self.lastOperation.toHide[i]; i++) {\n        target.hide();\n      }\n\n      if (self.config.controls.enable) {\n        self.initControls();\n        self.buildToggleArray(null, self.state);\n        self.updateControls({\n          filter: self.state.activeFilter,\n          sort: self.state.activeSort\n        });\n      }\n\n      self.parseEffects();\n      self.callActions('afterAttach', arguments);\n    },\n\n    /**\r\n     * @private\r\n     * @instance\r\n     * @since 3.0.0\r\n     * @return {void}\r\n     */\n    sanitizeConfig: function sanitizeConfig() {\n      var self = this;\n      self.callActions('beforeSanitizeConfig', arguments); // Sanitize enum/string config options\n\n      self.config.controls.scope = self.config.controls.scope.toLowerCase().trim();\n      self.config.controls.toggleLogic = self.config.controls.toggleLogic.toLowerCase().trim();\n      self.config.controls.toggleDefault = self.config.controls.toggleDefault.toLowerCase().trim();\n      self.config.animation.effects = self.config.animation.effects.trim();\n      self.callActions('afterSanitizeConfig', arguments);\n    },\n\n    /**\r\n     * @private\r\n     * @instance\r\n     * @since   3.0.0\r\n     * @return  {mixitup.State}\r\n     */\n    getInitialState: function getInitialState() {\n      var self = this,\n          state = new _mixitup.State(),\n          operation = new _mixitup.Operation();\n      self.callActions('beforeGetInitialState', arguments); // Map initial values into a mock state object in order to construct an operation\n\n      state.activeContainerClassName = self.config.layout.containerClassName;\n\n      if (self.config.load.dataset) {\n        // Dataset API\n        if (!self.config.data.uidKey || typeof self.config.data.uidKey !== 'string') {\n          throw new TypeError(_mixitup.messages.errorConfigDataUidKeyNotSet());\n        }\n\n        operation.startDataset = operation.newDataset = state.activeDataset = self.config.load.dataset.slice();\n        operation.startContainerClassName = operation.newContainerClassName = state.activeContainerClassName;\n        operation.show = self.targets.slice();\n        state = self.callFilters('stateGetInitialState', state, arguments);\n      } else {\n        // DOM API\n        state.activeFilter = self.parseFilterArgs([self.config.load.filter]).command;\n        state.activeSort = self.parseSortArgs([self.config.load.sort]).command;\n        state.totalTargets = self.targets.length;\n        state = self.callFilters('stateGetInitialState', state, arguments);\n\n        if (state.activeSort.collection || state.activeSort.attribute || state.activeSort.order === 'random' || state.activeSort.order === 'desc') {\n          // Sorting on load\n          operation.newSort = state.activeSort;\n          self.sortOperation(operation);\n          self.printSort(false, operation);\n          self.targets = operation.newOrder;\n        } else {\n          operation.startOrder = operation.newOrder = self.targets;\n        }\n\n        operation.startFilter = operation.newFilter = state.activeFilter;\n        operation.startSort = operation.newSort = state.activeSort;\n        operation.startContainerClassName = operation.newContainerClassName = state.activeContainerClassName;\n\n        if (operation.newFilter.selector === 'all') {\n          operation.newFilter.selector = self.config.selectors.target;\n        } else if (operation.newFilter.selector === 'none') {\n          operation.newFilter.selector = '';\n        }\n      }\n\n      operation = self.callFilters('operationGetInitialState', operation, [state]);\n      self.lastOperation = operation;\n\n      if (operation.newFilter) {\n        self.filterOperation(operation);\n      }\n\n      state = self.buildState(operation);\n      return state;\n    },\n\n    /**\r\n     * Caches references of DOM elements neccessary for the mixer's functionality.\r\n     *\r\n     * @private\r\n     * @instance\r\n     * @since   3.0.0\r\n     * @param   {HTMLElement}       el\r\n     * @param   {HTMLHtmlElement}   document\r\n     * @return  {void}\r\n     */\n    cacheDom: function cacheDom(el, document) {\n      var self = this;\n      self.callActions('beforeCacheDom', arguments);\n      self.dom.document = document;\n      self.dom.body = self.dom.document.querySelector('body');\n      self.dom.container = el;\n      self.dom.parent = el;\n      self.callActions('afterCacheDom', arguments);\n    },\n\n    /**\r\n     * Indexes all child elements of the mixer matching the `selectors.target`\r\n     * selector, instantiating a mixitup.Target for each one.\r\n     *\r\n     * @private\r\n     * @instance\r\n     * @since   3.0.0\r\n     * @return  {void}\r\n     */\n    indexTargets: function indexTargets() {\n      var self = this,\n          target = null,\n          el = null,\n          dataset = null,\n          i = -1;\n      self.callActions('beforeIndexTargets', arguments);\n      self.dom.targets = self.config.layout.allowNestedTargets ? self.dom.container.querySelectorAll(self.config.selectors.target) : h.children(self.dom.container, self.config.selectors.target, self.dom.document);\n      self.dom.targets = h.arrayFromList(self.dom.targets);\n      self.targets = [];\n\n      if ((dataset = self.config.load.dataset) && dataset.length !== self.dom.targets.length) {\n        throw new Error(_mixitup.messages.errorDatasetPrerenderedMismatch());\n      }\n\n      if (self.dom.targets.length) {\n        for (i = 0; el = self.dom.targets[i]; i++) {\n          target = new _mixitup.Target();\n          target.init(el, self, dataset ? dataset[i] : void 0);\n          target.isInDom = true;\n          self.targets.push(target);\n        }\n\n        self.dom.parent = self.dom.targets[0].parentElement === self.dom.container ? self.dom.container : self.dom.targets[0].parentElement;\n      }\n\n      self.origOrder = self.targets;\n      self.callActions('afterIndexTargets', arguments);\n    },\n    initControls: function initControls() {\n      var self = this,\n          definition = '',\n          controlElements = null,\n          el = null,\n          parent = null,\n          delagators = null,\n          control = null,\n          i = -1,\n          j = -1;\n      self.callActions('beforeInitControls', arguments);\n\n      switch (self.config.controls.scope) {\n        case 'local':\n          parent = self.dom.container;\n          break;\n\n        case 'global':\n          parent = self.dom.document;\n          break;\n\n        default:\n          throw new Error(_mixitup.messages.errorConfigInvalidControlsScope());\n      }\n\n      for (i = 0; definition = _mixitup.controlDefinitions[i]; i++) {\n        if (self.config.controls.live || definition.live) {\n          if (definition.parent) {\n            delagators = self.dom[definition.parent];\n            if (!delagators || delagators.length < 0) continue;\n\n            if (typeof delagators.length !== 'number') {\n              delagators = [delagators];\n            }\n          } else {\n            delagators = [parent];\n          }\n\n          for (j = 0; el = delagators[j]; j++) {\n            control = self.getControl(el, definition.type, definition.selector);\n            self.controls.push(control);\n          }\n        } else {\n          controlElements = parent.querySelectorAll(self.config.selectors.control + definition.selector);\n\n          for (j = 0; el = controlElements[j]; j++) {\n            control = self.getControl(el, definition.type, '');\n            if (!control) continue;\n            self.controls.push(control);\n          }\n        }\n      }\n\n      self.callActions('afterInitControls', arguments);\n    },\n\n    /**\r\n     * @private\r\n     * @instance\r\n     * @since   3.0.0\r\n     * @param   {HTMLElement} el\r\n     * @param   {string}      type\r\n     * @param   {string}      selector\r\n     * @return  {mixitup.Control|null}\r\n     */\n    getControl: function getControl(el, type, selector) {\n      var self = this,\n          control = null,\n          i = -1;\n      self.callActions('beforeGetControl', arguments);\n\n      if (!selector) {\n        // Static controls only\n        for (i = 0; control = _mixitup.controls[i]; i++) {\n          if (control.el === el && control.isBound(self)) {\n            // Control already bound to this mixer (as another type).\n            // NB: This prevents duplicate controls from being registered where a selector\n            // might collide, eg: \"[data-filter]\" and \"[data-filter][data-sort]\"\n            return self.callFilters('controlGetControl', null, arguments);\n          } else if (control.el === el && control.type === type && control.selector === selector) {\n            // Another mixer is already using this control, add this mixer as a binding\n            control.addBinding(self);\n            return self.callFilters('controlGetControl', control, arguments);\n          }\n        }\n      } // Create new control\n\n\n      control = new _mixitup.Control();\n      control.init(el, type, selector);\n      control.classNames.base = h.getClassname(self.config.classNames, type);\n      control.classNames.active = h.getClassname(self.config.classNames, type, self.config.classNames.modifierActive);\n      control.classNames.disabled = h.getClassname(self.config.classNames, type, self.config.classNames.modifierDisabled); // Add a reference to this mixer as a binding\n\n      control.addBinding(self);\n      return self.callFilters('controlGetControl', control, arguments);\n    },\n\n    /**\r\n     * Creates a compound selector by joining the `toggleArray` value as per the\r\n     * defined toggle logic.\r\n     *\r\n     * @private\r\n     * @instance\r\n     * @since   3.0.0\r\n     * @return  {string}\r\n     */\n    getToggleSelector: function getToggleSelector() {\n      var self = this,\n          delineator = self.config.controls.toggleLogic === 'or' ? ', ' : '',\n          toggleSelector = '';\n      self.callActions('beforeGetToggleSelector', arguments);\n      self.toggleArray = h.clean(self.toggleArray);\n      toggleSelector = self.toggleArray.join(delineator);\n\n      if (toggleSelector === '') {\n        toggleSelector = self.config.controls.toggleDefault;\n      }\n\n      return self.callFilters('selectorGetToggleSelector', toggleSelector, arguments);\n    },\n\n    /**\r\n     * Breaks compound selector strings in an array of discreet selectors,\r\n     * as per the active `controls.toggleLogic` configuration option. Accepts\r\n     * either a dynamic command object, or a state object.\r\n     *\r\n     * @private\r\n     * @instance\r\n     * @since   2.0.0\r\n     * @param   {object}        [command]\r\n     * @param   {mixitup.State} [state]\r\n     * @return  {void}\r\n     */\n    buildToggleArray: function buildToggleArray(command, state) {\n      var self = this,\n          activeFilterSelector = '';\n      self.callActions('beforeBuildToggleArray', arguments);\n\n      if (command && command.filter) {\n        activeFilterSelector = command.filter.selector.replace(/\\s/g, '');\n      } else if (state) {\n        activeFilterSelector = state.activeFilter.selector.replace(/\\s/g, '');\n      } else {\n        return;\n      }\n\n      if (activeFilterSelector === self.config.selectors.target || activeFilterSelector === 'all') {\n        activeFilterSelector = '';\n      }\n\n      if (self.config.controls.toggleLogic === 'or') {\n        self.toggleArray = activeFilterSelector.split(',');\n      } else {\n        self.toggleArray = self.splitCompoundSelector(activeFilterSelector);\n      }\n\n      self.toggleArray = h.clean(self.toggleArray);\n      self.callActions('afterBuildToggleArray', arguments);\n    },\n\n    /**\r\n     * Takes a compound selector (e.g. `.cat-1.cat-2`, `[data-cat=\"1\"][data-cat=\"2\"]`)\r\n     * and breaks into its individual selectors.\r\n     *\r\n     * @private\r\n     * @instance\r\n     * @since   3.0.0\r\n     * @param   {string} compoundSelector\r\n     * @return  {string[]}\r\n     */\n    splitCompoundSelector: function splitCompoundSelector(compoundSelector) {\n      // Break at a `.` or `[`, capturing the delineator\n      var partials = compoundSelector.split(/([\\.\\[])/g),\n          toggleArray = [],\n          selector = '',\n          i = -1;\n\n      if (partials[0] === '') {\n        partials.shift();\n      }\n\n      for (i = 0; i < partials.length; i++) {\n        if (i % 2 === 0) {\n          selector = '';\n        }\n\n        selector += partials[i];\n\n        if (i % 2 !== 0) {\n          toggleArray.push(selector);\n        }\n      }\n\n      return toggleArray;\n    },\n\n    /**\r\n     * Updates controls to their active/inactive state based on the command or\r\n     * current state of the mixer.\r\n     *\r\n     * @private\r\n     * @instance\r\n     * @since   2.0.0\r\n     * @param   {object} command\r\n     * @return  {void}\r\n     */\n    updateControls: function updateControls(command) {\n      var self = this,\n          control = null,\n          output = new _mixitup.CommandMultimix(),\n          i = -1;\n      self.callActions('beforeUpdateControls', arguments); // Sanitise to defaults\n\n      if (command.filter) {\n        output.filter = command.filter.selector;\n      } else {\n        output.filter = self.state.activeFilter.selector;\n      }\n\n      if (command.sort) {\n        output.sort = self.buildSortString(command.sort);\n      } else {\n        output.sort = self.buildSortString(self.state.activeSort);\n      }\n\n      if (output.filter === self.config.selectors.target) {\n        output.filter = 'all';\n      }\n\n      if (output.filter === '') {\n        output.filter = 'none';\n      }\n\n      h.freeze(output);\n\n      for (i = 0; control = self.controls[i]; i++) {\n        control.update(output, self.toggleArray);\n      }\n\n      self.callActions('afterUpdateControls', arguments);\n    },\n\n    /**\r\n     * @private\r\n     * @instance\r\n     * @since   3.0.0\r\n     * @param   {mixitup.CommandSort}   command\r\n     * @return  {string}\r\n     */\n    buildSortString: function buildSortString(command) {\n      var self = this;\n      var output = '';\n      output += command.sortString;\n\n      if (command.next) {\n        output += ' ' + self.buildSortString(command.next);\n      }\n\n      return output;\n    },\n\n    /**\r\n     * @private\r\n     * @instance\r\n     * @since   3.0.0\r\n     * @param   {object}        command\r\n     * @param   {Operation}     operation\r\n     * @return  {Promise.<mixitup.State>}\r\n     */\n    insertTargets: function insertTargets(command, operation) {\n      var self = this,\n          nextSibling = null,\n          insertionIndex = -1,\n          frag = null,\n          target = null,\n          el = null,\n          i = -1;\n      self.callActions('beforeInsertTargets', arguments);\n      if (typeof command.index === 'undefined') command.index = 0;\n      nextSibling = self.getNextSibling(command.index, command.sibling, command.position);\n      frag = self.dom.document.createDocumentFragment();\n\n      if (nextSibling) {\n        insertionIndex = h.index(nextSibling, self.config.selectors.target);\n      } else {\n        insertionIndex = self.targets.length;\n      }\n\n      if (command.collection) {\n        for (i = 0; el = command.collection[i]; i++) {\n          if (self.dom.targets.indexOf(el) > -1) {\n            throw new Error(_mixitup.messages.errorInsertPreexistingElement());\n          } // Ensure elements are hidden when they are added to the DOM, so they can\n          // be animated in gracefully\n\n\n          el.style.display = 'none';\n          frag.appendChild(el);\n          frag.appendChild(self.dom.document.createTextNode(' '));\n          if (!h.isElement(el, self.dom.document) || !el.matches(self.config.selectors.target)) continue;\n          target = new _mixitup.Target();\n          target.init(el, self);\n          target.isInDom = true;\n          self.targets.splice(insertionIndex, 0, target);\n          insertionIndex++;\n        }\n\n        self.dom.parent.insertBefore(frag, nextSibling);\n      } // Since targets have been added, the original order must be updated\n\n\n      operation.startOrder = self.origOrder = self.targets;\n      self.callActions('afterInsertTargets', arguments);\n    },\n\n    /**\r\n     * @private\r\n     * @instance\r\n     * @since   3.0.0\r\n     * @param   {Number}      [index]\r\n     * @param   {Element}     [sibling]\r\n     * @param   {string}      [position]\r\n     * @return  {Element}\r\n     */\n    getNextSibling: function getNextSibling(index, sibling, position) {\n      var self = this,\n          element = null;\n      index = Math.max(index, 0);\n\n      if (sibling && position === 'before') {\n        // Explicit sibling\n        element = sibling;\n      } else if (sibling && position === 'after') {\n        // Explicit sibling\n        element = sibling.nextElementSibling || null;\n      } else if (self.targets.length > 0 && typeof index !== 'undefined') {\n        // Index and targets exist\n        element = index < self.targets.length || !self.targets.length ? self.targets[index].dom.el : self.targets[self.targets.length - 1].dom.el.nextElementSibling;\n      } else if (self.targets.length === 0 && self.dom.parent.children.length > 0) {\n        // No targets but other siblings\n        if (self.config.layout.siblingAfter) {\n          element = self.config.layout.siblingAfter;\n        } else if (self.config.layout.siblingBefore) {\n          element = self.config.layout.siblingBefore.nextElementSibling;\n        } else {\n          self.dom.parent.children[0];\n        }\n      } else {\n        element === null;\n      }\n\n      return self.callFilters('elementGetNextSibling', element, arguments);\n    },\n\n    /**\r\n     * @private\r\n     * @instance\r\n     * @since   2.0.0\r\n     * @param   {Operation}     operation\r\n     * @return  {void}\r\n     */\n    filterOperation: function filterOperation(operation) {\n      var self = this,\n          testResult = false,\n          index = -1,\n          action = '',\n          target = null,\n          i = -1;\n      self.callActions('beforeFilterOperation', arguments);\n      action = operation.newFilter.action;\n\n      for (i = 0; target = operation.newOrder[i]; i++) {\n        if (operation.newFilter.collection) {\n          // show via collection\n          testResult = operation.newFilter.collection.indexOf(target.dom.el) > -1;\n        } else {\n          // show via selector\n          if (operation.newFilter.selector === '') {\n            testResult = false;\n          } else {\n            testResult = target.dom.el.matches(operation.newFilter.selector);\n          }\n        }\n\n        self.evaluateHideShow(testResult, target, action, operation);\n      }\n\n      if (operation.toRemove.length) {\n        for (i = 0; target = operation.show[i]; i++) {\n          if (operation.toRemove.indexOf(target) > -1) {\n            // If any shown targets should be removed, move them into the toHide array\n            operation.show.splice(i, 1);\n\n            if ((index = operation.toShow.indexOf(target)) > -1) {\n              operation.toShow.splice(index, 1);\n            }\n\n            operation.toHide.push(target);\n            operation.hide.push(target);\n            i--;\n          }\n        }\n      }\n\n      operation.matching = operation.show.slice();\n\n      if (operation.show.length === 0 && operation.newFilter.selector !== '' && self.targets.length !== 0) {\n        operation.hasFailed = true;\n      }\n\n      self.callActions('afterFilterOperation', arguments);\n    },\n\n    /**\r\n     * @private\r\n     * @instance\r\n     * @since   3.0.0\r\n     * @param   {boolean}   testResult\r\n     * @param   {Element}   target\r\n     * @param   {string}    action\r\n     * @param   {Operation} operation\r\n     * @return  {void}\r\n     */\n    evaluateHideShow: function evaluateHideShow(testResult, target, action, operation) {\n      var self = this,\n          filteredTestResult = false,\n          args = Array.prototype.slice.call(arguments, 1);\n      filteredTestResult = self.callFilters('testResultEvaluateHideShow', testResult, args);\n      self.callActions('beforeEvaluateHideShow', arguments);\n\n      if (filteredTestResult === true && action === 'show' || filteredTestResult === false && action === 'hide') {\n        operation.show.push(target);\n        !target.isShown && operation.toShow.push(target);\n      } else {\n        operation.hide.push(target);\n        target.isShown && operation.toHide.push(target);\n      }\n\n      self.callActions('afterEvaluateHideShow', arguments);\n    },\n\n    /**\r\n     * @private\r\n     * @instance\r\n     * @since   2.0.0\r\n     * @param   {Operation}     operation\r\n     * @return  {void}\r\n     */\n    sortOperation: function sortOperation(operation) {\n      var self = this,\n          newOrder = [],\n          target = null,\n          el = null,\n          i = -1;\n      self.callActions('beforeSortOperation', arguments);\n      operation.startOrder = self.targets;\n\n      if (operation.newSort.collection) {\n        // Sort by collection\n        newOrder = [];\n\n        for (i = 0; el = operation.newSort.collection[i]; i++) {\n          if (self.dom.targets.indexOf(el) < 0) {\n            throw new Error(_mixitup.messages.errorSortNonExistentElement());\n          }\n\n          target = new _mixitup.Target();\n          target.init(el, self);\n          target.isInDom = true;\n          newOrder.push(target);\n        }\n\n        operation.newOrder = newOrder;\n      } else if (operation.newSort.order === 'random') {\n        // Sort random\n        operation.newOrder = h.arrayShuffle(operation.startOrder);\n      } else if (operation.newSort.attribute === '') {\n        // Sort by default\n        operation.newOrder = self.origOrder.slice();\n\n        if (operation.newSort.order === 'desc') {\n          operation.newOrder.reverse();\n        }\n      } else {\n        // Sort by attribute\n        operation.newOrder = operation.startOrder.slice();\n        operation.newOrder.sort(function (a, b) {\n          return self.compare(a, b, operation.newSort);\n        });\n      }\n\n      if (h.isEqualArray(operation.newOrder, operation.startOrder)) {\n        operation.willSort = false;\n      }\n\n      self.callActions('afterSortOperation', arguments);\n    },\n\n    /**\r\n     * @private\r\n     * @instance\r\n     * @since   2.0.0\r\n     * @param   {mixitup.Target}        a\r\n     * @param   {mixitup.Target}        b\r\n     * @param   {mixitup.CommandSort}   command\r\n     * @return  {Number}\r\n     */\n    compare: function compare(a, b, command) {\n      var self = this,\n          order = command.order,\n          attrA = self.getAttributeValue(a, command.attribute),\n          attrB = self.getAttributeValue(b, command.attribute);\n\n      if (isNaN(attrA * 1) || isNaN(attrB * 1)) {\n        attrA = attrA.toLowerCase();\n        attrB = attrB.toLowerCase();\n      } else {\n        attrA = attrA * 1;\n        attrB = attrB * 1;\n      }\n\n      if (attrA < attrB) {\n        return order === 'asc' ? -1 : 1;\n      }\n\n      if (attrA > attrB) {\n        return order === 'asc' ? 1 : -1;\n      }\n\n      if (attrA === attrB && command.next) {\n        return self.compare(a, b, command.next);\n      }\n\n      return 0;\n    },\n\n    /**\r\n     * Reads the values of any data attributes present the provided target element\r\n     * which match the current sort command.\r\n     *\r\n     * @private\r\n     * @instance\r\n     * @since   3.0.0\r\n     * @param   {mixitup.Target}    target\r\n     * @param   {string}            [attribute]\r\n     * @return  {(String|Number)}\r\n     */\n    getAttributeValue: function getAttributeValue(target, attribute) {\n      var self = this,\n          value = '';\n      value = target.dom.el.getAttribute('data-' + attribute);\n\n      if (value === null) {\n        if (self.config.debug.showWarnings) {\n          // Encourage users to assign values to all targets to avoid erroneous sorting\n          // when types are mixed\n          console.warn(_mixitup.messages.warningInconsistentSortingAttributes({\n            attribute: 'data-' + attribute\n          }));\n        }\n      } // If an attribute is not present, return 0 as a safety value\n\n\n      return self.callFilters('valueGetAttributeValue', value || 0, arguments);\n    },\n\n    /**\r\n     * Inserts elements into the DOM in the appropriate\r\n     * order using a document fragment for minimal\r\n     * DOM thrashing\r\n     *\r\n     * @private\r\n     * @instance\r\n     * @since   2.0.0\r\n     * @param   {boolean}   isResetting\r\n     * @param   {Operation} operation\r\n     * @return  {void}\r\n     */\n    printSort: function printSort(isResetting, operation) {\n      var self = this,\n          startOrder = isResetting ? operation.newOrder : operation.startOrder,\n          newOrder = isResetting ? operation.startOrder : operation.newOrder,\n          nextSibling = startOrder.length ? startOrder[startOrder.length - 1].dom.el.nextElementSibling : null,\n          frag = window.document.createDocumentFragment(),\n          whitespace = null,\n          target = null,\n          el = null,\n          i = -1;\n      self.callActions('beforePrintSort', arguments); // Empty the container\n\n      for (i = 0; target = startOrder[i]; i++) {\n        el = target.dom.el;\n        if (el.style.position === 'absolute') continue;\n        h.removeWhitespace(el.previousSibling);\n        el.parentElement.removeChild(el);\n      }\n\n      whitespace = nextSibling ? nextSibling.previousSibling : self.dom.parent.lastChild;\n\n      if (whitespace && whitespace.nodeName === '#text') {\n        h.removeWhitespace(whitespace);\n      }\n\n      for (i = 0; target = newOrder[i]; i++) {\n        // Add targets into a document fragment\n        el = target.dom.el;\n\n        if (h.isElement(frag.lastChild)) {\n          frag.appendChild(window.document.createTextNode(' '));\n        }\n\n        frag.appendChild(el);\n      } // Insert the document fragment into the container\n      // before any other non-target elements\n\n\n      if (self.dom.parent.firstChild && self.dom.parent.firstChild !== nextSibling) {\n        frag.insertBefore(window.document.createTextNode(' '), frag.childNodes[0]);\n      }\n\n      if (nextSibling) {\n        frag.appendChild(window.document.createTextNode(' '));\n        self.dom.parent.insertBefore(frag, nextSibling);\n      } else {\n        self.dom.parent.appendChild(frag);\n      }\n\n      self.callActions('afterPrintSort', arguments);\n    },\n\n    /**\r\n     * Parses user-defined sort strings (i.e. `default:asc`) into sort commands objects.\r\n     *\r\n     * @private\r\n     * @instance\r\n     * @since   3.0.0\r\n     * @param   {string}                sortString\r\n     * @param   {mixitup.CommandSort}   command\r\n     * @return  {mixitup.CommandSort}\r\n     */\n    parseSortString: function parseSortString(sortString, command) {\n      var self = this,\n          rules = sortString.split(' '),\n          current = command,\n          rule = [],\n          i = -1; // command.sortString = sortString;\n\n      for (i = 0; i < rules.length; i++) {\n        rule = rules[i].split(':');\n        current.sortString = rules[i];\n        current.attribute = h.dashCase(rule[0]);\n        current.order = rule[1] || 'asc';\n\n        switch (current.attribute) {\n          case 'default':\n            // treat \"default\" as sorting by no attribute\n            current.attribute = '';\n            break;\n\n          case 'random':\n            // treat \"random\" as an order not an attribute\n            current.attribute = '';\n            current.order = 'random';\n            break;\n        }\n\n        if (!current.attribute || current.order === 'random') break;\n\n        if (i < rules.length - 1) {\n          // Embed reference to the next command\n          current.next = new _mixitup.CommandSort();\n          h.freeze(current);\n          current = current.next;\n        }\n      }\n\n      return self.callFilters('commandsParseSort', command, arguments);\n    },\n\n    /**\r\n     * Parses all effects out of the user-defined `animation.effects` string into\r\n     * their respective properties and units.\r\n     *\r\n     * @private\r\n     * @instance\r\n     * @since   2.0.0\r\n     * @return  {void}\r\n     */\n    parseEffects: function parseEffects() {\n      var self = this,\n          transformName = '',\n          effectsIn = self.config.animation.effectsIn || self.config.animation.effects,\n          effectsOut = self.config.animation.effectsOut || self.config.animation.effects;\n      self.callActions('beforeParseEffects', arguments);\n      self.effectsIn = new _mixitup.StyleData();\n      self.effectsOut = new _mixitup.StyleData();\n      self.transformIn = [];\n      self.transformOut = [];\n      self.effectsIn.opacity = self.effectsOut.opacity = 1;\n      self.parseEffect('fade', effectsIn, self.effectsIn, self.transformIn);\n      self.parseEffect('fade', effectsOut, self.effectsOut, self.transformOut, true);\n\n      for (transformName in _mixitup.transformDefaults) {\n        if (!(_mixitup.transformDefaults[transformName] instanceof _mixitup.TransformData)) {\n          continue;\n        }\n\n        self.parseEffect(transformName, effectsIn, self.effectsIn, self.transformIn);\n        self.parseEffect(transformName, effectsOut, self.effectsOut, self.transformOut, true);\n      }\n\n      self.parseEffect('stagger', effectsIn, self.effectsIn, self.transformIn);\n      self.parseEffect('stagger', effectsOut, self.effectsOut, self.transformOut, true);\n      self.callActions('afterParseEffects', arguments);\n    },\n\n    /**\r\n     * @private\r\n     * @instance\r\n     * @since   2.0.0\r\n     * @param   {string}    effectName\r\n     * @param   {string}    effectString\r\n     * @param   {StyleData} effects\r\n     * @param   {String[]}  transform\r\n     * @param   {boolean}   [isOut]\r\n     */\n    parseEffect: function parseEffect(effectName, effectString, effects, transform, isOut) {\n      var self = this,\n          re = /\\(([^)]+)\\)/,\n          propIndex = -1,\n          str = '',\n          match = [],\n          val = '',\n          units = ['%', 'px', 'em', 'rem', 'vh', 'vw', 'deg'],\n          unit = '',\n          i = -1;\n      self.callActions('beforeParseEffect', arguments);\n\n      if (typeof effectString !== 'string') {\n        throw new TypeError(_mixitup.messages.errorConfigInvalidAnimationEffects());\n      }\n\n      if (effectString.indexOf(effectName) < 0) {\n        // The effect is not present in the effects string\n        if (effectName === 'stagger') {\n          // Reset stagger to 0\n          self.staggerDuration = 0;\n        }\n\n        return;\n      } // The effect is present\n\n\n      propIndex = effectString.indexOf(effectName + '(');\n\n      if (propIndex > -1) {\n        // The effect has a user defined value in parentheses\n        // Extract from the first parenthesis to the end of string\n        str = effectString.substring(propIndex); // Match any number of characters between \"(\" and \")\"\n\n        match = re.exec(str);\n        val = match[1];\n      }\n\n      switch (effectName) {\n        case 'fade':\n          effects.opacity = val ? parseFloat(val) : 0;\n          break;\n\n        case 'stagger':\n          self.staggerDuration = val ? parseFloat(val) : 100; // TODO: Currently stagger must be applied globally, but\n          // if seperate values are specified for in/out, this should\n          // be respected\n\n          break;\n\n        default:\n          // All other effects are transforms following the same structure\n          if (isOut && self.config.animation.reverseOut && effectName !== 'scale') {\n            effects[effectName].value = (val ? parseFloat(val) : _mixitup.transformDefaults[effectName].value) * -1;\n          } else {\n            effects[effectName].value = val ? parseFloat(val) : _mixitup.transformDefaults[effectName].value;\n          }\n\n          if (val) {\n            for (i = 0; unit = units[i]; i++) {\n              if (val.indexOf(unit) > -1) {\n                effects[effectName].unit = unit;\n                break;\n              }\n            }\n          } else {\n            effects[effectName].unit = _mixitup.transformDefaults[effectName].unit;\n          }\n\n          transform.push(effectName + '(' + effects[effectName].value + effects[effectName].unit + ')');\n      }\n\n      self.callActions('afterParseEffect', arguments);\n    },\n\n    /**\r\n     * @private\r\n     * @instance\r\n     * @since   2.0.0\r\n     * @param   {Operation}     operation\r\n     * @return  {State}\r\n     */\n    buildState: function buildState(operation) {\n      var self = this,\n          state = new _mixitup.State(),\n          target = null,\n          i = -1;\n      self.callActions('beforeBuildState', arguments); // Map target elements into state arrays.\n      // the real target objects should never be exposed\n\n      for (i = 0; target = self.targets[i]; i++) {\n        if (!operation.toRemove.length || operation.toRemove.indexOf(target) < 0) {\n          state.targets.push(target.dom.el);\n        }\n      }\n\n      for (i = 0; target = operation.matching[i]; i++) {\n        state.matching.push(target.dom.el);\n      }\n\n      for (i = 0; target = operation.show[i]; i++) {\n        state.show.push(target.dom.el);\n      }\n\n      for (i = 0; target = operation.hide[i]; i++) {\n        if (!operation.toRemove.length || operation.toRemove.indexOf(target) < 0) {\n          state.hide.push(target.dom.el);\n        }\n      }\n\n      state.id = self.id;\n      state.container = self.dom.container;\n      state.activeFilter = operation.newFilter;\n      state.activeSort = operation.newSort;\n      state.activeDataset = operation.newDataset;\n      state.activeContainerClassName = operation.newContainerClassName;\n      state.hasFailed = operation.hasFailed;\n      state.totalTargets = self.targets.length;\n      state.totalShow = operation.show.length;\n      state.totalHide = operation.hide.length;\n      state.totalMatching = operation.matching.length;\n      state.triggerElement = operation.triggerElement;\n      return self.callFilters('stateBuildState', state, arguments);\n    },\n\n    /**\r\n     * @private\r\n     * @instance\r\n     * @since   2.0.0\r\n     * @param   {boolean}   shouldAnimate\r\n     * @param   {Operation} operation\r\n     * @return  {void}\r\n     */\n    goMix: function goMix(shouldAnimate, operation) {\n      var self = this,\n          deferred = null;\n      self.callActions('beforeGoMix', arguments); // If the animation duration is set to 0ms,\n      // or no effects specified,\n      // or the container is hidden\n      // then abort animation\n\n      if (!self.config.animation.duration || !self.config.animation.effects || !h.isVisible(self.dom.container)) {\n        shouldAnimate = false;\n      }\n\n      if (!operation.toShow.length && !operation.toHide.length && !operation.willSort && !operation.willChangeLayout) {\n        // If nothing to show or hide, and not sorting or\n        // changing layout\n        shouldAnimate = false;\n      }\n\n      if (!operation.startState.show.length && !operation.show.length) {\n        // If nothing currently shown, nothing to show\n        shouldAnimate = false;\n      }\n\n      _mixitup.events.fire('mixStart', self.dom.container, {\n        state: operation.startState,\n        futureState: operation.newState,\n        instance: self\n      }, self.dom.document);\n\n      if (typeof self.config.callbacks.onMixStart === 'function') {\n        self.config.callbacks.onMixStart.call(self.dom.container, operation.startState, operation.newState, self);\n      }\n\n      h.removeClass(self.dom.container, h.getClassname(self.config.classNames, 'container', self.config.classNames.modifierFailed));\n\n      if (!self.userDeferred) {\n        // Queue empty, no pending operations\n        deferred = self.userDeferred = h.defer(_mixitup.libraries);\n      } else {\n        // Use existing deferred\n        deferred = self.userDeferred;\n      }\n\n      self.isBusy = true;\n\n      if (!shouldAnimate || !_mixitup.features.has.transitions) {\n        // Abort\n        if (self.config.debug.fauxAsync) {\n          setTimeout(function () {\n            self.cleanUp(operation);\n          }, self.config.animation.duration);\n        } else {\n          self.cleanUp(operation);\n        }\n\n        return self.callFilters('promiseGoMix', deferred.promise, arguments);\n      } // If we should animate and the platform supports transitions, go for it\n\n\n      if (window.pageYOffset !== operation.docState.scrollTop) {\n        window.scrollTo(operation.docState.scrollLeft, operation.docState.scrollTop);\n      }\n\n      if (self.config.animation.applyPerspective) {\n        self.dom.parent.style[_mixitup.features.perspectiveProp] = self.config.animation.perspectiveDistance;\n        self.dom.parent.style[_mixitup.features.perspectiveOriginProp] = self.config.animation.perspectiveOrigin;\n      }\n\n      if (self.config.animation.animateResizeContainer && operation.startHeight !== operation.newHeight && operation.viewportDeltaY !== operation.startHeight - operation.newHeight) {\n        self.dom.parent.style.height = operation.startHeight + 'px';\n      }\n\n      if (self.config.animation.animateResizeContainer && operation.startWidth !== operation.newWidth && operation.viewportDeltaX !== operation.startWidth - operation.newWidth) {\n        self.dom.parent.style.width = operation.startWidth + 'px';\n      }\n\n      if (operation.startHeight === operation.newHeight) {\n        self.dom.parent.style.height = operation.startHeight + 'px';\n      }\n\n      if (operation.startWidth === operation.newWidth) {\n        self.dom.parent.style.width = operation.startWidth + 'px';\n      }\n\n      if (operation.startHeight === operation.newHeight && operation.startWidth === operation.newWidth) {\n        self.dom.parent.style.overflow = 'hidden';\n      }\n\n      requestAnimationFrame(function () {\n        self.moveTargets(operation);\n      });\n      return self.callFilters('promiseGoMix', deferred.promise, arguments);\n    },\n\n    /**\r\n     * @private\r\n     * @instance\r\n     * @since   2.0.0\r\n     * @param   {Operation}     operation\r\n     * @return  {void}\r\n     */\n    getStartMixData: function getStartMixData(operation) {\n      var self = this,\n          parentStyle = window.getComputedStyle(self.dom.parent),\n          parentRect = self.dom.parent.getBoundingClientRect(),\n          target = null,\n          data = {},\n          i = -1,\n          boxSizing = parentStyle[_mixitup.features.boxSizingProp];\n      self.incPadding = boxSizing === 'border-box';\n      self.callActions('beforeGetStartMixData', arguments);\n\n      for (i = 0; target = operation.show[i]; i++) {\n        data = target.getPosData();\n        operation.showPosData[i] = {\n          startPosData: data\n        };\n      }\n\n      for (i = 0; target = operation.toHide[i]; i++) {\n        data = target.getPosData();\n        operation.toHidePosData[i] = {\n          startPosData: data\n        };\n      }\n\n      operation.startX = parentRect.left;\n      operation.startY = parentRect.top;\n      operation.startHeight = self.incPadding ? parentRect.height : parentRect.height - parseFloat(parentStyle.paddingTop) - parseFloat(parentStyle.paddingBottom) - parseFloat(parentStyle.borderTop) - parseFloat(parentStyle.borderBottom);\n      operation.startWidth = self.incPadding ? parentRect.width : parentRect.width - parseFloat(parentStyle.paddingLeft) - parseFloat(parentStyle.paddingRight) - parseFloat(parentStyle.borderLeft) - parseFloat(parentStyle.borderRight);\n      self.callActions('afterGetStartMixData', arguments);\n    },\n\n    /**\r\n     * @private\r\n     * @instance\r\n     * @since   2.0.0\r\n     * @param   {Operation}     operation\r\n     * @return  {void}\r\n     */\n    setInter: function setInter(operation) {\n      var self = this,\n          target = null,\n          i = -1;\n      self.callActions('beforeSetInter', arguments); // Prevent scrollbar flicker on non-inertial scroll platforms by clamping height/width\n\n      if (self.config.animation.clampHeight) {\n        self.dom.parent.style.height = operation.startHeight + 'px';\n        self.dom.parent.style.overflow = 'hidden';\n      }\n\n      if (self.config.animation.clampWidth) {\n        self.dom.parent.style.width = operation.startWidth + 'px';\n        self.dom.parent.style.overflow = 'hidden';\n      }\n\n      for (i = 0; target = operation.toShow[i]; i++) {\n        target.show();\n      }\n\n      if (operation.willChangeLayout) {\n        h.removeClass(self.dom.container, operation.startContainerClassName);\n        h.addClass(self.dom.container, operation.newContainerClassName);\n      }\n\n      self.callActions('afterSetInter', arguments);\n    },\n\n    /**\r\n     * @private\r\n     * @instance\r\n     * @since   2.0.0\r\n     * @param   {Operation}     operation\r\n     * @return  {void}\r\n     */\n    getInterMixData: function getInterMixData(operation) {\n      var self = this,\n          target = null,\n          i = -1;\n      self.callActions('beforeGetInterMixData', arguments);\n\n      for (i = 0; target = operation.show[i]; i++) {\n        operation.showPosData[i].interPosData = target.getPosData();\n      }\n\n      for (i = 0; target = operation.toHide[i]; i++) {\n        operation.toHidePosData[i].interPosData = target.getPosData();\n      }\n\n      self.callActions('afterGetInterMixData', arguments);\n    },\n\n    /**\r\n     * @private\r\n     * @instance\r\n     * @since   2.0.0\r\n     * @param   {Operation}     operation\r\n     * @return  {void}\r\n     */\n    setFinal: function setFinal(operation) {\n      var self = this,\n          target = null,\n          i = -1;\n      self.callActions('beforeSetFinal', arguments);\n      operation.willSort && self.printSort(false, operation);\n\n      for (i = 0; target = operation.toHide[i]; i++) {\n        target.hide();\n      }\n\n      self.callActions('afterSetFinal', arguments);\n    },\n\n    /**\r\n     * @private\r\n     * @instance\r\n     * @since   2.0.0\r\n     * @param   {Operation}     operation\r\n     * @return  {void}\r\n     */\n    getFinalMixData: function getFinalMixData(operation) {\n      var self = this,\n          parentStyle = null,\n          parentRect = null,\n          target = null,\n          i = -1;\n      self.callActions('beforeGetFinalMixData', arguments);\n\n      for (i = 0; target = operation.show[i]; i++) {\n        operation.showPosData[i].finalPosData = target.getPosData();\n      }\n\n      for (i = 0; target = operation.toHide[i]; i++) {\n        operation.toHidePosData[i].finalPosData = target.getPosData();\n      } // Remove clamping\n\n\n      if (self.config.animation.clampHeight || self.config.animation.clampWidth) {\n        self.dom.parent.style.height = self.dom.parent.style.width = self.dom.parent.style.overflow = '';\n      }\n\n      if (!self.incPadding) {\n        parentStyle = window.getComputedStyle(self.dom.parent);\n      }\n\n      parentRect = self.dom.parent.getBoundingClientRect();\n      operation.newX = parentRect.left;\n      operation.newY = parentRect.top;\n      operation.newHeight = self.incPadding ? parentRect.height : parentRect.height - parseFloat(parentStyle.paddingTop) - parseFloat(parentStyle.paddingBottom) - parseFloat(parentStyle.borderTop) - parseFloat(parentStyle.borderBottom);\n      operation.newWidth = self.incPadding ? parentRect.width : parentRect.width - parseFloat(parentStyle.paddingLeft) - parseFloat(parentStyle.paddingRight) - parseFloat(parentStyle.borderLeft) - parseFloat(parentStyle.borderRight);\n      operation.viewportDeltaX = operation.docState.viewportWidth - this.dom.document.documentElement.clientWidth;\n      operation.viewportDeltaY = operation.docState.viewportHeight - this.dom.document.documentElement.clientHeight;\n\n      if (operation.willSort) {\n        self.printSort(true, operation);\n      }\n\n      for (i = 0; target = operation.toShow[i]; i++) {\n        target.hide();\n      }\n\n      for (i = 0; target = operation.toHide[i]; i++) {\n        target.show();\n      }\n\n      if (operation.willChangeLayout) {\n        h.removeClass(self.dom.container, operation.newContainerClassName);\n        h.addClass(self.dom.container, self.config.layout.containerClassName);\n      }\n\n      self.callActions('afterGetFinalMixData', arguments);\n    },\n\n    /**\r\n     * @private\r\n     * @instance\r\n     * @since    3.0.0\r\n     * @param    {Operation}     operation\r\n     */\n    getTweenData: function getTweenData(operation) {\n      var self = this,\n          target = null,\n          posData = null,\n          effectNames = Object.getOwnPropertyNames(self.effectsIn),\n          effectName = '',\n          effect = null,\n          widthChange = -1,\n          heightChange = -1,\n          i = -1,\n          j = -1;\n      self.callActions('beforeGetTweenData', arguments);\n\n      for (i = 0; target = operation.show[i]; i++) {\n        posData = operation.showPosData[i];\n        posData.posIn = new _mixitup.StyleData();\n        posData.posOut = new _mixitup.StyleData();\n        posData.tweenData = new _mixitup.StyleData(); // Process x and y\n\n        if (target.isShown) {\n          posData.posIn.x = posData.startPosData.x - posData.interPosData.x;\n          posData.posIn.y = posData.startPosData.y - posData.interPosData.y;\n        } else {\n          posData.posIn.x = posData.posIn.y = 0;\n        }\n\n        posData.posOut.x = posData.finalPosData.x - posData.interPosData.x;\n        posData.posOut.y = posData.finalPosData.y - posData.interPosData.y; // Process opacity\n\n        posData.posIn.opacity = target.isShown ? 1 : self.effectsIn.opacity;\n        posData.posOut.opacity = 1;\n        posData.tweenData.opacity = posData.posOut.opacity - posData.posIn.opacity; // Adjust x and y if not nudging\n\n        if (!target.isShown && !self.config.animation.nudge) {\n          posData.posIn.x = posData.posOut.x;\n          posData.posIn.y = posData.posOut.y;\n        }\n\n        posData.tweenData.x = posData.posOut.x - posData.posIn.x;\n        posData.tweenData.y = posData.posOut.y - posData.posIn.y; // Process width, height, and margins\n\n        if (self.config.animation.animateResizeTargets) {\n          posData.posIn.width = posData.startPosData.width;\n          posData.posIn.height = posData.startPosData.height; // \"||\" Prevents width/height change from including 0 width/height if hiding or showing\n\n          widthChange = (posData.startPosData.width || posData.finalPosData.width) - posData.interPosData.width;\n          posData.posIn.marginRight = posData.startPosData.marginRight - widthChange;\n          heightChange = (posData.startPosData.height || posData.finalPosData.height) - posData.interPosData.height;\n          posData.posIn.marginBottom = posData.startPosData.marginBottom - heightChange;\n          posData.posOut.width = posData.finalPosData.width;\n          posData.posOut.height = posData.finalPosData.height;\n          widthChange = (posData.finalPosData.width || posData.startPosData.width) - posData.interPosData.width;\n          posData.posOut.marginRight = posData.finalPosData.marginRight - widthChange;\n          heightChange = (posData.finalPosData.height || posData.startPosData.height) - posData.interPosData.height;\n          posData.posOut.marginBottom = posData.finalPosData.marginBottom - heightChange;\n          posData.tweenData.width = posData.posOut.width - posData.posIn.width;\n          posData.tweenData.height = posData.posOut.height - posData.posIn.height;\n          posData.tweenData.marginRight = posData.posOut.marginRight - posData.posIn.marginRight;\n          posData.tweenData.marginBottom = posData.posOut.marginBottom - posData.posIn.marginBottom;\n        } // Process transforms\n\n\n        for (j = 0; effectName = effectNames[j]; j++) {\n          effect = self.effectsIn[effectName];\n          if (!(effect instanceof _mixitup.TransformData) || !effect.value) continue;\n          posData.posIn[effectName].value = effect.value;\n          posData.posOut[effectName].value = 0;\n          posData.tweenData[effectName].value = posData.posOut[effectName].value - posData.posIn[effectName].value;\n          posData.posIn[effectName].unit = posData.posOut[effectName].unit = posData.tweenData[effectName].unit = effect.unit;\n        }\n      }\n\n      for (i = 0; target = operation.toHide[i]; i++) {\n        posData = operation.toHidePosData[i];\n        posData.posIn = new _mixitup.StyleData();\n        posData.posOut = new _mixitup.StyleData();\n        posData.tweenData = new _mixitup.StyleData(); // Process x and y\n\n        posData.posIn.x = target.isShown ? posData.startPosData.x - posData.interPosData.x : 0;\n        posData.posIn.y = target.isShown ? posData.startPosData.y - posData.interPosData.y : 0;\n        posData.posOut.x = self.config.animation.nudge ? 0 : posData.posIn.x;\n        posData.posOut.y = self.config.animation.nudge ? 0 : posData.posIn.y;\n        posData.tweenData.x = posData.posOut.x - posData.posIn.x;\n        posData.tweenData.y = posData.posOut.y - posData.posIn.y; // Process width, height, and margins\n\n        if (self.config.animation.animateResizeTargets) {\n          posData.posIn.width = posData.startPosData.width;\n          posData.posIn.height = posData.startPosData.height;\n          widthChange = posData.startPosData.width - posData.interPosData.width;\n          posData.posIn.marginRight = posData.startPosData.marginRight - widthChange;\n          heightChange = posData.startPosData.height - posData.interPosData.height;\n          posData.posIn.marginBottom = posData.startPosData.marginBottom - heightChange;\n        } // Process opacity\n\n\n        posData.posIn.opacity = 1;\n        posData.posOut.opacity = self.effectsOut.opacity;\n        posData.tweenData.opacity = posData.posOut.opacity - posData.posIn.opacity; // Process transforms\n\n        for (j = 0; effectName = effectNames[j]; j++) {\n          effect = self.effectsOut[effectName];\n          if (!(effect instanceof _mixitup.TransformData) || !effect.value) continue;\n          posData.posIn[effectName].value = 0;\n          posData.posOut[effectName].value = effect.value;\n          posData.tweenData[effectName].value = posData.posOut[effectName].value - posData.posIn[effectName].value;\n          posData.posIn[effectName].unit = posData.posOut[effectName].unit = posData.tweenData[effectName].unit = effect.unit;\n        }\n      }\n\n      self.callActions('afterGetTweenData', arguments);\n    },\n\n    /**\r\n     * @private\r\n     * @instance\r\n     * @since   3.0.0\r\n     * @param   {Operation}     operation\r\n     * @return  {void}\r\n     */\n    moveTargets: function moveTargets(operation) {\n      var self = this,\n          target = null,\n          moveData = null,\n          posData = null,\n          statusChange = '',\n          willTransition = false,\n          staggerIndex = -1,\n          i = -1,\n          checkProgress = self.checkProgress.bind(self);\n      self.callActions('beforeMoveTargets', arguments); // TODO: this is an extra loop in addition to the calcs\n      // done in getOperation, could some of this be done there?\n\n      for (i = 0; target = operation.show[i]; i++) {\n        moveData = new _mixitup.IMoveData();\n        posData = operation.showPosData[i];\n        statusChange = target.isShown ? 'none' : 'show';\n        willTransition = self.willTransition(statusChange, operation.hasEffect, posData.posIn, posData.posOut);\n\n        if (willTransition) {\n          // Prevent non-transitioning targets from incrementing the staggerIndex\n          staggerIndex++;\n        }\n\n        target.show();\n        moveData.posIn = posData.posIn;\n        moveData.posOut = posData.posOut;\n        moveData.statusChange = statusChange;\n        moveData.staggerIndex = staggerIndex;\n        moveData.operation = operation;\n        moveData.callback = willTransition ? checkProgress : null;\n        target.move(moveData);\n      }\n\n      for (i = 0; target = operation.toHide[i]; i++) {\n        posData = operation.toHidePosData[i];\n        moveData = new _mixitup.IMoveData();\n        statusChange = 'hide';\n        willTransition = self.willTransition(statusChange, posData.posIn, posData.posOut);\n        moveData.posIn = posData.posIn;\n        moveData.posOut = posData.posOut;\n        moveData.statusChange = statusChange;\n        moveData.staggerIndex = i;\n        moveData.operation = operation;\n        moveData.callback = willTransition ? checkProgress : null;\n        target.move(moveData);\n      }\n\n      if (self.config.animation.animateResizeContainer) {\n        self.dom.parent.style[_mixitup.features.transitionProp] = 'height ' + self.config.animation.duration + 'ms ease, ' + 'width ' + self.config.animation.duration + 'ms ease ';\n        requestAnimationFrame(function () {\n          if (operation.startHeight !== operation.newHeight && operation.viewportDeltaY !== operation.startHeight - operation.newHeight) {\n            self.dom.parent.style.height = operation.newHeight + 'px';\n          }\n\n          if (operation.startWidth !== operation.newWidth && operation.viewportDeltaX !== operation.startWidth - operation.newWidth) {\n            self.dom.parent.style.width = operation.newWidth + 'px';\n          }\n        });\n      }\n\n      if (operation.willChangeLayout) {\n        h.removeClass(self.dom.container, self.config.layout.ContainerClassName);\n        h.addClass(self.dom.container, operation.newContainerClassName);\n      }\n\n      self.callActions('afterMoveTargets', arguments);\n    },\n\n    /**\r\n     * @private\r\n     * @instance\r\n     * @return  {boolean}\r\n     */\n    hasEffect: function hasEffect() {\n      var self = this,\n          EFFECTABLES = ['scale', 'translateX', 'translateY', 'translateZ', 'rotateX', 'rotateY', 'rotateZ'],\n          effectName = '',\n          effect = null,\n          result = false,\n          value = -1,\n          i = -1;\n\n      if (self.effectsIn.opacity !== 1) {\n        return self.callFilters('resultHasEffect', true, arguments);\n      }\n\n      for (i = 0; effectName = EFFECTABLES[i]; i++) {\n        effect = self.effectsIn[effectName];\n        value = typeof effect && effect.value !== 'undefined' ? effect.value : effect;\n\n        if (value !== 0) {\n          result = true;\n          break;\n        }\n      }\n\n      return self.callFilters('resultHasEffect', result, arguments);\n    },\n\n    /**\r\n     * Determines if a target element will transition in\r\n     * some fasion and therefore requires binding of\r\n     * transitionEnd\r\n     *\r\n     * @private\r\n     * @instance\r\n     * @since   3.0.0\r\n     * @param   {string}        statusChange\r\n     * @param   {boolean}       hasEffect\r\n     * @param   {StyleData}     posIn\r\n     * @param   {StyleData}     posOut\r\n     * @return  {boolean}\r\n     */\n    willTransition: function willTransition(statusChange, hasEffect, posIn, posOut) {\n      var self = this,\n          result = false;\n\n      if (!h.isVisible(self.dom.container)) {\n        // If the container is not visible, the transitionEnd\n        // event will not occur and MixItUp will hang\n        result = false;\n      } else if (statusChange !== 'none' && hasEffect || posIn.x !== posOut.x || posIn.y !== posOut.y) {\n        // If opacity and/or translate will change\n        result = true;\n      } else if (self.config.animation.animateResizeTargets) {\n        // Check if width, height or margins will change\n        result = posIn.width !== posOut.width || posIn.height !== posOut.height || posIn.marginRight !== posOut.marginRight || posIn.marginTop !== posOut.marginTop;\n      } else {\n        result = false;\n      }\n\n      return self.callFilters('resultWillTransition', result, arguments);\n    },\n\n    /**\r\n     * @private\r\n     * @instance\r\n     * @since   2.0.0\r\n     * @param   {Operation}     operation\r\n     * @return  {void}\r\n     */\n    checkProgress: function checkProgress(operation) {\n      var self = this;\n      self.targetsDone++;\n\n      if (self.targetsBound === self.targetsDone) {\n        self.cleanUp(operation);\n      }\n    },\n\n    /**\r\n     * @private\r\n     * @instance\r\n     * @since   2.0.0\r\n     * @param   {Operation}     operation\r\n     * @return  {void}\r\n     */\n    cleanUp: function cleanUp(operation) {\n      var self = this,\n          target = null,\n          whitespaceBefore = null,\n          whitespaceAfter = null,\n          nextInQueue = null,\n          i = -1;\n      self.callActions('beforeCleanUp', arguments);\n      self.targetsMoved = self.targetsImmovable = self.targetsBound = self.targetsDone = 0;\n\n      for (i = 0; target = operation.show[i]; i++) {\n        target.cleanUp();\n        target.show();\n      }\n\n      for (i = 0; target = operation.toHide[i]; i++) {\n        target.cleanUp();\n        target.hide();\n      }\n\n      if (operation.willSort) {\n        self.printSort(false, operation);\n      } // Remove any styles applied to the parent container\n\n\n      self.dom.parent.style[_mixitup.features.transitionProp] = self.dom.parent.style.height = self.dom.parent.style.width = self.dom.parent.style.overflow = self.dom.parent.style[_mixitup.features.perspectiveProp] = self.dom.parent.style[_mixitup.features.perspectiveOriginProp] = '';\n\n      if (operation.willChangeLayout) {\n        h.removeClass(self.dom.container, operation.startContainerClassName);\n        h.addClass(self.dom.container, operation.newContainerClassName);\n      }\n\n      if (operation.toRemove.length) {\n        for (i = 0; target = self.targets[i]; i++) {\n          if (operation.toRemove.indexOf(target) > -1) {\n            if ((whitespaceBefore = target.dom.el.previousSibling) && whitespaceBefore.nodeName === '#text' && (whitespaceAfter = target.dom.el.nextSibling) && whitespaceAfter.nodeName === '#text') {\n              h.removeWhitespace(whitespaceBefore);\n            }\n\n            if (!operation.willSort) {\n              // NB: Sorting will remove targets as a bi-product of `printSort()`\n              self.dom.parent.removeChild(target.dom.el);\n            }\n\n            self.targets.splice(i, 1);\n            target.isInDom = false;\n            i--;\n          }\n        } // Since targets have been removed, the original order must be updated\n\n\n        self.origOrder = self.targets;\n      }\n\n      if (operation.willSort) {\n        self.targets = operation.newOrder;\n      }\n\n      self.state = operation.newState;\n      self.lastOperation = operation;\n      self.dom.targets = self.state.targets; // mixEnd\n\n      _mixitup.events.fire('mixEnd', self.dom.container, {\n        state: self.state,\n        instance: self\n      }, self.dom.document);\n\n      if (typeof self.config.callbacks.onMixEnd === 'function') {\n        self.config.callbacks.onMixEnd.call(self.dom.container, self.state, self);\n      }\n\n      if (operation.hasFailed) {\n        // mixFail\n        _mixitup.events.fire('mixFail', self.dom.container, {\n          state: self.state,\n          instance: self\n        }, self.dom.document);\n\n        if (typeof self.config.callbacks.onMixFail === 'function') {\n          self.config.callbacks.onMixFail.call(self.dom.container, self.state, self);\n        }\n\n        h.addClass(self.dom.container, h.getClassname(self.config.classNames, 'container', self.config.classNames.modifierFailed));\n      } // User-defined callback function\n\n\n      if (typeof self.userCallback === 'function') {\n        self.userCallback.call(self.dom.container, self.state, self);\n      }\n\n      if (typeof self.userDeferred.resolve === 'function') {\n        self.userDeferred.resolve(self.state);\n      }\n\n      self.userCallback = null;\n      self.userDeferred = null;\n      self.lastClicked = null;\n      self.isToggling = false;\n      self.isBusy = false;\n\n      if (self.queue.length) {\n        self.callActions('beforeReadQueueCleanUp', arguments);\n        nextInQueue = self.queue.shift(); // Update non-public API properties stored in queue\n\n        self.userDeferred = nextInQueue.deferred;\n        self.isToggling = nextInQueue.isToggling;\n        self.lastClicked = nextInQueue.triggerElement;\n\n        if (nextInQueue.instruction.command instanceof _mixitup.CommandMultimix) {\n          self.multimix.apply(self, nextInQueue.args);\n        } else {\n          self.dataset.apply(self, nextInQueue.args);\n        }\n      }\n\n      self.callActions('afterCleanUp', arguments);\n    },\n\n    /**\r\n     * @private\r\n     * @instance\r\n     * @since   2.0.0\r\n     * @param   {Array<*>}  args\r\n     * @return  {mixitup.UserInstruction}\r\n     */\n    parseMultimixArgs: function parseMultimixArgs(args) {\n      var self = this,\n          instruction = new _mixitup.UserInstruction(),\n          arg = null,\n          i = -1;\n      instruction.animate = self.config.animation.enable;\n      instruction.command = new _mixitup.CommandMultimix();\n\n      for (i = 0; i < args.length; i++) {\n        arg = args[i];\n        if (arg === null) continue;\n\n        if (typeof arg === 'object') {\n          h.extend(instruction.command, arg);\n        } else if (typeof arg === 'boolean') {\n          instruction.animate = arg;\n        } else if (typeof arg === 'function') {\n          instruction.callback = arg;\n        }\n      } // Coerce arbitrary command arguments into typed command objects\n\n\n      if (instruction.command.insert && !(instruction.command.insert instanceof _mixitup.CommandInsert)) {\n        instruction.command.insert = self.parseInsertArgs([instruction.command.insert]).command;\n      }\n\n      if (instruction.command.remove && !(instruction.command.remove instanceof _mixitup.CommandRemove)) {\n        instruction.command.remove = self.parseRemoveArgs([instruction.command.remove]).command;\n      }\n\n      if (instruction.command.filter && !(instruction.command.filter instanceof _mixitup.CommandFilter)) {\n        instruction.command.filter = self.parseFilterArgs([instruction.command.filter]).command;\n      }\n\n      if (instruction.command.sort && !(instruction.command.sort instanceof _mixitup.CommandSort)) {\n        instruction.command.sort = self.parseSortArgs([instruction.command.sort]).command;\n      }\n\n      if (instruction.command.changeLayout && !(instruction.command.changeLayout instanceof _mixitup.CommandChangeLayout)) {\n        instruction.command.changeLayout = self.parseChangeLayoutArgs([instruction.command.changeLayout]).command;\n      }\n\n      instruction = self.callFilters('instructionParseMultimixArgs', instruction, arguments);\n      h.freeze(instruction);\n      return instruction;\n    },\n\n    /**\r\n     * @private\r\n     * @instance\r\n     * @since   2.0.0\r\n     * @param   {Array<*>}  args\r\n     * @return  {mixitup.UserInstruction}\r\n     */\n    parseFilterArgs: function parseFilterArgs(args) {\n      var self = this,\n          instruction = new _mixitup.UserInstruction(),\n          arg = null,\n          i = -1;\n      instruction.animate = self.config.animation.enable;\n      instruction.command = new _mixitup.CommandFilter();\n\n      for (i = 0; i < args.length; i++) {\n        arg = args[i];\n\n        if (typeof arg === 'string') {\n          // Selector\n          instruction.command.selector = arg;\n        } else if (arg === null) {\n          instruction.command.collection = [];\n        } else if (typeof arg === 'object' && h.isElement(arg, self.dom.document)) {\n          // Single element\n          instruction.command.collection = [arg];\n        } else if (typeof arg === 'object' && typeof arg.length !== 'undefined') {\n          // Multiple elements in array, NodeList or jQuery collection\n          instruction.command.collection = h.arrayFromList(arg);\n        } else if (typeof arg === 'object') {\n          // Filter command\n          h.extend(instruction.command, arg);\n        } else if (typeof arg === 'boolean') {\n          instruction.animate = arg;\n        } else if (typeof arg === 'function') {\n          instruction.callback = arg;\n        }\n      }\n\n      if (instruction.command.selector && instruction.command.collection) {\n        throw new Error(_mixitup.messages.errorFilterInvalidArguments());\n      }\n\n      instruction = self.callFilters('instructionParseFilterArgs', instruction, arguments);\n      h.freeze(instruction);\n      return instruction;\n    },\n    parseSortArgs: function parseSortArgs(args) {\n      var self = this,\n          instruction = new _mixitup.UserInstruction(),\n          arg = null,\n          sortString = '',\n          i = -1;\n      instruction.animate = self.config.animation.enable;\n      instruction.command = new _mixitup.CommandSort();\n\n      for (i = 0; i < args.length; i++) {\n        arg = args[i];\n        if (arg === null) continue;\n\n        switch (typeof arg) {\n          case 'string':\n            // Sort string\n            sortString = arg;\n            break;\n\n          case 'object':\n            // Array of element references\n            if (arg.length) {\n              instruction.command.collection = h.arrayFromList(arg);\n            }\n\n            break;\n\n          case 'boolean':\n            instruction.animate = arg;\n            break;\n\n          case 'function':\n            instruction.callback = arg;\n            break;\n        }\n      }\n\n      if (sortString) {\n        instruction.command = self.parseSortString(sortString, instruction.command);\n      }\n\n      instruction = self.callFilters('instructionParseSortArgs', instruction, arguments);\n      h.freeze(instruction);\n      return instruction;\n    },\n\n    /**\r\n     * @private\r\n     * @instance\r\n     * @since   2.0.0\r\n     * @param   {Array<*>}  args\r\n     * @return  {mixitup.UserInstruction}\r\n     */\n    parseInsertArgs: function parseInsertArgs(args) {\n      var self = this,\n          instruction = new _mixitup.UserInstruction(),\n          arg = null,\n          i = -1;\n      instruction.animate = self.config.animation.enable;\n      instruction.command = new _mixitup.CommandInsert();\n\n      for (i = 0; i < args.length; i++) {\n        arg = args[i];\n        if (arg === null) continue;\n\n        if (typeof arg === 'number') {\n          // Insert index\n          instruction.command.index = arg;\n        } else if (typeof arg === 'string' && ['before', 'after'].indexOf(arg) > -1) {\n          // 'before'/'after'\n          instruction.command.position = arg;\n        } else if (typeof arg === 'string') {\n          // Markup\n          instruction.command.collection = h.arrayFromList(h.createElement(arg).childNodes);\n        } else if (typeof arg === 'object' && h.isElement(arg, self.dom.document)) {\n          // Single element\n          !instruction.command.collection.length ? instruction.command.collection = [arg] : instruction.command.sibling = arg;\n        } else if (typeof arg === 'object' && arg.length) {\n          // Multiple elements in array or jQuery collection\n          !instruction.command.collection.length ? instruction.command.collection = arg : instruction.command.sibling = arg[0];\n        } else if (typeof arg === 'object' && arg.childNodes && arg.childNodes.length) {\n          // Document fragment\n          !instruction.command.collection.length ? instruction.command.collection = h.arrayFromList(arg.childNodes) : instruction.command.sibling = arg.childNodes[0];\n        } else if (typeof arg === 'object') {\n          // Insert command\n          h.extend(instruction.command, arg);\n        } else if (typeof arg === 'boolean') {\n          instruction.animate = arg;\n        } else if (typeof arg === 'function') {\n          instruction.callback = arg;\n        }\n      }\n\n      if (instruction.command.index && instruction.command.sibling) {\n        throw new Error(_mixitup.messages.errorInsertInvalidArguments());\n      }\n\n      if (!instruction.command.collection.length && self.config.debug.showWarnings) {\n        console.warn(_mixitup.messages.warningInsertNoElements());\n      }\n\n      instruction = self.callFilters('instructionParseInsertArgs', instruction, arguments);\n      h.freeze(instruction);\n      return instruction;\n    },\n\n    /**\r\n     * @private\r\n     * @instance\r\n     * @since   3.0.0\r\n     * @param   {Array<*>}  args\r\n     * @return  {mixitup.UserInstruction}\r\n     */\n    parseRemoveArgs: function parseRemoveArgs(args) {\n      var self = this,\n          instruction = new _mixitup.UserInstruction(),\n          target = null,\n          arg = null,\n          i = -1;\n      instruction.animate = self.config.animation.enable;\n      instruction.command = new _mixitup.CommandRemove();\n\n      for (i = 0; i < args.length; i++) {\n        arg = args[i];\n        if (arg === null) continue;\n\n        switch (typeof arg) {\n          case 'number':\n            if (self.targets[arg]) {\n              instruction.command.targets[0] = self.targets[arg];\n            }\n\n            break;\n\n          case 'string':\n            instruction.command.collection = h.arrayFromList(self.dom.parent.querySelectorAll(arg));\n            break;\n\n          case 'object':\n            if (arg && arg.length) {\n              instruction.command.collection = arg;\n            } else if (h.isElement(arg, self.dom.document)) {\n              instruction.command.collection = [arg];\n            } else {\n              // Remove command\n              h.extend(instruction.command, arg);\n            }\n\n            break;\n\n          case 'boolean':\n            instruction.animate = arg;\n            break;\n\n          case 'function':\n            instruction.callback = arg;\n            break;\n        }\n      }\n\n      if (instruction.command.collection.length) {\n        for (i = 0; target = self.targets[i]; i++) {\n          if (instruction.command.collection.indexOf(target.dom.el) > -1) {\n            instruction.command.targets.push(target);\n          }\n        }\n      }\n\n      if (!instruction.command.targets.length && self.config.debug.showWarnings) {\n        console.warn(_mixitup.messages.warningRemoveNoElements());\n      }\n\n      h.freeze(instruction);\n      return instruction;\n    },\n\n    /**\r\n     * @private\r\n     * @instance\r\n     * @since   3.0.0\r\n     * @param   {Array<*>}  args\r\n     * @return  {mixitup.UserInstruction}\r\n     */\n    parseDatasetArgs: function parseDatasetArgs(args) {\n      var self = this,\n          instruction = new _mixitup.UserInstruction(),\n          arg = null,\n          i = -1;\n      instruction.animate = self.config.animation.enable;\n      instruction.command = new _mixitup.CommandDataset();\n\n      for (i = 0; i < args.length; i++) {\n        arg = args[i];\n        if (arg === null) continue;\n\n        switch (typeof arg) {\n          case 'object':\n            if (Array.isArray(arg) || typeof arg.length === 'number') {\n              instruction.command.dataset = arg;\n            } else {\n              // Change layout command\n              h.extend(instruction.command, arg);\n            }\n\n            break;\n\n          case 'boolean':\n            instruction.animate = arg;\n            break;\n\n          case 'function':\n            instruction.callback = arg;\n            break;\n        }\n      }\n\n      h.freeze(instruction);\n      return instruction;\n    },\n\n    /**\r\n     * @private\r\n     * @instance\r\n     * @since   3.0.0\r\n     * @param   {Array<*>}  args\r\n     * @return  {mixitup.UserInstruction}\r\n     */\n    parseChangeLayoutArgs: function parseChangeLayoutArgs(args) {\n      var self = this,\n          instruction = new _mixitup.UserInstruction(),\n          arg = null,\n          i = -1;\n      instruction.animate = self.config.animation.enable;\n      instruction.command = new _mixitup.CommandChangeLayout();\n\n      for (i = 0; i < args.length; i++) {\n        arg = args[i];\n        if (arg === null) continue;\n\n        switch (typeof arg) {\n          case 'string':\n            instruction.command.containerClassName = arg;\n            break;\n\n          case 'object':\n            // Change layout command\n            h.extend(instruction.command, arg);\n            break;\n\n          case 'boolean':\n            instruction.animate = arg;\n            break;\n\n          case 'function':\n            instruction.callback = arg;\n            break;\n        }\n      }\n\n      h.freeze(instruction);\n      return instruction;\n    },\n\n    /**\r\n     * @private\r\n     * @instance\r\n     * @since       3.0.0\r\n     * @param       {mixitup.QueueItem}         queueItem\r\n     * @return      {Promise.<mixitup.State>}\r\n     */\n    queueMix: function queueMix(queueItem) {\n      var self = this,\n          deferred = null,\n          toggleSelector = '';\n      self.callActions('beforeQueueMix', arguments);\n      deferred = h.defer(_mixitup.libraries);\n\n      if (self.config.animation.queue && self.queue.length < self.config.animation.queueLimit) {\n        queueItem.deferred = deferred;\n        self.queue.push(queueItem); // Keep controls in sync with user interactions. Mixer will catch up as it drains the queue.\n\n        if (self.config.controls.enable) {\n          if (self.isToggling) {\n            self.buildToggleArray(queueItem.instruction.command);\n            toggleSelector = self.getToggleSelector();\n            self.updateControls({\n              filter: {\n                selector: toggleSelector\n              }\n            });\n          } else {\n            self.updateControls(queueItem.instruction.command);\n          }\n        }\n      } else {\n        if (self.config.debug.showWarnings) {\n          console.warn(_mixitup.messages.warningMultimixInstanceQueueFull());\n        }\n\n        deferred.resolve(self.state);\n\n        _mixitup.events.fire('mixBusy', self.dom.container, {\n          state: self.state,\n          instance: self\n        }, self.dom.document);\n\n        if (typeof self.config.callbacks.onMixBusy === 'function') {\n          self.config.callbacks.onMixBusy.call(self.dom.container, self.state, self);\n        }\n      }\n\n      return self.callFilters('promiseQueueMix', deferred.promise, arguments);\n    },\n\n    /**\r\n     * @private\r\n     * @instance\r\n     * @since   3.0.0\r\n     * @param   {Array.<object>}    newDataset\r\n     * @return  {Operation}\r\n     */\n    getDataOperation: function getDataOperation(newDataset) {\n      var self = this,\n          operation = new _mixitup.Operation(),\n          startDataset = [];\n      operation = self.callFilters('operationUnmappedGetDataOperation', operation, arguments);\n\n      if (self.dom.targets.length && !(startDataset = self.state.activeDataset || []).length) {\n        throw new Error(_mixitup.messages.errorDatasetNotSet());\n      }\n\n      operation.id = h.randomHex();\n      operation.startState = self.state;\n      operation.startDataset = startDataset;\n      operation.newDataset = newDataset.slice();\n      self.diffDatasets(operation);\n      operation.startOrder = self.targets;\n      operation.newOrder = operation.show;\n\n      if (self.config.animation.enable) {\n        self.getStartMixData(operation);\n        self.setInter(operation);\n        operation.docState = h.getDocumentState(self.dom.document);\n        self.getInterMixData(operation);\n        self.setFinal(operation);\n        self.getFinalMixData(operation);\n        self.parseEffects();\n        operation.hasEffect = self.hasEffect();\n        self.getTweenData(operation);\n      }\n\n      self.targets = operation.show.slice();\n      operation.newState = self.buildState(operation); // NB: Targets to be removed must be included in `self.targets` for removal during clean up,\n      // but are added after state is built so that state is accurate\n\n      Array.prototype.push.apply(self.targets, operation.toRemove);\n      operation = self.callFilters('operationMappedGetDataOperation', operation, arguments);\n      return operation;\n    },\n\n    /**\r\n     * @private\r\n     * @instance\r\n     * @since   3.0.0\r\n     * @param   {mixitup.Operation} operation\r\n     * @return  {void}\r\n     */\n    diffDatasets: function diffDatasets(operation) {\n      var self = this,\n          persistantStartIds = [],\n          persistantNewIds = [],\n          insertedTargets = [],\n          data = null,\n          target = null,\n          el = null,\n          frag = null,\n          nextEl = null,\n          uids = {},\n          id = '',\n          i = -1;\n      self.callActions('beforeDiffDatasets', arguments);\n\n      for (i = 0; data = operation.newDataset[i]; i++) {\n        if (typeof (id = data[self.config.data.uidKey]) === 'undefined' || id.toString().length < 1) {\n          throw new TypeError(_mixitup.messages.errorDatasetInvalidUidKey({\n            uidKey: self.config.data.uidKey\n          }));\n        }\n\n        if (!uids[id]) {\n          uids[id] = true;\n        } else {\n          throw new Error(_mixitup.messages.errorDatasetDuplicateUid({\n            uid: id\n          }));\n        }\n\n        if ((target = self.cache[id]) instanceof _mixitup.Target) {\n          // Already in cache\n          if (self.config.data.dirtyCheck && !h.deepEquals(data, target.data)) {\n            // change detected\n            el = target.render(data);\n            target.data = data;\n\n            if (el !== target.dom.el) {\n              // Update target element reference\n              if (target.isInDom) {\n                target.unbindEvents();\n                self.dom.parent.replaceChild(el, target.dom.el);\n              }\n\n              if (!target.isShown) {\n                el.style.display = 'none';\n              }\n\n              target.dom.el = el;\n\n              if (target.isInDom) {\n                target.bindEvents();\n              }\n            }\n          }\n\n          el = target.dom.el;\n        } else {\n          // New target\n          target = new _mixitup.Target();\n          target.init(null, self, data);\n          target.hide();\n        }\n\n        if (!target.isInDom) {\n          // Adding to DOM\n          if (!frag) {\n            // Open frag\n            frag = self.dom.document.createDocumentFragment();\n          }\n\n          if (frag.lastElementChild) {\n            frag.appendChild(self.dom.document.createTextNode(' '));\n          }\n\n          frag.appendChild(target.dom.el);\n          target.isInDom = true;\n          target.unbindEvents();\n          target.bindEvents();\n          target.hide();\n          operation.toShow.push(target);\n          insertedTargets.push(target);\n        } else {\n          // Already in DOM\n          nextEl = target.dom.el.nextElementSibling;\n          persistantNewIds.push(id);\n\n          if (frag) {\n            // Close and insert previously opened frag\n            if (frag.lastElementChild) {\n              frag.appendChild(self.dom.document.createTextNode(' '));\n            }\n\n            self.insertDatasetFrag(frag, target.dom.el, insertedTargets);\n            frag = null;\n          }\n        }\n\n        operation.show.push(target);\n      }\n\n      if (frag) {\n        // Unclosed frag remaining\n        nextEl = nextEl || self.config.layout.siblingAfter;\n\n        if (nextEl) {\n          frag.appendChild(self.dom.document.createTextNode(' '));\n        }\n\n        self.insertDatasetFrag(frag, nextEl, insertedTargets);\n      }\n\n      for (i = 0; data = operation.startDataset[i]; i++) {\n        id = data[self.config.data.uidKey];\n        target = self.cache[id];\n\n        if (operation.show.indexOf(target) < 0) {\n          // Previously shown but now absent\n          operation.hide.push(target);\n          operation.toHide.push(target);\n          operation.toRemove.push(target);\n        } else {\n          persistantStartIds.push(id);\n        }\n      }\n\n      if (!h.isEqualArray(persistantStartIds, persistantNewIds)) {\n        operation.willSort = true;\n      }\n\n      self.callActions('afterDiffDatasets', arguments);\n    },\n\n    /**\r\n     * @private\r\n     * @instance\r\n     * @since   3.1.5\r\n     * @param   {DocumentFragment}          frag\r\n     * @param   {(HTMLElement|null)}        nextEl\r\n     * @param   {Array.<mixitup.Target>}    targets\r\n     * @return  {void}\r\n     */\n    insertDatasetFrag: function insertDatasetFrag(frag, nextEl, targets) {\n      var self = this;\n      var insertAt = nextEl ? h.arrayFromList(self.dom.parent.children).indexOf(nextEl) : self.targets.length;\n      self.dom.parent.insertBefore(frag, nextEl);\n\n      while (targets.length) {\n        self.targets.splice(insertAt, 0, targets.shift());\n        insertAt++;\n      }\n    },\n\n    /**\r\n     * @private\r\n     * @instance\r\n     * @since   3.0.0\r\n     * @param   {mixitup.CommandSort} sortCommandA\r\n     * @param   {mixitup.CommandSort} sortCommandB\r\n     * @return  {boolean}\r\n     */\n    willSort: function willSort(sortCommandA, sortCommandB) {\n      var self = this,\n          result = false;\n\n      if (self.config.behavior.liveSort || sortCommandA.order === 'random' || sortCommandA.attribute !== sortCommandB.attribute || sortCommandA.order !== sortCommandB.order || sortCommandA.collection !== sortCommandB.collection || sortCommandA.next === null && sortCommandB.next || sortCommandA.next && sortCommandB.next === null) {\n        result = true;\n      } else if (sortCommandA.next && sortCommandB.next) {\n        result = self.willSort(sortCommandA.next, sortCommandB.next);\n      } else {\n        result = false;\n      }\n\n      return self.callFilters('resultWillSort', result, arguments);\n    },\n\n    /**\r\n     * A shorthand method for `.filter('all')`. Shows all targets in the container.\r\n     *\r\n     * @example\r\n     *\r\n     * .show()\r\n     *\r\n     * @example <caption>Example: Showing all targets</caption>\r\n     *\r\n     * mixer.show()\r\n     *     .then(function(state) {\r\n     *         console.log(state.totalShow === state.totalTargets); // true\r\n     *     });\r\n     *\r\n     * @public\r\n     * @instance\r\n     * @since       3.0.0\r\n     * @return      {Promise.<mixitup.State>}\r\n     */\n    show: function show() {\n      var self = this;\n      return self.filter('all');\n    },\n\n    /**\r\n     * A shorthand method for `.filter('none')`. Hides all targets in the container.\r\n     *\r\n     * @example\r\n     *\r\n     * .hide()\r\n     *\r\n     * @example <caption>Example: Hiding all targets</caption>\r\n     *\r\n     * mixer.hide()\r\n     *     .then(function(state) {\r\n     *         console.log(state.totalShow === 0); // true\r\n     *         console.log(state.totalHide === state.totalTargets); // true\r\n     *     });\r\n     *\r\n     * @public\r\n     * @instance\r\n     * @since       3.0.0\r\n     * @return      {Promise.<mixitup.State>}\r\n     */\n    hide: function hide() {\n      var self = this;\n      return self.filter('none');\n    },\n\n    /**\r\n     * Returns a boolean indicating whether or not a MixItUp operation is\r\n     * currently in progress.\r\n     *\r\n     * @example\r\n     *\r\n     * .isMixing()\r\n     *\r\n     * @example <caption>Example: Checking the status of a mixer</caption>\r\n     *\r\n     * mixer.sort('random', function() {\r\n     *     console.log(mixer.isMixing()) // false\r\n     * });\r\n     *\r\n     * console.log(mixer.isMixing()) // true\r\n     *\r\n     * @public\r\n     * @instance\r\n     * @since   2.0.0\r\n     * @return  {boolean}\r\n     */\n    isMixing: function isMixing() {\n      var self = this;\n      return self.isBusy;\n    },\n\n    /**\r\n     * Filters all targets in the container by a provided selector string, or the values `'all'`\r\n     * or `'none'`. Only targets matching the selector will be shown.\r\n     *\r\n     * @example\r\n     *\r\n     * .filter(selector [, animate] [, callback])\r\n     *\r\n     * @example <caption>Example 1: Filtering targets by a class selector</caption>\r\n     *\r\n     * mixer.filter('.category-a')\r\n     *     .then(function(state) {\r\n     *         console.log(state.totalShow === containerEl.querySelectorAll('.category-a').length); // true\r\n     *     });\r\n     *\r\n     * @example <caption>Example 2: Filtering targets by an attribute selector</caption>\r\n     *\r\n     * mixer.filter('[data-category~=\"a\"]')\r\n     *     .then(function(state) {\r\n     *         console.log(state.totalShow === containerEl.querySelectorAll('[data-category~=\"a\"]').length); // true\r\n     *     });\r\n     *\r\n     * @example <caption>Example 3: Filtering targets by a compound selector</caption>\r\n     *\r\n     * // Show only those targets with the classes 'category-a' AND 'category-b'\r\n     *\r\n     * mixer.filter('.category-a.category-c')\r\n     *     .then(function(state) {\r\n     *         console.log(state.totalShow === containerEl.querySelectorAll('.category-a.category-c').length); // true\r\n     *     });\r\n     *\r\n     * @example <caption>Example 4: Filtering via an element collection</caption>\r\n     *\r\n     * var collection = Array.from(container.querySelectorAll('.mix'));\r\n     *\r\n     * console.log(collection.length); // 34\r\n     *\r\n     * // Filter the collection manually using Array.prototype.filter\r\n     *\r\n     * var filtered = collection.filter(function(target) {\r\n     *    return parseInt(target.getAttribute('data-price')) > 10;\r\n     * });\r\n     *\r\n     * console.log(filtered.length); // 22\r\n     *\r\n     * // Pass the filtered collection to MixItUp\r\n     *\r\n     * mixer.filter(filtered)\r\n     *    .then(function(state) {\r\n     *        console.log(state.activeFilter.collection.length === 22); // true\r\n     *    });\r\n     *\r\n     * @public\r\n     * @instance\r\n     * @since       2.0.0\r\n     * @param       {(string|HTMLElement|Array.<HTMLElement>)} selector\r\n     *      Any valid CSS selector (i.e. `'.category-a'`), or the values `'all'` or `'none'`. The filter method also accepts a reference to single target element or a collection of target elements to show.\r\n     * @param       {boolean}   [animate=true]\r\n     *      An optional boolean dictating whether the operation should animate, or occur syncronously with no animation. `true` by default.\r\n     * @param       {function}  [callback=null]\r\n     *      An optional callback function to be invoked after the operation has completed.\r\n     * @return      {Promise.<mixitup.State>}\r\n     *      A promise resolving with the current state object.\r\n     */\n    filter: function filter() {\n      var self = this,\n          instruction = self.parseFilterArgs(arguments);\n      return self.multimix({\n        filter: instruction.command\n      }, instruction.animate, instruction.callback);\n    },\n\n    /**\r\n     * Adds an additional selector to the currently active filter selector, concatenating\r\n     * as per the logic defined in `controls.toggleLogic`.\r\n     *\r\n     * @example\r\n     *\r\n     * .toggleOn(selector [, animate] [, callback])\r\n     *\r\n     * @example <caption>Example: Toggling on a filter selector</caption>\r\n     *\r\n     * console.log(mixer.getState().activeFilter.selector); // '.category-a'\r\n     *\r\n     * mixer.toggleOn('.category-b')\r\n     *     .then(function(state) {\r\n     *         console.log(state.activeFilter.selector); // '.category-a, .category-b'\r\n     *     });\r\n     *\r\n     * @public\r\n     * @instance\r\n     * @since       3.0.0\r\n     * @param       {string}    selector\r\n     *      Any valid CSS selector (i.e. `'.category-a'`)\r\n     * @param       {boolean}   [animate=true]\r\n     *      An optional boolean dictating whether the operation should animate, or occur syncronously with no animation. `true` by default.\r\n     * @param       {function}  [callback=null]\r\n     *      An optional callback function to be invoked after the operation has completed.\r\n     * @return      {Promise.<mixitup.State>}\r\n     *      A promise resolving with the current state object.\r\n     */\n    toggleOn: function toggleOn() {\n      var self = this,\n          instruction = self.parseFilterArgs(arguments),\n          selector = instruction.command.selector,\n          toggleSelector = '';\n      self.isToggling = true;\n\n      if (self.toggleArray.indexOf(selector) < 0) {\n        self.toggleArray.push(selector);\n      }\n\n      toggleSelector = self.getToggleSelector();\n      return self.multimix({\n        filter: toggleSelector\n      }, instruction.animate, instruction.callback);\n    },\n\n    /**\r\n     * Removes a selector from the active filter selector.\r\n     *\r\n     * @example\r\n     *\r\n     * .toggleOff(selector [, animate] [, callback])\r\n     *\r\n     * @example <caption>Example: Toggling off a filter selector</caption>\r\n     *\r\n     * console.log(mixer.getState().activeFilter.selector); // '.category-a, .category-b'\r\n     *\r\n     * mixer.toggleOff('.category-b')\r\n     *     .then(function(state) {\r\n     *         console.log(state.activeFilter.selector); // '.category-a'\r\n     *     });\r\n     *\r\n     * @public\r\n     * @instance\r\n     * @since       3.0.0\r\n     * @param       {string}    selector\r\n     *      Any valid CSS selector (i.e. `'.category-a'`)\r\n     * @param       {boolean}   [animate=true]\r\n     *      An optional boolean dictating whether the operation should animate, or occur syncronously with no animation. `true` by default.\r\n     * @param       {function}  [callback=null]\r\n     *      An optional callback function to be invoked after the operation has completed.\r\n     * @return      {Promise.<mixitup.State>}\r\n     *      A promise resolving with the current state object.\r\n     */\n    toggleOff: function toggleOff() {\n      var self = this,\n          instruction = self.parseFilterArgs(arguments),\n          selector = instruction.command.selector,\n          selectorIndex = self.toggleArray.indexOf(selector),\n          toggleSelector = '';\n      self.isToggling = true;\n\n      if (selectorIndex > -1) {\n        self.toggleArray.splice(selectorIndex, 1);\n      }\n\n      toggleSelector = self.getToggleSelector();\n      return self.multimix({\n        filter: toggleSelector\n      }, instruction.animate, instruction.callback);\n    },\n\n    /**\r\n     * Sorts all targets in the container according to a provided sort string.\r\n     *\r\n     * @example\r\n     *\r\n     * .sort(sortString [, animate] [, callback])\r\n     *\r\n     * @example <caption>Example 1: Sorting by the default DOM order</caption>\r\n     *\r\n     * // Reverse the default order of the targets\r\n     *\r\n     * mixer.sort('default:desc')\r\n     *     .then(function(state) {\r\n     *         console.log(state.activeSort.attribute === 'default'); // true\r\n     *         console.log(state.activeSort.order === 'desc'); // true\r\n     *     });\r\n     *\r\n     * @example <caption>Example 2: Sorting by a custom data-attribute</caption>\r\n     *\r\n     * // Sort the targets by the value of a `data-published-date` attribute\r\n     *\r\n     * mixer.sort('published-date:asc')\r\n     *     .then(function(state) {\r\n     *         console.log(state.activeSort.attribute === 'published-date'); // true\r\n     *         console.log(state.activeSort.order === 'asc'); // true\r\n     *     });\r\n     *\r\n     * @example <caption>Example 3: Sorting by multiple attributes</caption>\r\n     *\r\n     * // Sort the targets by the value of a `data-published-date` attribute, then by `data-title`\r\n     *\r\n     * mixer.sort('published-date:desc data-title:asc')\r\n     *     .then(function(state) {\r\n     *         console.log(state.activeSort.attribute === 'published-date'); // true\r\n     *         console.log(state.activeSort.order === 'desc'); // true\r\n     *\r\n     *         console.log(state.activeSort.next.attribute === 'title'); // true\r\n     *         console.log(state.activeSort.next.order === 'asc'); // true\r\n     *     });\r\n     *\r\n     * @example <caption>Example 4: Sorting by random</caption>\r\n     *\r\n     * mixer.sort('random')\r\n     *     .then(function(state) {\r\n     *         console.log(state.activeSort.order === 'random') // true\r\n     *     });\r\n     *\r\n     * @example <caption>Example 5: Sorting via an element collection</caption>\r\n     *\r\n     * var collection = Array.from(container.querySelectorAll('.mix'));\r\n     *\r\n     * // Swap the position of two elements in the collection:\r\n     *\r\n     * var temp = collection[1];\r\n     *\r\n     * collection[1] = collection[0];\r\n     * collection[0] = temp;\r\n     *\r\n     * // Pass the sorted collection to MixItUp\r\n     *\r\n     * mixer.sort(collection)\r\n     *     .then(function(state) {\r\n     *         console.log(state.targets[0] === collection[0]); // true\r\n     *     });\r\n     *\r\n     * @public\r\n     * @instance\r\n     * @since       2.0.0\r\n     * @param       {(string|Array.<HTMLElement>)}    sortString\r\n     *      A valid sort string (e.g. `'default'`, `'published-date:asc'`, or `'random'`). The sort method also accepts an array of all target elements in a user-defined order.\r\n     * @param       {boolean}   [animate=true]\r\n     *      An optional boolean dictating whether the operation should animate, or occur syncronously with no animation. `true` by default.\r\n     * @param       {function}  [callback=null]\r\n     *      An optional callback function to be invoked after the operation has completed.\r\n     * @return      {Promise.<mixitup.State>}\r\n     *      A promise resolving with the current state object.\r\n     */\n    sort: function sort() {\n      var self = this,\n          instruction = self.parseSortArgs(arguments);\n      return self.multimix({\n        sort: instruction.command\n      }, instruction.animate, instruction.callback);\n    },\n\n    /**\r\n     * Changes the layout of the container by adding, removing or updating a\r\n     * layout-specific class name. If `animation.animateResizetargets` is\r\n     * enabled, MixItUp will attempt to gracefully animate the width, height,\r\n     * and position of targets between layout states.\r\n     *\r\n     * @example\r\n     *\r\n     * .changeLayout(containerClassName [, animate] [, callback])\r\n     *\r\n     * @example <caption>Example 1: Adding a new class name to the container</caption>\r\n     *\r\n     * mixer.changeLayout('container-list')\r\n     *      .then(function(state) {\r\n     *          console.log(state.activeContainerClass === 'container-list'); // true\r\n     *      });\r\n     *\r\n     * @example <caption>Example 2: Removing a previously added class name from the container</caption>\r\n     *\r\n     * mixer.changeLayout('')\r\n     *      .then(function(state) {\r\n     *          console.log(state.activeContainerClass === ''); // true\r\n     *      });\r\n     *\r\n     * @public\r\n     * @instance\r\n     * @since       2.0.0\r\n     * @param       {string}    containerClassName\r\n     *      A layout-specific class name to add to the container.\r\n     * @param       {boolean}   [animate=true]\r\n     *      An optional boolean dictating whether the operation should animate, or occur syncronously with no animation. `true` by default.\r\n     * @param       {function}  [callback=null]\r\n     *      An optional callback function to be invoked after the operation has completed.\r\n     * @return      {Promise.<mixitup.State>}\r\n     *      A promise resolving with the current state object.\r\n     */\n    changeLayout: function changeLayout() {\n      var self = this,\n          instruction = self.parseChangeLayoutArgs(arguments);\n      return self.multimix({\n        changeLayout: instruction.command\n      }, instruction.animate, instruction.callback);\n    },\n\n    /**\r\n     * Updates the contents and order of the container to reflect the provided dataset,\r\n     * if the dataset API is in use.\r\n     *\r\n     * The dataset API is designed for use in API-driven JavaScript applications, and\r\n     * can be used instead of DOM-based methods such as `.filter()`, `.sort()`,\r\n     * `.insert()`, etc. When used, insertion, removal, sorting and pagination can be\r\n     * achieved purely via changes to your data model, without the uglyness of having\r\n     * to interact with or query the DOM directly.\r\n     *\r\n     * @example\r\n     *\r\n     * .dataset(dataset [, animate] [, callback])\r\n     *\r\n     * @example <caption>Example 1: Rendering a dataset</caption>\r\n     *\r\n     * var myDataset = [\r\n     *     {id: 1, ...},\r\n     *     {id: 2, ...},\r\n     *     {id: 3, ...}\r\n     * ];\r\n     *\r\n     * mixer.dataset(myDataset)\r\n     *     .then(function(state) {\r\n     *         console.log(state.totalShow === 3); // true\r\n     *     });\r\n     *\r\n     * @example <caption>Example 2: Sorting a dataset</caption>\r\n     *\r\n     * // Create a new dataset in reverse order\r\n     *\r\n     * var newDataset = myDataset.slice().reverse();\r\n     *\r\n     * mixer.dataset(newDataset)\r\n     *     .then(function(state) {\r\n     *         console.log(state.activeDataset[0] === myDataset[2]); // true\r\n     *     });\r\n     *\r\n     * @example <caption>Example 3: Removing an item from the dataset</caption>\r\n     *\r\n     * console.log(myDataset.length); // 3\r\n     *\r\n     * // Create a new dataset with the last item removed.\r\n     *\r\n     * var newDataset = myDataset.slice().pop();\r\n     *\r\n     * mixer.dataset(newDataset)\r\n     *     .then(function(state) {\r\n     *         console.log(state.totalShow === 2); // true\r\n     *     });\r\n     *\r\n     * @public\r\n     * @instance\r\n     * @since       3.0.0\r\n     * @param       {Array.<object>}    dataset\r\n     *      An array of objects, each one representing the underlying data model of a target to be rendered.\r\n     * @param       {boolean}           [animate=true]\r\n     *      An optional boolean dictating whether the operation should animate, or occur syncronously with no animation. `true` by default.\r\n     * @param       {function}          [callback=null]\r\n     *      An optional callback function to be invoked after the operation has completed.\r\n     * @return      {Promise.<mixitup.State>}\r\n     *      A promise resolving with the current state object.\r\n     */\n    dataset: function dataset() {\n      var self = this,\n          instruction = self.parseDatasetArgs(arguments),\n          operation = null,\n          queueItem = null,\n          animate = false;\n      self.callActions('beforeDataset', arguments);\n\n      if (!self.isBusy) {\n        if (instruction.callback) self.userCallback = instruction.callback;\n        animate = instruction.animate ^ self.config.animation.enable ? instruction.animate : self.config.animation.enable;\n        operation = self.getDataOperation(instruction.command.dataset);\n        return self.goMix(animate, operation);\n      } else {\n        queueItem = new _mixitup.QueueItem();\n        queueItem.args = arguments;\n        queueItem.instruction = instruction;\n        return self.queueMix(queueItem);\n      }\n    },\n\n    /**\r\n     * Performs simultaneous `filter`, `sort`, `insert`, `remove` and `changeLayout`\r\n     * operations as requested.\r\n     *\r\n     * @example\r\n     *\r\n     * .multimix(multimixCommand [, animate] [, callback])\r\n     *\r\n     * @example <caption>Example 1: Performing simultaneous filtering and sorting</caption>\r\n     *\r\n     * mixer.multimix({\r\n     *     filter: '.category-b',\r\n     *     sort: 'published-date:desc'\r\n     * })\r\n     *     .then(function(state) {\r\n     *         console.log(state.activeFilter.selector === '.category-b'); // true\r\n     *         console.log(state.activeSort.attribute === 'published-date'); // true\r\n     *     });\r\n     *\r\n     * @example <caption>Example 2: Performing simultaneous sorting, insertion, and removal</caption>\r\n     *\r\n     * console.log(mixer.getState().totalShow); // 6\r\n     *\r\n     * // NB: When inserting via `multimix()`, an object should be provided as the value\r\n     * // for the `insert` portion of the command, allowing for a collection of elements\r\n     * // and an insertion index to be specified.\r\n     *\r\n     * mixer.multimix({\r\n     *     sort: 'published-date:desc', // Sort the container, including any new elements\r\n     *     insert: {\r\n     *         collection: [newElementReferenceA, newElementReferenceB], // Add 2 new elements at index 5\r\n     *         index: 5\r\n     *     },\r\n     *     remove: existingElementReference // Remove 1 existing element\r\n     * })\r\n     *     .then(function(state) {\r\n     *         console.log(state.activeSort.attribute === 'published-date'); // true\r\n     *         console.log(state.totalShow === 7); // true\r\n     *     });\r\n     *\r\n     * @public\r\n     * @instance\r\n     * @since       2.0.0\r\n     * @param       {object}    multimixCommand\r\n     *      An object containing one or more things to do\r\n     * @param       {boolean}   [animate=true]\r\n     *      An optional boolean dictating whether the operation should animate, or occur syncronously with no animation. `true` by default.\r\n     * @param       {function}  [callback=null]\r\n     *      An optional callback function to be invoked after the operation has completed.\r\n     * @return      {Promise.<mixitup.State>}\r\n     *      A promise resolving with the current state object.\r\n     */\n    multimix: function multimix() {\n      var self = this,\n          operation = null,\n          animate = false,\n          queueItem = null,\n          instruction = self.parseMultimixArgs(arguments);\n      self.callActions('beforeMultimix', arguments);\n\n      if (!self.isBusy) {\n        operation = self.getOperation(instruction.command);\n\n        if (self.config.controls.enable) {\n          // Update controls for API calls\n          if (instruction.command.filter && !self.isToggling) {\n            // As we are not toggling, reset the toggle array\n            // so new filter overrides existing toggles\n            self.toggleArray.length = 0;\n            self.buildToggleArray(operation.command);\n          }\n\n          if (self.queue.length < 1) {\n            self.updateControls(operation.command);\n          }\n        }\n\n        if (instruction.callback) self.userCallback = instruction.callback; // Always allow the instruction to override the instance setting\n\n        animate = instruction.animate ^ self.config.animation.enable ? instruction.animate : self.config.animation.enable;\n        self.callFilters('operationMultimix', operation, arguments);\n        return self.goMix(animate, operation);\n      } else {\n        queueItem = new _mixitup.QueueItem();\n        queueItem.args = arguments;\n        queueItem.instruction = instruction;\n        queueItem.triggerElement = self.lastClicked;\n        queueItem.isToggling = self.isToggling;\n        return self.queueMix(queueItem);\n      }\n    },\n\n    /**\r\n     * @private\r\n     * @instance\r\n     * @since   3.0.0\r\n     * @param   {object}            multimixCommand\r\n     * @param   {boolean}           [isPreFetch]\r\n     *      An optional boolean indicating that the operation is being pre-fetched for execution at a later time.\r\n     * @return  {Operation|null}\r\n     */\n    getOperation: function getOperation(multimixCommand) {\n      var self = this,\n          sortCommand = multimixCommand.sort,\n          filterCommand = multimixCommand.filter,\n          changeLayoutCommand = multimixCommand.changeLayout,\n          removeCommand = multimixCommand.remove,\n          insertCommand = multimixCommand.insert,\n          operation = new _mixitup.Operation();\n      operation = self.callFilters('operationUnmappedGetOperation', operation, arguments);\n      operation.id = h.randomHex();\n      operation.command = multimixCommand;\n      operation.startState = self.state;\n      operation.triggerElement = self.lastClicked;\n\n      if (self.isBusy) {\n        if (self.config.debug.showWarnings) {\n          console.warn(_mixitup.messages.warningGetOperationInstanceBusy());\n        }\n\n        return null;\n      }\n\n      if (insertCommand) {\n        self.insertTargets(insertCommand, operation);\n      }\n\n      if (removeCommand) {\n        operation.toRemove = removeCommand.targets;\n      }\n\n      operation.startSort = operation.newSort = operation.startState.activeSort;\n      operation.startOrder = operation.newOrder = self.targets;\n\n      if (sortCommand) {\n        operation.startSort = operation.startState.activeSort;\n        operation.newSort = sortCommand;\n        operation.willSort = self.willSort(sortCommand, operation.startState.activeSort);\n\n        if (operation.willSort) {\n          self.sortOperation(operation);\n        }\n      }\n\n      operation.startFilter = operation.startState.activeFilter;\n\n      if (filterCommand) {\n        operation.newFilter = filterCommand;\n      } else {\n        operation.newFilter = h.extend(new _mixitup.CommandFilter(), operation.startFilter);\n      }\n\n      if (operation.newFilter.selector === 'all') {\n        operation.newFilter.selector = self.config.selectors.target;\n      } else if (operation.newFilter.selector === 'none') {\n        operation.newFilter.selector = '';\n      }\n\n      self.filterOperation(operation);\n      operation.startContainerClassName = operation.startState.activeContainerClassName;\n\n      if (changeLayoutCommand) {\n        operation.newContainerClassName = changeLayoutCommand.containerClassName;\n\n        if (operation.newContainerClassName !== operation.startContainerClassName) {\n          operation.willChangeLayout = true;\n        }\n      } else {\n        operation.newContainerClassName = operation.startContainerClassName;\n      }\n\n      if (self.config.animation.enable) {\n        // Populate the operation's position data\n        self.getStartMixData(operation);\n        self.setInter(operation);\n        operation.docState = h.getDocumentState(self.dom.document);\n        self.getInterMixData(operation);\n        self.setFinal(operation);\n        self.getFinalMixData(operation);\n        self.parseEffects();\n        operation.hasEffect = self.hasEffect();\n        self.getTweenData(operation);\n      }\n\n      if (operation.willSort) {\n        self.targets = operation.newOrder;\n      }\n\n      operation.newState = self.buildState(operation);\n      return self.callFilters('operationMappedGetOperation', operation, arguments);\n    },\n\n    /**\r\n     * Renders a previously created operation at a specific point in its path, as\r\n     * determined by a multiplier between 0 and 1.\r\n     *\r\n     * @example\r\n     * .tween(operation, multiplier)\r\n     *\r\n     * @private\r\n     * @instance\r\n     * @since   3.0.0\r\n     * @param   {mixitup.Operation}     operation\r\n     *      An operation object created via the `getOperation` method\r\n     *\r\n     * @param   {Float}                 multiplier\r\n     *      Any number between 0 and 1 representing the percentage complete of the operation\r\n     * @return  {void}\r\n     */\n    tween: function tween(operation, multiplier) {\n      var target = null,\n          posData = null,\n          toHideIndex = -1,\n          i = -1;\n      multiplier = Math.min(multiplier, 1);\n      multiplier = Math.max(multiplier, 0);\n\n      for (i = 0; target = operation.show[i]; i++) {\n        posData = operation.showPosData[i];\n        target.applyTween(posData, multiplier);\n      }\n\n      for (i = 0; target = operation.hide[i]; i++) {\n        if (target.isShown) {\n          target.hide();\n        }\n\n        if ((toHideIndex = operation.toHide.indexOf(target)) > -1) {\n          posData = operation.toHidePosData[toHideIndex];\n\n          if (!target.isShown) {\n            target.show();\n          }\n\n          target.applyTween(posData, multiplier);\n        }\n      }\n    },\n\n    /**\r\n     * Inserts one or more new target elements into the container at a specified\r\n     * index.\r\n     *\r\n     * To be indexed as targets, new elements must match the `selectors.target`\r\n     * selector (`'.mix'` by default).\r\n     *\r\n     * @example\r\n     *\r\n     * .insert(newElements [, index] [, animate], [, callback])\r\n     *\r\n     * @example <caption>Example 1: Inserting a single element via reference</caption>\r\n     *\r\n     * console.log(mixer.getState().totalShow); // 0\r\n     *\r\n     * // Create a new element\r\n     *\r\n     * var newElement = document.createElement('div');\r\n     * newElement.classList.add('mix');\r\n     *\r\n     * mixer.insert(newElement)\r\n     *     .then(function(state) {\r\n     *         console.log(state.totalShow === 1); // true\r\n     *     });\r\n     *\r\n     * @example <caption>Example 2: Inserting a single element via HTML string</caption>\r\n     *\r\n     * console.log(mixer.getState().totalShow); // 1\r\n     *\r\n     * // Create a new element via reference\r\n     *\r\n     * var newElementHtml = '&lt;div class=\"mix\"&gt;&lt;/div&gt;';\r\n     *\r\n     * // Create and insert the new element at index 1\r\n     *\r\n     * mixer.insert(newElementHtml, 1)\r\n     *     .then(function(state) {\r\n     *         console.log(state.totalShow === 2); // true\r\n     *         console.log(state.show[1].outerHTML === newElementHtml); // true\r\n     *     });\r\n     *\r\n     * @example <caption>Example 3: Inserting multiple elements via reference</caption>\r\n     *\r\n     * console.log(mixer.getState().totalShow); // 2\r\n     *\r\n     * // Create an array of new elements to insert.\r\n     *\r\n     * var newElement1 = document.createElement('div');\r\n     * var newElement2 = document.createElement('div');\r\n     *\r\n     * newElement1.classList.add('mix');\r\n     * newElement2.classList.add('mix');\r\n     *\r\n     * var newElementsCollection = [newElement1, newElement2];\r\n     *\r\n     * // Insert the new elements starting at index 1\r\n     *\r\n     * mixer.insert(newElementsCollection, 1)\r\n     *     .then(function(state) {\r\n     *         console.log(state.totalShow === 4); // true\r\n     *         console.log(state.show[1] === newElement1); // true\r\n     *         console.log(state.show[2] === newElement2); // true\r\n     *     });\r\n     *\r\n     * @example <caption>Example 4: Inserting a jQuery collection object containing one or more elements</caption>\r\n     *\r\n     * console.log(mixer.getState().totalShow); // 4\r\n     *\r\n     * var $newElement = $('&lt;div class=\"mix\"&gt;&lt;/div&gt;');\r\n     *\r\n     * // Insert the new elements starting at index 3\r\n     *\r\n     * mixer.insert($newElement, 3)\r\n     *     .then(function(state) {\r\n     *         console.log(state.totalShow === 5); // true\r\n     *         console.log(state.show[3] === $newElement[0]); // true\r\n     *     });\r\n     *\r\n     * @public\r\n     * @instance\r\n     * @since       2.0.0\r\n     * @param       {(HTMLElement|Array.<HTMLElement>|string)}    newElements\r\n     *      A reference to a single element to insert, an array-like collection of elements, or an HTML string representing a single element.\r\n     * @param       {number}    index=0\r\n     *      The index at which to insert the new element(s). `0` by default.\r\n     * @param       {boolean}   [animate=true]\r\n     *      An optional boolean dictating whether the operation should animate, or occur syncronously with no animation. `true` by default.\r\n     * @param       {function}  [callback=null]\r\n     *      An optional callback function to be invoked after the operation has completed.\r\n     * @return      {Promise.<mixitup.State>}\r\n     *      A promise resolving with the current state object.\r\n     */\n    insert: function insert() {\n      var self = this,\n          args = self.parseInsertArgs(arguments);\n      return self.multimix({\n        insert: args.command\n      }, args.animate, args.callback);\n    },\n\n    /**\r\n     * Inserts one or more new elements before a provided reference element.\r\n     *\r\n     * @example\r\n     *\r\n     * .insertBefore(newElements, referenceElement [, animate] [, callback])\r\n     *\r\n     * @example <caption>Example: Inserting a new element before a reference element</caption>\r\n     *\r\n     * // An existing reference element is chosen at index 2\r\n     *\r\n     * var referenceElement = mixer.getState().show[2];\r\n     *\r\n     * // Create a new element\r\n     *\r\n     * var newElement = document.createElement('div');\r\n     * newElement.classList.add('mix');\r\n     *\r\n     * mixer.insertBefore(newElement, referenceElement)\r\n     *     .then(function(state) {\r\n     *         // The new element is inserted into the container at index 2, before the reference element\r\n     *\r\n     *         console.log(state.show[2] === newElement); // true\r\n     *\r\n     *         // The reference element is now at index 3\r\n     *\r\n     *         console.log(state.show[3] === referenceElement); // true\r\n     *     });\r\n     *\r\n     * @public\r\n     * @instance\r\n     * @since       3.0.0\r\n     * @param       {(HTMLElement|Array.<HTMLElement>|string)}    newElements\r\n     *      A reference to a single element to insert, an array-like collection of elements, or an HTML string representing a single element.\r\n     * @param       {HTMLElement}    referenceElement\r\n     *      A reference to an existing element in the container to insert new elements before.\r\n     *@param       {boolean}   [animate=true]\r\n     *      An optional boolean dictating whether the operation should animate, or occur syncronously with no animation. `true` by default.\r\n     * @param       {function}  [callback=null]\r\n     *      An optional callback function to be invoked after the operation has completed.\r\n     * @return      {Promise.<mixitup.State>}\r\n     *      A promise resolving with the current state object.\r\n     */\n    insertBefore: function insertBefore() {\n      var self = this,\n          args = self.parseInsertArgs(arguments);\n      return self.insert(args.command.collection, 'before', args.command.sibling, args.animate, args.callback);\n    },\n\n    /**\r\n     * Inserts one or more new elements after a provided reference element.\r\n     *\r\n     * @example\r\n     *\r\n     * .insertAfter(newElements, referenceElement [, animate] [, callback])\r\n     *\r\n     * @example <caption>Example: Inserting a new element after a reference element</caption>\r\n     *\r\n     * // An existing reference element is chosen at index 2\r\n     *\r\n     * var referenceElement = mixer.getState().show[2];\r\n     *\r\n     * // Create a new element\r\n     *\r\n     * var newElement = document.createElement('div');\r\n     * newElement.classList.add('mix');\r\n     *\r\n     * mixer.insertAfter(newElement, referenceElement)\r\n     *     .then(function(state) {\r\n     *         // The new element is inserted into the container at index 3, after the reference element\r\n     *\r\n     *         console.log(state.show[3] === newElement); // true\r\n     *     });\r\n     *\r\n     * @public\r\n     * @instance\r\n     * @since       3.0.0\r\n     * @param       {(HTMLElement|Array.<HTMLElement>|string)}    newElements\r\n     *      A reference to a single element to insert, an array-like collection of elements, or an HTML string representing a single element.\r\n     * @param       {HTMLElement}    referenceElement\r\n     *      A reference to an existing element in the container to insert new elements after.\r\n     * @param       {boolean}   [animate=true]\r\n     *      An optional boolean dictating whether the operation should animate, or occur syncronously with no animation. `true` by default.\r\n     * @param       {function}  [callback=null]\r\n     *      An optional callback function to be invoked after the operation has completed.\r\n     * @return      {Promise.<mixitup.State>}\r\n     *      A promise resolving with the current state object.\r\n     */\n    insertAfter: function insertAfter() {\n      var self = this,\n          args = self.parseInsertArgs(arguments);\n      return self.insert(args.command.collection, 'after', args.command.sibling, args.animate, args.callback);\n    },\n\n    /**\r\n     * Inserts one or more new elements into the container before all existing targets.\r\n     *\r\n     * @example\r\n     *\r\n     * .prepend(newElements [,animate] [,callback])\r\n     *\r\n     * @example <caption>Example: Prepending a new element</caption>\r\n     *\r\n     * // Create a new element\r\n     *\r\n     * var newElement = document.createElement('div');\r\n     * newElement.classList.add('mix');\r\n     *\r\n     * // Insert the element into the container\r\n     *\r\n     * mixer.prepend(newElement)\r\n     *     .then(function(state) {\r\n     *         console.log(state.show[0] === newElement); // true\r\n     *     });\r\n     *\r\n     * @public\r\n     * @instance\r\n     * @since       3.0.0\r\n     * @param       {(HTMLElement|Array.<HTMLElement>|string)}    newElements\r\n     *      A reference to a single element to insert, an array-like collection of elements, or an HTML string representing a single element.\r\n     * @param       {boolean}   [animate=true]\r\n     *      An optional boolean dictating whether the operation should animate, or occur syncronously with no animation. `true` by default.\r\n     * @param       {function}  [callback=null]\r\n     *      An optional callback function to be invoked after the operation has completed.\r\n     * @return      {Promise.<mixitup.State>}\r\n     *      A promise resolving with the current state object.\r\n     */\n    prepend: function prepend() {\n      var self = this,\n          args = self.parseInsertArgs(arguments);\n      return self.insert(0, args.command.collection, args.animate, args.callback);\n    },\n\n    /**\r\n     * Inserts one or more new elements into the container after all existing targets.\r\n     *\r\n     * @example\r\n     *\r\n     * .append(newElements [,animate] [,callback])\r\n     *\r\n     * @example <caption>Example: Appending a new element</caption>\r\n     *\r\n     * // Create a new element\r\n     *\r\n     * var newElement = document.createElement('div');\r\n     * newElement.classList.add('mix');\r\n     *\r\n     * // Insert the element into the container\r\n     *\r\n     * mixer.append(newElement)\r\n     *     .then(function(state) {\r\n     *         console.log(state.show[state.show.length - 1] === newElement); // true\r\n     *     });\r\n     *\r\n     * @public\r\n     * @instance\r\n     * @since       3.0.0\r\n     * @param       {(HTMLElement|Array.<HTMLElement>|string)}    newElements\r\n     *      A reference to a single element to insert, an array-like collection of elements, or an HTML string representing a single element.\r\n     * @param       {boolean}   [animate=true]\r\n     *      An optional boolean dictating whether the operation should animate, or occur syncronously with no animation. `true` by default.\r\n     * @param       {function}  [callback=null]\r\n     *      An optional callback function to be invoked after the operation has completed.\r\n     * @return      {Promise.<mixitup.State>}\r\n     *      A promise resolving with the current state object.\r\n     */\n    append: function append() {\n      var self = this,\n          args = self.parseInsertArgs(arguments);\n      return self.insert(self.state.totalTargets, args.command.collection, args.animate, args.callback);\n    },\n\n    /**\r\n     * Removes one or more existing target elements from the container.\r\n     *\r\n     * @example\r\n     *\r\n     * .remove(elements [, animate] [, callback])\r\n     *\r\n     * @example <caption>Example 1: Removing an element by reference</caption>\r\n     *\r\n     * var elementToRemove = containerEl.firstElementChild;\r\n     *\r\n     * mixer.remove(elementToRemove)\r\n     *      .then(function(state) {\r\n     *          console.log(state.targets.indexOf(elementToRemove) === -1); // true\r\n     *      });\r\n     *\r\n     * @example <caption>Example 2: Removing a collection of elements by reference</caption>\r\n     *\r\n     * var elementsToRemove = containerEl.querySelectorAll('.category-a');\r\n     *\r\n     * console.log(elementsToRemove.length) // 3\r\n     *\r\n     * mixer.remove(elementsToRemove)\r\n     *      .then(function() {\r\n     *          console.log(containerEl.querySelectorAll('.category-a').length); // 0\r\n     *      });\r\n     *\r\n     * @example <caption>Example 3: Removing one or more elements by selector</caption>\r\n     *\r\n     * mixer.remove('.category-a')\r\n     *      .then(function() {\r\n     *          console.log(containerEl.querySelectorAll('.category-a').length); // 0\r\n     *      });\r\n     *\r\n     * @example <caption>Example 4: Removing an element by index</caption>\r\n     *\r\n     * console.log(mixer.getState.totalShow); // 4\r\n     *\r\n     * // Remove the element at index 3\r\n     *\r\n     * mixer.remove(3)\r\n     *      .then(function(state) {\r\n     *          console.log(state.totalShow); // 3\r\n     *          console.log(state.show[3]); // undefined\r\n     *      });\r\n     *\r\n     *\r\n     * @public\r\n     * @instance\r\n     * @since       3.0.0\r\n     * @param       {(HTMLElement|Array.<HTMLElement>|string|number)}    elements\r\n     *      A reference to a single element to remove, an array-like collection of elements, a selector string, or the index of an element to remove.\r\n     * @param       {boolean}   [animate=true]\r\n     *      An optional boolean dictating whether the operation should animate, or occur syncronously with no animation. `true` by default.\r\n     * @param       {function}  [callback=null]\r\n     *      An optional callback function to be invoked after the operation has completed.\r\n     * @return      {Promise.<mixitup.State>}\r\n     *      A promise resolving with the current state object.\r\n     */\n    remove: function remove() {\n      var self = this,\n          args = self.parseRemoveArgs(arguments);\n      return self.multimix({\n        remove: args.command\n      }, args.animate, args.callback);\n    },\n\n    /**\r\n     * Retrieves the the value of any property or sub-object within the current\r\n     * mixitup configuration, or the whole configuration object.\r\n     *\r\n     * @example\r\n     *\r\n     * .getConfig([stringKey])\r\n     *\r\n     * @example <caption>Example 1: retrieve the entire configuration object</caption>\r\n     *\r\n     * var config = mixer.getConfig(); // Config { ... }\r\n     *\r\n     * @example <caption>Example 2: retrieve a named sub-object of configuration object</caption>\r\n     *\r\n     * var animation = mixer.getConfig('animation'); // ConfigAnimation { ... }\r\n     *\r\n     * @example <caption>Example 3: retrieve a value of configuration object via a dot-notation string key</caption>\r\n     *\r\n     * var effects = mixer.getConfig('animation.effects'); // 'fade scale'\r\n     *\r\n     * @public\r\n     * @instance\r\n     * @since       2.0.0\r\n     * @param       {string}    [stringKey]    A \"dot-notation\" string key\r\n     * @return      {*}\r\n     */\n    getConfig: function getConfig(stringKey) {\n      var self = this,\n          value = null;\n\n      if (!stringKey) {\n        value = self.config;\n      } else {\n        value = h.getProperty(self.config, stringKey);\n      }\n\n      return self.callFilters('valueGetConfig', value, arguments);\n    },\n\n    /**\r\n     * Updates the configuration of the mixer, after it has been instantiated.\r\n     *\r\n     * See the Configuration Object documentation for a full list of avilable\r\n     * configuration options.\r\n     *\r\n     * @example\r\n     *\r\n     * .configure(config)\r\n     *\r\n     * @example <caption>Example 1: Updating animation options</caption>\r\n     *\r\n     * mixer.configure({\r\n     *     animation: {\r\n     *         effects: 'fade translateX(-100%)',\r\n     *         duration: 300\r\n     *     }\r\n     * });\r\n     *\r\n     * @example <caption>Example 2: Removing a callback after it has been set</caption>\r\n     *\r\n     * var mixer;\r\n     *\r\n     * function handleMixEndOnce() {\r\n     *     // Do something ..\r\n     *\r\n     *     // Then nullify the callback\r\n     *\r\n     *     mixer.configure({\r\n     *         callbacks: {\r\n     *             onMixEnd: null\r\n     *         }\r\n     *     });\r\n     * };\r\n     *\r\n     * // Instantiate a mixer with a callback defined\r\n     *\r\n     * mixer = mixitup(containerEl, {\r\n     *     callbacks: {\r\n     *         onMixEnd: handleMixEndOnce\r\n     *     }\r\n     * });\r\n     *\r\n     * @public\r\n     * @instance\r\n     * @since       3.0.0\r\n     * @param       {object}    config\r\n     *      An object containing one of more configuration options.\r\n     * @return      {void}\r\n     */\n    configure: function configure(config) {\n      var self = this;\n      self.callActions('beforeConfigure', arguments);\n      h.extend(self.config, config, true, true);\n      self.callActions('afterConfigure', arguments);\n    },\n\n    /**\r\n     * Returns an object containing information about the current state of the\r\n     * mixer. See the State Object documentation for more information.\r\n     *\r\n     * NB: State objects are immutable and should therefore be regenerated\r\n     * after any operation.\r\n     *\r\n     * @example\r\n     *\r\n     * .getState();\r\n     *\r\n     * @example <caption>Example: Retrieving a state object</caption>\r\n     *\r\n     * var state = mixer.getState();\r\n     *\r\n     * console.log(state.totalShow + 'targets are currently shown');\r\n     *\r\n     * @public\r\n     * @instance\r\n     * @since       2.0.0\r\n     * @return      {mixitup.State} An object reflecting the current state of the mixer.\r\n     */\n    getState: function getState() {\n      var self = this,\n          state = null;\n      state = new _mixitup.State();\n      h.extend(state, self.state);\n      h.freeze(state);\n      return self.callFilters('stateGetState', state, arguments);\n    },\n\n    /**\r\n     * Forces the re-indexing all targets within the container.\r\n     *\r\n     * This should only be used if some other piece of code in your application\r\n     * has manipulated the contents of your container, which should be avoided.\r\n     *\r\n     * If you need to add or remove target elements from the container, use\r\n     * the built-in `.insert()` or `.remove()` methods, and MixItUp will keep\r\n     * itself up to date.\r\n     *\r\n     * @example\r\n     *\r\n     * .forceRefresh()\r\n     *\r\n     * @example <caption>Example: Force refreshing the mixer after external DOM manipulation</caption>\r\n     *\r\n     * console.log(mixer.getState().totalShow); // 3\r\n     *\r\n     * // An element is removed from the container via some external DOM manipulation code:\r\n     *\r\n     * containerEl.removeChild(containerEl.firstElementChild);\r\n     *\r\n     * // The mixer does not know that the number of targets has changed:\r\n     *\r\n     * console.log(mixer.getState().totalShow); // 3\r\n     *\r\n     * mixer.forceRefresh();\r\n     *\r\n     * // After forceRefresh, the mixer is in sync again:\r\n     *\r\n     * console.log(mixer.getState().totalShow); // 2\r\n     *\r\n     * @public\r\n     * @instance\r\n     * @since 2.1.2\r\n     * @return {void}\r\n     */\n    forceRefresh: function forceRefresh() {\n      var self = this;\n      self.indexTargets();\n    },\n\n    /**\r\n     * Forces the re-rendering of all targets when using the Dataset API.\r\n     *\r\n     * By default, targets are only re-rendered when `data.dirtyCheck` is\r\n     * enabled, and an item's data has changed when `dataset()` is called.\r\n     *\r\n     * The `forceRender()` method allows for the re-rendering of all targets\r\n     * in response to some arbitrary event, such as the changing of the target\r\n     * render function.\r\n     *\r\n     * Targets are rendered against their existing data.\r\n     *\r\n     * @example\r\n     *\r\n     * .forceRender()\r\n     *\r\n     * @example <caption>Example: Force render targets after changing the target render function</caption>\r\n     *\r\n     * console.log(container.innerHTML); // ... &lt;span class=\"mix\"&gt;Foo&lt;/span&gt; ...\r\n     *\r\n     * mixer.configure({\r\n     *     render: {\r\n     *         target: (item) => `&lt;a href=\"/${item.slug}/\" class=\"mix\"&gt;${item.title}&lt;/a&gt;`\r\n     *     }\r\n     * });\r\n     *\r\n     * mixer.forceRender();\r\n     *\r\n     * console.log(container.innerHTML); // ... &lt;a href=\"/foo/\" class=\"mix\"&gt;Foo&lt;/a&gt; ...\r\n     *\r\n     * @public\r\n     * @instance\r\n     * @since 3.2.1\r\n     * @return {void}\r\n     */\n    forceRender: function forceRender() {\n      var self = this,\n          target = null,\n          el = null,\n          id = '';\n\n      for (id in self.cache) {\n        target = self.cache[id];\n        el = target.render(target.data);\n\n        if (el !== target.dom.el) {\n          // Update target element reference\n          if (target.isInDom) {\n            target.unbindEvents();\n            self.dom.parent.replaceChild(el, target.dom.el);\n          }\n\n          if (!target.isShown) {\n            el.style.display = 'none';\n          }\n\n          target.dom.el = el;\n\n          if (target.isInDom) {\n            target.bindEvents();\n          }\n        }\n      }\n\n      self.state = self.buildState(self.lastOperation);\n    },\n\n    /**\r\n     * Removes mixitup functionality from the container, unbinds all control\r\n     * event handlers, and deletes the mixer instance from MixItUp's internal\r\n     * cache.\r\n     *\r\n     * This should be performed whenever a mixer's container is removed from\r\n     * the DOM, such as during a page change in a single page application,\r\n     * or React's `componentWillUnmount()`.\r\n     *\r\n     * @example\r\n     *\r\n     * .destroy([cleanUp])\r\n     *\r\n     * @example <caption>Example: Destroying the mixer before removing its container element</caption>\r\n     *\r\n     * mixer.destroy();\r\n     *\r\n     * containerEl.parentElement.removeChild(containerEl);\r\n     *\r\n     * @public\r\n     * @instance\r\n     * @since   2.0.0\r\n     * @param   {boolean}   [cleanUp=false]\r\n     *     An optional boolean dictating whether or not to clean up any inline `display: none;` styling applied to hidden targets.\r\n     * @return  {void}\r\n     */\n    destroy: function destroy(cleanUp) {\n      var self = this,\n          control = null,\n          target = null,\n          i = 0;\n      self.callActions('beforeDestroy', arguments);\n\n      for (i = 0; control = self.controls[i]; i++) {\n        control.removeBinding(self);\n      }\n\n      for (i = 0; target = self.targets[i]; i++) {\n        if (cleanUp) {\n          target.show();\n        }\n\n        target.unbindEvents();\n      }\n\n      if (self.dom.container.id.match(/^MixItUp/)) {\n        self.dom.container.removeAttribute('id');\n      }\n\n      delete _mixitup.instances[self.id];\n      self.callActions('afterDestroy', arguments);\n    }\n  });\n  /**\r\n   * @constructor\r\n   * @memberof    mixitup\r\n   * @private\r\n   * @since       3.0.0\r\n   */\n\n  _mixitup.IMoveData = function () {\n    _mixitup.Base.call(this);\n\n    this.callActions('beforeConstruct');\n    this.posIn = null;\n    this.posOut = null;\n    this.operation = null;\n    this.callback = null;\n    this.statusChange = '';\n    this.duration = -1;\n    this.staggerIndex = -1;\n    this.callActions('afterConstruct');\n    h.seal(this);\n  };\n\n  _mixitup.BaseStatic.call(_mixitup.IMoveData);\n\n  _mixitup.IMoveData.prototype = Object.create(_mixitup.Base.prototype);\n  _mixitup.IMoveData.prototype.constructor = _mixitup.IMoveData;\n  /**\r\n   * @constructor\r\n   * @memberof    mixitup\r\n   * @private\r\n   * @since       3.0.0\r\n   */\n\n  _mixitup.TargetDom = function () {\n    _mixitup.Base.call(this);\n\n    this.callActions('beforeConstruct');\n    this.el = null;\n    this.callActions('afterConstruct');\n    h.seal(this);\n  };\n\n  _mixitup.BaseStatic.call(_mixitup.TargetDom);\n\n  _mixitup.TargetDom.prototype = Object.create(_mixitup.Base.prototype);\n  _mixitup.TargetDom.prototype.constructor = _mixitup.TargetDom;\n  /**\r\n   * @constructor\r\n   * @namespace\r\n   * @memberof    mixitup\r\n   * @private\r\n   * @since       3.0.0\r\n   */\n\n  _mixitup.Target = function () {\n    _mixitup.Base.call(this);\n\n    this.callActions('beforeConstruct');\n    this.id = '';\n    this.sortString = '';\n    this.mixer = null;\n    this.callback = null;\n    this.isShown = false;\n    this.isBound = false;\n    this.isExcluded = false;\n    this.isInDom = false;\n    this.handler = null;\n    this.operation = null;\n    this.data = null;\n    this.dom = new _mixitup.TargetDom();\n    this.callActions('afterConstruct');\n    h.seal(this);\n  };\n\n  _mixitup.BaseStatic.call(_mixitup.Target);\n\n  _mixitup.Target.prototype = Object.create(_mixitup.Base.prototype);\n  h.extend(_mixitup.Target.prototype, {\n    constructor: _mixitup.Target,\n\n    /**\r\n     * Initialises a newly instantiated Target.\r\n     *\r\n     * @private\r\n     * @instance\r\n     * @since   3.0.0\r\n     * @param   {(Element|null)}    el\r\n     * @param   {object}            mixer\r\n     * @param   {object}            [data]\r\n     * @return  {void}\r\n     */\n    init: function init(el, mixer, data) {\n      var self = this,\n          id = '';\n      self.callActions('beforeInit', arguments);\n      self.mixer = mixer;\n\n      if (!el) {\n        // If no element is provided, render it\n        el = self.render(data);\n      }\n\n      self.cacheDom(el);\n      self.bindEvents();\n\n      if (self.dom.el.style.display !== 'none') {\n        self.isShown = true;\n      }\n\n      if (data && mixer.config.data.uidKey) {\n        if (typeof (id = data[mixer.config.data.uidKey]) === 'undefined' || id.toString().length < 1) {\n          throw new TypeError(_mixitup.messages.errorDatasetInvalidUidKey({\n            uidKey: mixer.config.data.uidKey\n          }));\n        }\n\n        self.id = id;\n        self.data = data;\n        mixer.cache[id] = self;\n      }\n\n      self.callActions('afterInit', arguments);\n    },\n\n    /**\r\n     * Renders the target element using a user-defined renderer function.\r\n     *\r\n     * @private\r\n     * @instance\r\n     * @since   3.1.4\r\n     * @param   {object} data\r\n     * @return  {void}\r\n     */\n    render: function render(data) {\n      var self = this,\n          render = null,\n          el = null,\n          temp = null,\n          output = '';\n      self.callActions('beforeRender', arguments);\n      render = self.callFilters('renderRender', self.mixer.config.render.target, arguments);\n\n      if (typeof render !== 'function') {\n        throw new TypeError(_mixitup.messages.errorDatasetRendererNotSet());\n      }\n\n      output = render(data);\n\n      if (output && typeof output === 'object' && h.isElement(output)) {\n        el = output;\n      } else if (typeof output === 'string') {\n        temp = document.createElement('div');\n        temp.innerHTML = output;\n        el = temp.firstElementChild;\n      }\n\n      return self.callFilters('elRender', el, arguments);\n    },\n\n    /**\r\n     * Caches references of DOM elements neccessary for the target's functionality.\r\n     *\r\n     * @private\r\n     * @instance\r\n     * @since   3.0.0\r\n     * @param   {Element} el\r\n     * @return  {void}\r\n     */\n    cacheDom: function cacheDom(el) {\n      var self = this;\n      self.callActions('beforeCacheDom', arguments);\n      self.dom.el = el;\n      self.callActions('afterCacheDom', arguments);\n    },\n\n    /**\r\n     * @private\r\n     * @instance\r\n     * @since   3.0.0\r\n     * @param   {string}    attributeName\r\n     * @return  {void}\r\n     */\n    getSortString: function getSortString(attributeName) {\n      var self = this,\n          value = self.dom.el.getAttribute('data-' + attributeName) || '';\n      self.callActions('beforeGetSortString', arguments);\n      value = isNaN(value * 1) ? value.toLowerCase() : value * 1;\n      self.sortString = value;\n      self.callActions('afterGetSortString', arguments);\n    },\n\n    /**\r\n     * @private\r\n     * @instance\r\n     * @since   3.0.0\r\n     * @return  {void}\r\n     */\n    show: function show() {\n      var self = this;\n      self.callActions('beforeShow', arguments);\n\n      if (!self.isShown) {\n        self.dom.el.style.display = '';\n        self.isShown = true;\n      }\n\n      self.callActions('afterShow', arguments);\n    },\n\n    /**\r\n     * @private\r\n     * @instance\r\n     * @since   3.0.0\r\n     * @return  {void}\r\n     */\n    hide: function hide() {\n      var self = this;\n      self.callActions('beforeHide', arguments);\n\n      if (self.isShown) {\n        self.dom.el.style.display = 'none';\n        self.isShown = false;\n      }\n\n      self.callActions('afterHide', arguments);\n    },\n\n    /**\r\n     * @private\r\n     * @instance\r\n     * @since   3.0.0\r\n     * @param   {mixitup.IMoveData} moveData\r\n     * @return  {void}\r\n     */\n    move: function move(moveData) {\n      var self = this;\n      self.callActions('beforeMove', arguments);\n\n      if (!self.isExcluded) {\n        self.mixer.targetsMoved++;\n      }\n\n      self.applyStylesIn(moveData);\n      requestAnimationFrame(function () {\n        self.applyStylesOut(moveData);\n      });\n      self.callActions('afterMove', arguments);\n    },\n\n    /**\r\n     * @private\r\n     * @instance\r\n     * @since   3.0.0\r\n     * @param   {object}    posData\r\n     * @param   {number}    multiplier\r\n     * @return  {void}\r\n     */\n    applyTween: function applyTween(posData, multiplier) {\n      var self = this,\n          propertyName = '',\n          tweenData = null,\n          posIn = posData.posIn,\n          currentTransformValues = [],\n          currentValues = new _mixitup.StyleData(),\n          i = -1;\n      self.callActions('beforeApplyTween', arguments);\n      currentValues.x = posIn.x;\n      currentValues.y = posIn.y;\n\n      if (multiplier === 0) {\n        self.hide();\n      } else if (!self.isShown) {\n        self.show();\n      }\n\n      for (i = 0; propertyName = _mixitup.features.TWEENABLE[i]; i++) {\n        tweenData = posData.tweenData[propertyName];\n\n        if (propertyName === 'x') {\n          if (!tweenData) continue;\n          currentValues.x = posIn.x + tweenData * multiplier;\n        } else if (propertyName === 'y') {\n          if (!tweenData) continue;\n          currentValues.y = posIn.y + tweenData * multiplier;\n        } else if (tweenData instanceof _mixitup.TransformData) {\n          if (!tweenData.value) continue;\n          currentValues[propertyName].value = posIn[propertyName].value + tweenData.value * multiplier;\n          currentValues[propertyName].unit = tweenData.unit;\n          currentTransformValues.push(propertyName + '(' + currentValues[propertyName].value + tweenData.unit + ')');\n        } else {\n          if (!tweenData) continue;\n          currentValues[propertyName] = posIn[propertyName] + tweenData * multiplier;\n          self.dom.el.style[propertyName] = currentValues[propertyName];\n        }\n      }\n\n      if (currentValues.x || currentValues.y) {\n        currentTransformValues.unshift('translate(' + currentValues.x + 'px, ' + currentValues.y + 'px)');\n      }\n\n      if (currentTransformValues.length) {\n        self.dom.el.style[_mixitup.features.transformProp] = currentTransformValues.join(' ');\n      }\n\n      self.callActions('afterApplyTween', arguments);\n    },\n\n    /**\r\n     * Applies the initial styling to a target element before any transition\r\n     * is applied.\r\n     *\r\n     * @private\r\n     * @instance\r\n     * @param   {mixitup.IMoveData} moveData\r\n     * @return  {void}\r\n     */\n    applyStylesIn: function applyStylesIn(moveData) {\n      var self = this,\n          posIn = moveData.posIn,\n          isFading = self.mixer.effectsIn.opacity !== 1,\n          transformValues = [];\n      self.callActions('beforeApplyStylesIn', arguments);\n      transformValues.push('translate(' + posIn.x + 'px, ' + posIn.y + 'px)');\n\n      if (self.mixer.config.animation.animateResizeTargets) {\n        if (moveData.statusChange !== 'show') {\n          // Don't apply posIn width or height or showing, as will be 0\n          self.dom.el.style.width = posIn.width + 'px';\n          self.dom.el.style.height = posIn.height + 'px';\n        }\n\n        self.dom.el.style.marginRight = posIn.marginRight + 'px';\n        self.dom.el.style.marginBottom = posIn.marginBottom + 'px';\n      }\n\n      isFading && (self.dom.el.style.opacity = posIn.opacity);\n\n      if (moveData.statusChange === 'show') {\n        transformValues = transformValues.concat(self.mixer.transformIn);\n      }\n\n      self.dom.el.style[_mixitup.features.transformProp] = transformValues.join(' ');\n      self.callActions('afterApplyStylesIn', arguments);\n    },\n\n    /**\r\n     * Applies a transition followed by the final styles for the element to\r\n     * transition towards.\r\n     *\r\n     * @private\r\n     * @instance\r\n     * @param   {mixitup.IMoveData} moveData\r\n     * @return  {void}\r\n     */\n    applyStylesOut: function applyStylesOut(moveData) {\n      var self = this,\n          transitionRules = [],\n          transformValues = [],\n          isResizing = self.mixer.config.animation.animateResizeTargets,\n          isFading = typeof self.mixer.effectsIn.opacity !== 'undefined';\n      self.callActions('beforeApplyStylesOut', arguments); // Build the transition rules\n\n      transitionRules.push(self.writeTransitionRule(_mixitup.features.transformRule, moveData.staggerIndex));\n\n      if (moveData.statusChange !== 'none') {\n        transitionRules.push(self.writeTransitionRule('opacity', moveData.staggerIndex, moveData.duration));\n      }\n\n      if (isResizing) {\n        transitionRules.push(self.writeTransitionRule('width', moveData.staggerIndex, moveData.duration));\n        transitionRules.push(self.writeTransitionRule('height', moveData.staggerIndex, moveData.duration));\n        transitionRules.push(self.writeTransitionRule('margin', moveData.staggerIndex, moveData.duration));\n      } // If no callback was provided, the element will\n      // not transition in any way so tag it as \"immovable\"\n\n\n      if (!moveData.callback) {\n        self.mixer.targetsImmovable++;\n\n        if (self.mixer.targetsMoved === self.mixer.targetsImmovable) {\n          // If the total targets moved is equal to the\n          // number of immovable targets, the operation\n          // should be considered finished\n          self.mixer.cleanUp(moveData.operation);\n        }\n\n        return;\n      } // If the target will transition in some fasion,\n      // assign a callback function\n\n\n      self.operation = moveData.operation;\n      self.callback = moveData.callback; // As long as the target is not excluded, increment\n      // the total number of targets bound\n\n      !self.isExcluded && self.mixer.targetsBound++; // Tag the target as bound to differentiate from transitionEnd\n      // events that may come from stylesheet driven effects\n\n      self.isBound = true; // Apply the transition\n\n      self.applyTransition(transitionRules); // Apply width, height and margin negation\n\n      if (isResizing && moveData.posOut.width > 0 && moveData.posOut.height > 0) {\n        self.dom.el.style.width = moveData.posOut.width + 'px';\n        self.dom.el.style.height = moveData.posOut.height + 'px';\n        self.dom.el.style.marginRight = moveData.posOut.marginRight + 'px';\n        self.dom.el.style.marginBottom = moveData.posOut.marginBottom + 'px';\n      }\n\n      if (!self.mixer.config.animation.nudge && moveData.statusChange === 'hide') {\n        // If we're not nudging, the translation should be\n        // applied before any other transforms to prevent\n        // lateral movement\n        transformValues.push('translate(' + moveData.posOut.x + 'px, ' + moveData.posOut.y + 'px)');\n      } // Apply fade\n\n\n      switch (moveData.statusChange) {\n        case 'hide':\n          isFading && (self.dom.el.style.opacity = self.mixer.effectsOut.opacity);\n          transformValues = transformValues.concat(self.mixer.transformOut);\n          break;\n\n        case 'show':\n          isFading && (self.dom.el.style.opacity = 1);\n      }\n\n      if (self.mixer.config.animation.nudge || !self.mixer.config.animation.nudge && moveData.statusChange !== 'hide') {\n        // Opposite of above - apply translate after\n        // other transform\n        transformValues.push('translate(' + moveData.posOut.x + 'px, ' + moveData.posOut.y + 'px)');\n      } // Apply transforms\n\n\n      self.dom.el.style[_mixitup.features.transformProp] = transformValues.join(' ');\n      self.callActions('afterApplyStylesOut', arguments);\n    },\n\n    /**\r\n     * Combines the name of a CSS property with the appropriate duration and delay\r\n     * values to created a valid transition rule.\r\n     *\r\n     * @private\r\n     * @instance\r\n     * @since   3.0.0\r\n     * @param   {string}    property\r\n     * @param   {number}    staggerIndex\r\n     * @param   {number}    duration\r\n     * @return  {string}\r\n     */\n    writeTransitionRule: function writeTransitionRule(property, staggerIndex, duration) {\n      var self = this,\n          delay = self.getDelay(staggerIndex),\n          rule = '';\n      rule = property + ' ' + (duration > 0 ? duration : self.mixer.config.animation.duration) + 'ms ' + delay + 'ms ' + (property === 'opacity' ? 'linear' : self.mixer.config.animation.easing);\n      return self.callFilters('ruleWriteTransitionRule', rule, arguments);\n    },\n\n    /**\r\n     * Calculates the transition delay for each target element based on its index, if\r\n     * staggering is applied. If defined, A custom `animation.staggerSeqeuence`\r\n     * function can be used to manipulate the order of indices to produce custom\r\n     * stagger effects (e.g. for use in a grid with irregular row lengths).\r\n     *\r\n     * @private\r\n     * @instance\r\n     * @since   2.0.0\r\n     * @param   {number}    index\r\n     * @return  {number}\r\n     */\n    getDelay: function getDelay(index) {\n      var self = this,\n          delay = -1;\n\n      if (typeof self.mixer.config.animation.staggerSequence === 'function') {\n        index = self.mixer.config.animation.staggerSequence.call(self, index, self.state);\n      }\n\n      delay = !!self.mixer.staggerDuration ? index * self.mixer.staggerDuration : 0;\n      return self.callFilters('delayGetDelay', delay, arguments);\n    },\n\n    /**\r\n     * @private\r\n     * @instance\r\n     * @since   3.0.0\r\n     * @param   {string[]}  rules\r\n     * @return  {void}\r\n     */\n    applyTransition: function applyTransition(rules) {\n      var self = this,\n          transitionString = rules.join(', ');\n      self.callActions('beforeApplyTransition', arguments);\n      self.dom.el.style[_mixitup.features.transitionProp] = transitionString;\n      self.callActions('afterApplyTransition', arguments);\n    },\n\n    /**\r\n     * @private\r\n     * @instance\r\n     * @since   3.0.0\r\n     * @param   {Event} e\r\n     * @return  {void}\r\n     */\n    handleTransitionEnd: function handleTransitionEnd(e) {\n      var self = this,\n          propName = e.propertyName,\n          canResize = self.mixer.config.animation.animateResizeTargets;\n      self.callActions('beforeHandleTransitionEnd', arguments);\n\n      if (self.isBound && e.target.matches(self.mixer.config.selectors.target) && (propName.indexOf('transform') > -1 || propName.indexOf('opacity') > -1 || canResize && propName.indexOf('height') > -1 || canResize && propName.indexOf('width') > -1 || canResize && propName.indexOf('margin') > -1)) {\n        self.callback.call(self, self.operation);\n        self.isBound = false;\n        self.callback = null;\n        self.operation = null;\n      }\n\n      self.callActions('afterHandleTransitionEnd', arguments);\n    },\n\n    /**\r\n     * @private\r\n     * @instance\r\n     * @since   3.0.0\r\n     * @param   {Event}     e\r\n     * @return  {void}\r\n     */\n    eventBus: function eventBus(e) {\n      var self = this;\n      self.callActions('beforeEventBus', arguments);\n\n      switch (e.type) {\n        case 'webkitTransitionEnd':\n        case 'transitionend':\n          self.handleTransitionEnd(e);\n      }\n\n      self.callActions('afterEventBus', arguments);\n    },\n\n    /**\r\n     * @private\r\n     * @instance\r\n     * @since   3.0.0\r\n     * @return  {void}\r\n     */\n    unbindEvents: function unbindEvents() {\n      var self = this;\n      self.callActions('beforeUnbindEvents', arguments);\n      h.off(self.dom.el, 'webkitTransitionEnd', self.handler);\n      h.off(self.dom.el, 'transitionend', self.handler);\n      self.callActions('afterUnbindEvents', arguments);\n    },\n\n    /**\r\n     * @private\r\n     * @instance\r\n     * @since   3.0.0\r\n     * @return  {void}\r\n     */\n    bindEvents: function bindEvents() {\n      var self = this,\n          transitionEndEvent = '';\n      self.callActions('beforeBindEvents', arguments);\n      transitionEndEvent = _mixitup.features.transitionPrefix === 'webkit' ? 'webkitTransitionEnd' : 'transitionend';\n\n      self.handler = function (e) {\n        return self.eventBus(e);\n      };\n\n      h.on(self.dom.el, transitionEndEvent, self.handler);\n      self.callActions('afterBindEvents', arguments);\n    },\n\n    /**\r\n     * @private\r\n     * @instance\r\n     * @since   3.0.0\r\n     * @param   {boolean}   [getBox]\r\n     * @return  {PosData}\r\n     */\n    getPosData: function getPosData(getBox) {\n      var self = this,\n          styles = {},\n          rect = null,\n          posData = new _mixitup.StyleData();\n      self.callActions('beforeGetPosData', arguments);\n      posData.x = self.dom.el.offsetLeft;\n      posData.y = self.dom.el.offsetTop;\n\n      if (self.mixer.config.animation.animateResizeTargets || getBox) {\n        rect = self.dom.el.getBoundingClientRect();\n        posData.top = rect.top;\n        posData.right = rect.right;\n        posData.bottom = rect.bottom;\n        posData.left = rect.left;\n        posData.width = rect.width;\n        posData.height = rect.height;\n      }\n\n      if (self.mixer.config.animation.animateResizeTargets) {\n        styles = window.getComputedStyle(self.dom.el);\n        posData.marginBottom = parseFloat(styles.marginBottom);\n        posData.marginRight = parseFloat(styles.marginRight);\n      }\n\n      return self.callFilters('posDataGetPosData', posData, arguments);\n    },\n\n    /**\r\n     * @private\r\n     * @instance\r\n     * @since       3.0.0\r\n     * @return      {void}\r\n     */\n    cleanUp: function cleanUp() {\n      var self = this;\n      self.callActions('beforeCleanUp', arguments);\n      self.dom.el.style[_mixitup.features.transformProp] = '';\n      self.dom.el.style[_mixitup.features.transitionProp] = '';\n      self.dom.el.style.opacity = '';\n\n      if (self.mixer.config.animation.animateResizeTargets) {\n        self.dom.el.style.width = '';\n        self.dom.el.style.height = '';\n        self.dom.el.style.marginRight = '';\n        self.dom.el.style.marginBottom = '';\n      }\n\n      self.callActions('afterCleanUp', arguments);\n    }\n  });\n  /**\r\n   * A jQuery-collection-like wrapper around one or more `mixitup.Mixer` instances\r\n   * allowing simultaneous control of said instances similar to the MixItUp 2 API.\r\n   *\r\n   * @example\r\n   * new mixitup.Collection(instances)\r\n   *\r\n   * @constructor\r\n   * @namespace\r\n   * @memberof    mixitup\r\n   * @private\r\n   * @since       3.0.0\r\n   * @param       {mixitup.Mixer[]}   instances\r\n   */\n\n  _mixitup.Collection = function (instances) {\n    var instance = null,\n        i = -1;\n    this.callActions('beforeConstruct');\n\n    for (i = 0; instance = instances[i]; i++) {\n      this[i] = instance;\n    }\n\n    this.length = instances.length;\n    this.callActions('afterConstruct');\n    h.freeze(this);\n  };\n\n  _mixitup.BaseStatic.call(_mixitup.Collection);\n\n  _mixitup.Collection.prototype = Object.create(_mixitup.Base.prototype);\n  h.extend(_mixitup.Collection.prototype,\n  /** @lends mixitup.Collection */\n  {\n    constructor: _mixitup.Collection,\n\n    /**\r\n     * Calls a method on all instances in the collection by passing the method\r\n     * name as a string followed by any applicable parameters to be curried into\r\n     * to the method.\r\n     *\r\n     * @example\r\n     * .mixitup(methodName[,arg1][,arg2..]);\r\n     *\r\n     * @example\r\n     * var collection = new Collection([mixer1, mixer2]);\r\n     *\r\n     * return collection.mixitup('filter', '.category-a')\r\n     *     .then(function(states) {\r\n     *         state.forEach(function(state) {\r\n     *             console.log(state.activeFilter.selector); // .category-a\r\n     *         });\r\n     *     });\r\n     *\r\n     * @public\r\n     * @instance\r\n     * @since       3.0.0\r\n     * @param       {string}  methodName\r\n     * @return      {Promise<Array<mixitup.State>>}\r\n     */\n    mixitup: function mixitup(methodName) {\n      var self = this,\n          instance = null,\n          args = Array.prototype.slice.call(arguments),\n          tasks = [],\n          i = -1;\n      this.callActions('beforeMixitup');\n      args.shift();\n\n      for (i = 0; instance = self[i]; i++) {\n        tasks.push(instance[methodName].apply(instance, args));\n      }\n\n      return self.callFilters('promiseMixitup', h.all(tasks, _mixitup.libraries), arguments);\n    }\n  });\n  /**\r\n   * `mixitup.Operation` objects contain all data neccessary to describe the full\r\n   * lifecycle of any MixItUp operation. They can be used to compute and store an\r\n   * operation for use at a later time (e.g. programmatic tweening).\r\n   *\r\n   * @constructor\r\n   * @namespace\r\n   * @memberof    mixitup\r\n   * @private\r\n   * @since       3.0.0\r\n   */\n\n  _mixitup.Operation = function () {\n    _mixitup.Base.call(this);\n\n    this.callActions('beforeConstruct');\n    this.id = '';\n    this.args = [];\n    this.command = null;\n    this.showPosData = [];\n    this.toHidePosData = [];\n    this.startState = null;\n    this.newState = null;\n    this.docState = null;\n    this.willSort = false;\n    this.willChangeLayout = false;\n    this.hasEffect = false;\n    this.hasFailed = false;\n    this.triggerElement = null;\n    this.show = [];\n    this.hide = [];\n    this.matching = [];\n    this.toShow = [];\n    this.toHide = [];\n    this.toMove = [];\n    this.toRemove = [];\n    this.startOrder = [];\n    this.newOrder = [];\n    this.startSort = null;\n    this.newSort = null;\n    this.startFilter = null;\n    this.newFilter = null;\n    this.startDataset = null;\n    this.newDataset = null;\n    this.viewportDeltaX = 0;\n    this.viewportDeltaY = 0;\n    this.startX = 0;\n    this.startY = 0;\n    this.startHeight = 0;\n    this.startWidth = 0;\n    this.newX = 0;\n    this.newY = 0;\n    this.newHeight = 0;\n    this.newWidth = 0;\n    this.startContainerClassName = '';\n    this.startDisplay = '';\n    this.newContainerClassName = '';\n    this.newDisplay = '';\n    this.callActions('afterConstruct');\n    h.seal(this);\n  };\n\n  _mixitup.BaseStatic.call(_mixitup.Operation);\n\n  _mixitup.Operation.prototype = Object.create(_mixitup.Base.prototype);\n  _mixitup.Operation.prototype.constructor = _mixitup.Operation;\n  /**\r\n   * `mixitup.State` objects expose various pieces of data detailing the state of\r\n   * a MixItUp instance. They are provided at the start and end of any operation via\r\n   * callbacks and events, with the most recent state stored between operations\r\n   * for retrieval at any time via the API.\r\n   *\r\n   * @constructor\r\n   * @namespace\r\n   * @memberof    mixitup\r\n   * @public\r\n   * @since       3.0.0\r\n   */\n\n  _mixitup.State = function () {\n    _mixitup.Base.call(this);\n\n    this.callActions('beforeConstruct');\n    /**\r\n     * The ID of the mixer instance.\r\n     *\r\n     * @name        id\r\n     * @memberof    mixitup.State\r\n     * @instance\r\n     * @type        {string}\r\n     * @default     ''\r\n     */\n\n    this.id = '';\n    /**\r\n     * The currently active filter command as set by a control click or API call.\r\n     *\r\n     * @name        activeFilter\r\n     * @memberof    mixitup.State\r\n     * @instance\r\n     * @type        {mixitup.CommandFilter}\r\n     * @default     null\r\n     */\n\n    this.activeFilter = null;\n    /**\r\n     * The currently active sort command as set by a control click or API call.\r\n     *\r\n     * @name        activeSort\r\n     * @memberof    mixitup.State\r\n     * @instance\r\n     * @type        {mixitup.CommandSort}\r\n     * @default     null\r\n     */\n\n    this.activeSort = null;\n    /**\r\n     * The current layout-specific container class name, if applied.\r\n     *\r\n     * @name        activeContainerClassName\r\n     * @memberof    mixitup.State\r\n     * @instance\r\n     * @type        {string}\r\n     * @default     ''\r\n     */\n\n    this.activeContainerClassName = '';\n    /**\r\n     * A reference to the container element that the mixer is instantiated on.\r\n     *\r\n     * @name        container\r\n     * @memberof    mixitup.State\r\n     * @instance\r\n     * @type        {Element}\r\n     * @default     null\r\n     */\n\n    this.container = null;\n    /**\r\n     * An array of all target elements indexed by the mixer.\r\n     *\r\n     * @name        targets\r\n     * @memberof    mixitup.State\r\n     * @instance\r\n     * @type        {Array.<Element>}\r\n     * @default     []\r\n     */\n\n    this.targets = [];\n    /**\r\n     * An array of all target elements not matching the current filter.\r\n     *\r\n     * @name        hide\r\n     * @memberof    mixitup.State\r\n     * @instance\r\n     * @type        {Array.<Element>}\r\n     * @default     []\r\n     */\n\n    this.hide = [];\n    /**\r\n     * An array of all target elements matching the current filter and any additional\r\n     * limits applied such as pagination.\r\n     *\r\n     * @name        show\r\n     * @memberof    mixitup.State\r\n     * @instance\r\n     * @type        {Array.<Element>}\r\n     * @default     []\r\n     */\n\n    this.show = [];\n    /**\r\n     * An array of all target elements matching the current filter irrespective of\r\n     * any additional limits applied such as pagination.\r\n     *\r\n     * @name        matching\r\n     * @memberof    mixitup.State\r\n     * @instance\r\n     * @type        {Array.<Element>}\r\n     * @default     []\r\n     */\n\n    this.matching = [];\n    /**\r\n     * An integer representing the total number of target elements indexed by the\r\n     * mixer. Equivalent to `state.targets.length`.\r\n     *\r\n     * @name        totalTargets\r\n     * @memberof    mixitup.State\r\n     * @instance\r\n     * @type        {number}\r\n     * @default     -1\r\n     */\n\n    this.totalTargets = -1;\n    /**\r\n     * An integer representing the total number of target elements matching the\r\n     * current filter and any additional limits applied such as pagination.\r\n     * Equivalent to `state.show.length`.\r\n     *\r\n     * @name        totalShow\r\n     * @memberof    mixitup.State\r\n     * @instance\r\n     * @type        {number}\r\n     * @default     -1\r\n     */\n\n    this.totalShow = -1;\n    /**\r\n     * An integer representing the total number of target elements not matching\r\n     * the current filter. Equivalent to `state.hide.length`.\r\n     *\r\n     * @name        totalHide\r\n     * @memberof    mixitup.State\r\n     * @instance\r\n     * @type        {number}\r\n     * @default     -1\r\n     */\n\n    this.totalHide = -1;\n    /**\r\n     * An integer representing the total number of target elements matching the\r\n     * current filter irrespective of any other limits applied such as pagination.\r\n     * Equivalent to `state.matching.length`.\r\n     *\r\n     * @name        totalMatching\r\n     * @memberof    mixitup.State\r\n     * @instance\r\n     * @type        {number}\r\n     * @default     -1\r\n     */\n\n    this.totalMatching = -1;\n    /**\r\n     * A boolean indicating whether the last operation \"failed\", i.e. no targets\r\n     * could be found matching the filter.\r\n     *\r\n     * @name        hasFailed\r\n     * @memberof    mixitup.State\r\n     * @instance\r\n     * @type        {boolean}\r\n     * @default     false\r\n     */\n\n    this.hasFailed = false;\n    /**\r\n     * The DOM element that was clicked if the last operation was triggered by the\r\n     * clicking of a control and not an API call.\r\n     *\r\n     * @name        triggerElement\r\n     * @memberof    mixitup.State\r\n     * @instance\r\n     * @type        {Element|null}\r\n     * @default     null\r\n     */\n\n    this.triggerElement = null;\n    /**\r\n     * The currently active dataset underlying the rendered targets, if the\r\n     * dataset API is in use.\r\n     *\r\n     * @name        activeDataset\r\n     * @memberof    mixitup.State\r\n     * @instance\r\n     * @type        {Array.<object>}\r\n     * @default     null\r\n     */\n\n    this.activeDataset = null;\n    this.callActions('afterConstruct');\n    h.seal(this);\n  };\n\n  _mixitup.BaseStatic.call(_mixitup.State);\n\n  _mixitup.State.prototype = Object.create(_mixitup.Base.prototype);\n  _mixitup.State.prototype.constructor = _mixitup.State;\n  /**\r\n   * @constructor\r\n   * @memberof    mixitup\r\n   * @private\r\n   * @since       3.0.0\r\n   */\n\n  _mixitup.UserInstruction = function () {\n    _mixitup.Base.call(this);\n\n    this.callActions('beforeConstruct');\n    this.command = {};\n    this.animate = false;\n    this.callback = null;\n    this.callActions('afterConstruct');\n    h.seal(this);\n  };\n\n  _mixitup.BaseStatic.call(_mixitup.UserInstruction);\n\n  _mixitup.UserInstruction.prototype = Object.create(_mixitup.Base.prototype);\n  _mixitup.UserInstruction.prototype.constructor = _mixitup.UserInstruction;\n  /**\r\n   * @constructor\r\n   * @memberof    mixitup\r\n   * @private\r\n   * @since       3.0.0\r\n   */\n\n  _mixitup.Messages = function () {\n    _mixitup.Base.call(this);\n\n    this.callActions('beforeConstruct');\n    /* Errors\r\n    ----------------------------------------------------------------------------- */\n\n    this.ERROR_FACTORY_INVALID_CONTAINER = '[MixItUp] An invalid selector or element reference was passed to the mixitup factory function';\n    this.ERROR_FACTORY_CONTAINER_NOT_FOUND = '[MixItUp] The provided selector yielded no container element';\n    this.ERROR_CONFIG_INVALID_ANIMATION_EFFECTS = '[MixItUp] Invalid value for `animation.effects`';\n    this.ERROR_CONFIG_INVALID_CONTROLS_SCOPE = '[MixItUp] Invalid value for `controls.scope`';\n    this.ERROR_CONFIG_INVALID_PROPERTY = '[MixitUp] Invalid configuration object property \"${erroneous}\"${suggestion}';\n    this.ERROR_CONFIG_INVALID_PROPERTY_SUGGESTION = '. Did you mean \"${probableMatch}\"?';\n    this.ERROR_CONFIG_DATA_UID_KEY_NOT_SET = '[MixItUp] To use the dataset API, a UID key must be specified using `data.uidKey`';\n    this.ERROR_DATASET_INVALID_UID_KEY = '[MixItUp] The specified UID key \"${uidKey}\" is not present on one or more dataset items';\n    this.ERROR_DATASET_DUPLICATE_UID = '[MixItUp] The UID \"${uid}\" was found on two or more dataset items. UIDs must be unique.';\n    this.ERROR_INSERT_INVALID_ARGUMENTS = '[MixItUp] Please provider either an index or a sibling and position to insert, not both';\n    this.ERROR_INSERT_PREEXISTING_ELEMENT = '[MixItUp] An element to be inserted already exists in the container';\n    this.ERROR_FILTER_INVALID_ARGUMENTS = '[MixItUp] Please provide either a selector or collection `.filter()`, not both';\n    this.ERROR_DATASET_NOT_SET = '[MixItUp] To use the dataset API with pre-rendered targets, a starting dataset must be set using `load.dataset`';\n    this.ERROR_DATASET_PRERENDERED_MISMATCH = '[MixItUp] `load.dataset` does not match pre-rendered targets';\n    this.ERROR_DATASET_RENDERER_NOT_SET = '[MixItUp] To insert an element via the dataset API, a target renderer function must be provided to `render.target`';\n    this.ERROR_SORT_NON_EXISTENT_ELEMENT = '[MixItUp] An element to be sorted does not already exist in the container';\n    /* Warnings\r\n    ----------------------------------------------------------------------------- */\n\n    this.WARNING_FACTORY_PREEXISTING_INSTANCE = '[MixItUp] WARNING: This element already has an active MixItUp instance. The provided configuration object will be ignored.' + ' If you wish to perform additional methods on this instance, please create a reference.';\n    this.WARNING_INSERT_NO_ELEMENTS = '[MixItUp] WARNING: No valid elements were passed to `.insert()`';\n    this.WARNING_REMOVE_NO_ELEMENTS = '[MixItUp] WARNING: No valid elements were passed to `.remove()`';\n    this.WARNING_MULTIMIX_INSTANCE_QUEUE_FULL = '[MixItUp] WARNING: An operation was requested but the MixItUp instance was busy. The operation was rejected because the ' + 'queue is full or queuing is disabled.';\n    this.WARNING_GET_OPERATION_INSTANCE_BUSY = '[MixItUp] WARNING: Operations can be be created while the MixItUp instance is busy.';\n    this.WARNING_NO_PROMISE_IMPLEMENTATION = '[MixItUp] WARNING: No Promise implementations could be found. If you wish to use promises with MixItUp please install' + ' an ES6 Promise polyfill.';\n    this.WARNING_INCONSISTENT_SORTING_ATTRIBUTES = '[MixItUp] WARNING: The requested sorting data attribute \"${attribute}\" was not present on one or more target elements' + ' which may product unexpected sort output';\n    this.callActions('afterConstruct');\n    this.compileTemplates();\n    h.seal(this);\n  };\n\n  _mixitup.BaseStatic.call(_mixitup.Messages);\n\n  _mixitup.Messages.prototype = Object.create(_mixitup.Base.prototype);\n  _mixitup.Messages.prototype.constructor = _mixitup.Messages;\n  /**\r\n   * @return {void}\r\n   */\n\n  _mixitup.Messages.prototype.compileTemplates = function () {\n    var errorKey = '';\n    var errorMessage = '';\n\n    for (errorKey in this) {\n      if (typeof (errorMessage = this[errorKey]) !== 'string') continue;\n      this[h.camelCase(errorKey)] = h.template(errorMessage);\n    }\n  };\n\n  _mixitup.messages = new _mixitup.Messages();\n  /**\r\n   * @constructor\r\n   * @memberof    mixitup\r\n   * @private\r\n   * @since       3.0.0\r\n   * @param       {mixitup.Mixer} mixer\r\n   */\n\n  _mixitup.Facade = function Mixer(mixer) {\n    _mixitup.Base.call(this);\n\n    this.callActions('beforeConstruct', arguments);\n    this.configure = mixer.configure.bind(mixer);\n    this.show = mixer.show.bind(mixer);\n    this.hide = mixer.hide.bind(mixer);\n    this.filter = mixer.filter.bind(mixer);\n    this.toggleOn = mixer.toggleOn.bind(mixer);\n    this.toggleOff = mixer.toggleOff.bind(mixer);\n    this.sort = mixer.sort.bind(mixer);\n    this.changeLayout = mixer.changeLayout.bind(mixer);\n    this.multimix = mixer.multimix.bind(mixer);\n    this.dataset = mixer.dataset.bind(mixer);\n    this.tween = mixer.tween.bind(mixer);\n    this.insert = mixer.insert.bind(mixer);\n    this.insertBefore = mixer.insertBefore.bind(mixer);\n    this.insertAfter = mixer.insertAfter.bind(mixer);\n    this.prepend = mixer.prepend.bind(mixer);\n    this.append = mixer.append.bind(mixer);\n    this.remove = mixer.remove.bind(mixer);\n    this.destroy = mixer.destroy.bind(mixer);\n    this.forceRefresh = mixer.forceRefresh.bind(mixer);\n    this.forceRender = mixer.forceRender.bind(mixer);\n    this.isMixing = mixer.isMixing.bind(mixer);\n    this.getOperation = mixer.getOperation.bind(mixer);\n    this.getConfig = mixer.getConfig.bind(mixer);\n    this.getState = mixer.getState.bind(mixer);\n    this.callActions('afterConstruct', arguments);\n    h.freeze(this);\n    h.seal(this);\n  };\n\n  _mixitup.BaseStatic.call(_mixitup.Facade);\n\n  _mixitup.Facade.prototype = Object.create(_mixitup.Base.prototype);\n  _mixitup.Facade.prototype.constructor = _mixitup.Facade;\n\n  if (typeof exports === 'object' && typeof module === 'object') {\n    module.exports = _mixitup;\n  } else if (typeof define === 'function' && define.amd) {\n    define(function () {\n      return _mixitup;\n    });\n  } else if (typeof window.mixitup === 'undefined' || typeof window.mixitup !== 'function') {\n    window.mixitup = _mixitup;\n  }\n\n  _mixitup.BaseStatic.call(_mixitup.constructor);\n\n  _mixitup.NAME = 'mixitup';\n  _mixitup.CORE_VERSION = '3.3.1';\n})(window);","map":null,"metadata":{},"sourceType":"script"}