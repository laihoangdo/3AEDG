{"version":3,"sources":["store/blog/action.js","components/callButton/index.jsx","components/scroll/index.jsx","router/index.js","modules/loading/index.jsx","App.js","serviceWorker.js","store/blog/index.js","store/index.js","index.js"],"names":["__webpack_require__","d","__webpack_exports__","FETCH_BLOGS_SUCCESS","fetchBlogsAction","value","console","log","type","CallButton","react_default","a","createElement","Fragment","className","href","title","build_default","icon","PureComponent","ScrollUpBtn","react_scroll_up_button_default","ContainerClassName","TransitionClassName","callButton_CallButton","HomeOne","React","lazy","Promise","all","e","then","bind","Single","CourseDetail","routes","path","component","exact","Loading","xmlns","viewBox","width","height","fill","App","react_page_loading_default","loader","color","size","react","fallback","loading_Loading","react_router","render","_ref","location","CSSTransition","key","timeout","enter","exit","classNames","map","_ref2","restRouter","Object","esm_extends","assign","scroll_ScrollUpBtn","Component","Boolean","window","hostname","match","blogReducer","arguments","length","undefined","dispatch","fetch","res","json","error","catch","rootReducer","combineReducers","blogs","logger","createLogger","store","createStore","applyMiddleware","ReactDOM","es","react_router_dom","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"yFAAAA,EAAAC,EAAAC,EAAA,sBAAAC,IAAAH,EAAAC,EAAAC,EAAA,sBAAAE,IAAO,IAAMD,EAAsB,sBAI5B,SAASC,EAAkBC,GAE9B,OADAC,QAAQC,IAAI,kBACJ,CAACC,KAAML,EAAqBE,kZCFnBI,mLAEb,OACIC,EAAAC,EAAAC,cAACF,EAAAC,EAAME,SAAP,KACIH,EAAAC,EAAAC,cAAA,OAAKE,UAAU,aACXJ,EAAAC,EAAAC,cAAA,KAAGG,KAAK,kBAAkBC,MAAM,kCAChCN,EAAAC,EAAAC,cAAA,OAAKE,UAAU,aACXJ,EAAAC,EAAAC,cAAA,SAAGF,EAAAC,EAAAC,cAACK,EAAAN,EAAD,CAASO,KAAK,iDAPDC,iBCAnBC,mLAEb,OACIV,EAAAC,EAAAC,cAACF,EAAAC,EAAME,SAAP,KACIH,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAACS,EAAAV,EAAD,CAYIW,mBAAmB,uBACnBC,oBAAoB,0BAGpBb,EAAAC,EAAAC,cAACS,EAAAV,EAAD,CACIW,mBAAmB,uBACnBC,oBAAoB,yBAGpBb,EAAAC,EAAAC,cAACY,EAAD,gBA1BiBL,iBCHnCM,EAAUC,IAAMC,KAAK,kBAAMC,QAAAC,IAAA,CAAA7B,EAAA8B,EAAA,GAAA9B,EAAA8B,EAAA,GAAA9B,EAAA8B,EAAA,GAAA9B,EAAA8B,EAAA,KAAAC,KAAA/B,EAAAgC,KAAA,aAC3BC,EAASP,IAAMC,KAAK,kBAAMC,QAAAC,IAAA,CAAA7B,EAAA8B,EAAA,GAAA9B,EAAA8B,EAAA,KAAAC,KAAA/B,EAAAgC,KAAA,aAC1BE,EAAeR,IAAMC,KAAK,kBAAMC,QAAAC,IAAA,CAAA7B,EAAA8B,EAAA,GAAA9B,EAAA8B,EAAA,KAAAC,KAAA/B,EAAAgC,KAAA,aAmCvBG,EA5BA,CACb,CACIC,KAAM,QACNC,UAAWZ,GAEf,CACEW,KAAM,WACNC,UAbYX,IAAMC,KAAK,kBAAMC,QAAAC,IAAA,CAAA7B,EAAA8B,EAAA,GAAA9B,EAAA8B,EAAA,KAAAC,KAAA/B,EAAAgC,KAAA,cAe/B,CACEI,KAAM,kBACNC,UAAWJ,GAEX,CACIG,KAAM,gBACNC,UAAWH,GAEjB,CACIE,KAAM,IACNC,UAAWZ,EACXa,OAAO,GAEX,CACIF,KAAM,IACNC,UA7BWX,IAAMC,KAAK,kBAAM3B,EAAA8B,EAAA,IAAAC,KAAA/B,EAAAgC,KAAA,eCFbO,0LAEb,OAEI7B,EAAAC,EAAAC,cAAA,OAAKE,UAAU,aACXJ,EAAAC,EAAAC,cAAA,OAAKE,UAAU,YAAY0B,MAAM,6BAA6BC,QAAQ,gBAAgBC,MAAM,OAAOC,OAAO,QACtGjC,EAAAC,EAAAC,cAAA,QAAMgC,KAAK,UACL3C,EAAE,cAPSkB,kBC+CtB0B,mLApCX,OACEnC,EAAAC,EAAAC,cAAA,OAAKE,UAAU,OACbJ,EAAAC,EAAAC,cAACkC,EAAAnC,EAAD,CAAMoC,OAAQ,aAAcC,MAAO,UAAWC,KAAM,IAChDvC,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAACsC,EAAA,SAAD,CAAUC,SAAUzC,EAAAC,EAAAC,cAACwC,EAAD,OACZ1C,EAAAC,EAAAC,cAACyC,EAAA,EAAD,CACIC,OAAQ,SAAAC,GAAA,IAAGC,EAAHD,EAAGC,SAAH,OACJ9C,EAAAC,EAAAC,cAAC6C,EAAA,EAAD,CACIC,IAAKF,EAASE,IACdC,QAAS,CAAEC,MAAO,IAAKC,KAAM,KAC7BC,WAAW,QAEXpD,EAAAC,EAAAC,cAAA,WAASE,UAAU,iBACbJ,EAAAC,EAAAC,cAACyC,EAAA,EAAD,CAAQG,SAAUA,GAEdrB,EAAO4B,IAAI,SAAAC,GAAqB,IAAhBC,EAAgBC,OAAAC,EAAA,EAAAD,CAAA,GAAAF,GAC9B,OACItD,EAAAC,EAAAC,cAACyC,EAAA,EAADa,OAAAE,OAAA,CAAOV,IAAKO,EAAW7B,MAAU6B,aAU7DvD,EAAAC,EAAAC,cAACY,EAAD,MACAd,EAAAC,EAAAC,cAACyD,EAAD,gBA9BNC,aCAEC,QACW,cAA7BC,OAAOhB,SAASiB,UAEe,UAA7BD,OAAOhB,SAASiB,UAEhBD,OAAOhB,SAASiB,SAASC,MACvB,uFCyCSC,MAhCf,WACI,OAD+CC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,IAAAA,UAAA,GAAAA,UAAAC,OAAA,GAAAD,UAAA,GACxC,SAAAG,GACHA,EAAS5E,eACT6E,MAAM,gDACDjD,KAAK,SAAAkD,GAAG,OAAIA,EAAIC,SAChBnD,KAAK,SAAAkD,GAEF,GADA3E,QAAQC,IAAI,MAAQ0E,GACjBA,EAAIE,MACH,MAAMF,EAAIE,MAGd,OAAOF,IAEVG,MAAM,SAAAD,GAEH,MAAOA,MClCRE,EAJKC,YAAgB,CAChCC,MAAOZ,oBCOLa,EAASC,yBACTC,EAASC,YACXN,EACAO,YAAgBJ,IAEpBK,IAASvC,OACL5C,EAAAC,EAAAC,cAACkF,EAAA,EAAD,CAAUJ,MAAOA,GACjBhF,EAAAC,EAAAC,cAACmF,EAAA,WAAD,KACIrF,EAAAC,EAAAC,cAACoF,EAAD,QAIDC,SAASC,eAAe,SHyGzB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMtE,KAAK,SAAAuE,GACjCA,EAAaC","file":"static/js/main.9c6652ce.chunk.js","sourcesContent":["export const FETCH_BLOGS_SUCCESS = 'FETCH_BLOGS_SUCCESS';\r\nexport const FETCH_BLOGS_PENDING = 'FETCH_BLOGS_PENDING';\r\nexport const FETCH_BLOGS_ERROR= 'FETCH_BLOGS_ERROR';\r\n\r\nexport function fetchBlogsAction (value) {\r\n    console.log('trigger action');\r\n    return ({type: FETCH_BLOGS_SUCCESS, value})\r\n}","import React, {PureComponent} from 'react';\r\nimport './callButton.css';\r\nimport Icofont from 'react-icofont';\r\n\r\nexport default class CallButton extends PureComponent {\r\n    render() {\r\n        return (\r\n            <React.Fragment>\r\n                <div className=\"link-text\">\r\n                    <a href=\"tel: 0938636843\" title=\"Liên hệ : 0938.6368.43\">\r\n                    <div className=\"yourPhone\">\r\n                        <p><Icofont icon=\"icofont-ui-dial-phone icofont-3x\"/></p>\r\n                    </div>\r\n                    </a>\r\n                </div>\r\n            </React.Fragment>\r\n        );\r\n    }\r\n}","import React, {PureComponent} from 'react';\r\nimport ScrollUpButton from \"react-scroll-up-button\";\r\nimport CallButton from \"../callButton\";\r\n\r\nexport default class ScrollUpBtn extends PureComponent {\r\n    render() {\r\n        return (\r\n            <React.Fragment>\r\n                <div>\r\n                <ScrollUpButton\r\n                    // style={{\r\n                    //     padding: 8,\r\n                    //     width: 60,\r\n                    //     backgroundColor: \"transparent\",\r\n                    //     height: 60,\r\n                    //     border: \"none\",\r\n                    //     color: \"white\",\r\n                    //     outline: 0,\r\n                    //     background: \"#03a84e\",\r\n                    //     zIndex: 9999,\r\n                    // }}\r\n                    ContainerClassName=\"AnyClassForContainer\"\r\n                    TransitionClassName=\"AnyClassForTransition\"\r\n\r\n                />\r\n                    <ScrollUpButton\r\n                        ContainerClassName=\"AnyClassForContainer\"\r\n                        TransitionClassName=\"AnyClassForTransition\"\r\n\r\n                    >\r\n                        <CallButton/>\r\n                    </ScrollUpButton>\r\n                </div>\r\n            </React.Fragment>\r\n        );\r\n    }\r\n    \r\n}","import React from 'react';\r\nconst HomeOne = React.lazy(() => import(\"../components/HomeOne\"));\r\nconst Single = React.lazy(() => import(\"../components/blog/Single\"));\r\nconst CourseDetail = React.lazy(() => import(\"../components/services/CourseDetail\"));\r\nconst AboutUs = React.lazy(() => import(\"../components/aboutus\"));\r\nconst NotFound = React.lazy(() => import(\"../modules/notFound\"));\r\n\r\n\r\n\r\n// then our route config\r\nconst routes = [\r\n  {\r\n      path: '/home',\r\n      component: HomeOne,\r\n  },\r\n  {\r\n    path: '/aboutus',\r\n    component: AboutUs\r\n  },\r\n  {\r\n    path: '/blog-posts/:id',\r\n    component: Single\r\n  },\r\n    {\r\n        path: '/khoa-hoc/:id',\r\n        component: CourseDetail\r\n    },\r\n  {\r\n      path: '/',\r\n      component: HomeOne,\r\n      exact: true,\r\n  },\r\n  {\r\n      path: '*',\r\n      component: NotFound,\r\n  }\r\n];\r\n\r\nexport default routes;\r\n\r\n","import React, {PureComponent} from 'react';\r\nimport './loading.css';\r\n\r\nexport default class Loading extends PureComponent {\r\n    render() {\r\n        return (\r\n            // #fc0904\r\n            <div className=\"divLoader\">\r\n                <svg className=\"svgLoader\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 1024 1024\" width=\"10em\" height=\"10em\">\r\n                    <path fill=\"#fc0904\"\r\n                          d=\"\" />\r\n                </svg>\r\n            </div>\r\n        )\r\n    }\r\n\r\n}","import React, { Component , Suspense } from 'react';\r\nimport {Route, Switch} from \"react-router-dom\";\r\nimport Page from \"react-page-loading\";\r\nimport { CSSTransition } from \"react-transition-group\";\r\nimport './css/style.css';\r\nimport './css/responsive.css';\r\nimport './css/color-default.css';\r\nimport ScrollUpBtn from './components/scroll';\r\nimport routes from './router';\r\nimport CallButton from \"./components/callButton\";\r\nimport Loading from \"./modules/loading\";\r\n\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <Page loader={\"comet-spin\"} color={\"#1452d9\"} size={50}>\r\n            <div>\r\n                <Suspense fallback={<Loading/>}>\r\n                        <Route\r\n                            render={({ location }) => (\r\n                                <CSSTransition\r\n                                    key={location.key}\r\n                                    timeout={{ enter: 900, exit: 900 }}\r\n                                    classNames=\"fade\"\r\n                                >\r\n                                    <section className=\"route-section\">\r\n                                          <Switch location={location}>\r\n                                            {\r\n                                              routes.map(({...restRouter}) => {\r\n                                                return (\r\n                                                    <Route key={restRouter.path} {...restRouter}/>\r\n                                                )\r\n                                              })\r\n                                            }\r\n                                          </Switch>\r\n                                    </section>\r\n                                </CSSTransition>\r\n                            )}\r\n                        />\r\n                </Suspense>\r\n                        <CallButton/>\r\n                        <ScrollUpBtn />\r\n                    </div>\r\n          </Page>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that Designers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing Designers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","// import { FETCH_BLOGS } from './action';\r\n//\r\n// const initialState ={\r\n//     isMobile: window.innerWidth < 768,\r\n//     isSidebarOpen: false,\r\n// }\r\n// const blogReducer = (state = initialState, action) =>{\r\n//     switch(action.type) {\r\n//         case FETCH_BLOGS:\r\n//             return {\r\n//                 ...state,\r\n//                 isMobile: action.value,\r\n//             }\r\n//         default:\r\n//             return state\r\n//     }\r\n//\r\n// }\r\n//\r\n// export default blogReducer;\r\n\r\n\r\nimport {FETCH_BLOGS_ERROR, FETCH_BLOGS_PENDING, FETCH_BLOGS_SUCCESS} from \"./action\";\r\nconst initialState ={\r\n    blogs : []\r\n}\r\n\r\nfunction blogReducer(state = initialState, action) {\r\n    return dispatch => {\r\n        dispatch(FETCH_BLOGS_SUCCESS());\r\n        fetch('https://nodejssalesforce.herokuapp.com/blogs')\r\n            .then(res => res.json())\r\n            .then(res => {\r\n                console.log('res' , res);\r\n                if(res.error) {\r\n                    throw(res.error);\r\n                }\r\n                // dispatch(FETCH_BLOGS_SUCCESS(res.products));\r\n                return res;\r\n            })\r\n            .catch(error => {\r\n                // dispatch(FETCH_BLOGS_ERROR(error));\r\n                throw (error);\r\n            })\r\n    }\r\n}\r\n// const blogReducer = (state = initialState, action) =>{\r\n//     switch(action.type) {\r\n//         case FETCH_BLOGS_SUCCESS:\r\n//             return {\r\n//                 ...state,\r\n//                 blogs: action.value,\r\n//             }\r\n//         default:\r\n//             return state\r\n//     }\r\n//\r\n// }\r\n\r\nexport default blogReducer;","import { combineReducers } from 'redux';\r\nimport blogReducer from \"./blog\";\r\n\r\n\r\nconst rootReducer = combineReducers({\r\n    blogs: blogReducer\r\n});\r\n\r\nexport default rootReducer;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport 'bootstrap/dist/css/bootstrap.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport {HashRouter} from 'react-router-dom';\r\nimport rootReducer from \"./store\";\r\nimport { createLogger } from 'redux-logger';\r\nimport {applyMiddleware, createStore} from \"redux\";\r\nimport {Provider} from \"react-redux\";\r\n\r\nconst logger = createLogger();\r\nconst store =  createStore(\r\n    rootReducer,\r\n    applyMiddleware(logger)\r\n);\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n    <HashRouter>\r\n        <App />\r\n    </HashRouter>\r\n    </Provider>\r\n     \r\n     , document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}