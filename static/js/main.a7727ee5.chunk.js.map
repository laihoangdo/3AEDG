{"version":3,"sources":["store/blog/action.js","components/callButton/index.jsx","components/scroll/index.jsx","router/index.js","modules/loading/index.jsx","App.js","serviceWorker.js","store/blog/index.js","store/index.js","index.js"],"names":["FETCH_BLOGS_SUCCESS","FETCH_BLOGS_DETAIL_SUCCESS","FETCH_BLOGS_ERROR","fetchBlogsAction","_ref","Object","D_Project_test_node_modules_babel_runtime_helpers_esm_asyncToGenerator__WEBPACK_IMPORTED_MODULE_1__","D_Project_test_node_modules_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default","a","mark","_callee","dispatch","res","data","wrap","_context","prev","next","fetch","method","mode","Headers","Access-Control-Allow-Origin","Content-Type","sent","json","type","payload","t0","response","stop","_x","apply","this","arguments","fetchBlogDetail","id","_ref3","_callee3","_context3","_x3","CallButton","react_default","createElement","Fragment","className","href","title","build_default","icon","PureComponent","ScrollUpBtn","react_scroll_up_button_default","ContainerClassName","TransitionClassName","callButton_CallButton","BlogList","React","lazy","Promise","all","__webpack_require__","e","then","bind","HomeOne","Single","CourseDetail","routes","path","component","exact","Loading","xmlns","viewBox","width","height","fill","d","App","react_page_loading_default","loader","color","size","react","fallback","loading_Loading","react_router","render","location","CSSTransition","key","timeout","enter","exit","classNames","map","_ref2","restRouter","esm_extends","assign","scroll_ScrollUpBtn","Component","Boolean","window","hostname","match","initialState","blogs","blogDetail","blogReducer","state","length","undefined","action","console","log","objectSpread","rootReducer","combineReducers","blog","middleware","thunk","store","createStore","composeWithDevTools","applyMiddleware","ReactDOM","es","react_router_dom","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.a7727ee5.chunk.js","sourcesContent":["export const FETCH_BLOGS_SUCCESS = 'FETCH_BLOGS_SUCCESS';\r\nexport const FETCH_BLOGS_DETAIL_SUCCESS = 'FETCH_BLOGS_DETAIL_SUCCESS';\r\nexport const FETCH_BLOGS_DETAIL_ERROR = 'FETCH_BLOGS_DETAIL_ERROR';\r\nexport const FETCH_BLOGS_ERROR= 'FETCH_BLOGS_ERROR';\r\n\r\n// export function fetchBlogsAction (value) {\r\n//     console.log('trigger action');\r\n//     return ({type: FETCH_BLOGS_SUCCESS, value})\r\n// }\r\n\r\n// export  const fetchBlogsAction = () =>{\r\n//     return async dispatch => {\r\n//         const res = await fetch('https://nodejssalesforce.herokuapp.com/blogs');\r\n//         const data = await res.json();\r\n//         dispatch({\r\n//             type: FETCH_BLOGS_SUCCESS,\r\n//             payload: data\r\n//         })\r\n//     }\r\n// }\r\nexport  const fetchBlogsAction = ()=> async dispatch =>{\r\n\r\n    try {\r\n        const res = await fetch('https://nodejssalesforce.herokuapp.com/blogs' , { method: 'GET' ,mode: 'cors' ,Headers: {'Access-Control-Allow-Origin':'*', 'Content-Type': 'application/json'} });\r\n        const data = await res.json();\r\n        dispatch({\r\n            type: FETCH_BLOGS_SUCCESS,\r\n            payload: data\r\n        })\r\n    }catch (e) {\r\n        dispatch({\r\n            type: FETCH_BLOGS_ERROR,\r\n            payload: e.response.data\r\n        })\r\n    }\r\n\r\n}\r\nexport  const fetchBlogsLimitAction = ()=> async dispatch =>{\r\n\r\n    try {\r\n        const res = await fetch('https://nodejssalesforce.herokuapp.com/blogs-limit' , { method: 'GET' ,mode: 'cors' ,Headers: {'Access-Control-Allow-Origin':'*', 'Content-Type': 'application/json'} });\r\n        const data = await res.json();\r\n        dispatch({\r\n            type: FETCH_BLOGS_SUCCESS,\r\n            payload: data\r\n        })\r\n    }catch (e) {\r\n        dispatch({\r\n            type: FETCH_BLOGS_ERROR,\r\n            payload: e.response.data\r\n        })\r\n    }\r\n\r\n}\r\n\r\nexport const fetchBlogDetail = (id) => async dispatch =>{\r\n    try {\r\n        const res = await fetch('https://nodejssalesforce.herokuapp.com/blogs/' + id);\r\n        const data = await res.json();\r\n        dispatch({\r\n            type: FETCH_BLOGS_DETAIL_SUCCESS,\r\n            payload: data\r\n        })\r\n    }catch (e) {\r\n        dispatch({\r\n            type: FETCH_BLOGS_DETAIL_ERROR,\r\n            payload: e.response.data\r\n        })\r\n    }\r\n};","import React, {PureComponent} from 'react';\r\nimport './callButton.css';\r\nimport Icofont from 'react-icofont';\r\n\r\nexport default class CallButton extends PureComponent {\r\n    render() {\r\n        return (\r\n            <React.Fragment>\r\n                <div className=\"link-text\">\r\n                    <a href=\"tel: 0938636843\" title=\"Liên hệ : 0938.6368.43\">\r\n                    <div className=\"yourPhone\">\r\n                        <p><Icofont icon=\"icofont-ui-dial-phone icofont-3x\"/></p>\r\n                    </div>\r\n                    </a>\r\n                </div>\r\n            </React.Fragment>\r\n        );\r\n    }\r\n}","import React, {PureComponent} from 'react';\r\nimport ScrollUpButton from \"react-scroll-up-button\";\r\nimport CallButton from \"../callButton\";\r\n\r\nexport default class ScrollUpBtn extends PureComponent {\r\n    render() {\r\n        return (\r\n            <React.Fragment>\r\n                <div>\r\n                <ScrollUpButton\r\n                    // style={{\r\n                    //     padding: 8,\r\n                    //     width: 60,\r\n                    //     backgroundColor: \"transparent\",\r\n                    //     height: 60,\r\n                    //     border: \"none\",\r\n                    //     color: \"white\",\r\n                    //     outline: 0,\r\n                    //     background: \"#03a84e\",\r\n                    //     zIndex: 9999,\r\n                    // }}\r\n                    ContainerClassName=\"AnyClassForContainer\"\r\n                    TransitionClassName=\"AnyClassForTransition\"\r\n\r\n                />\r\n                    <ScrollUpButton\r\n                        ContainerClassName=\"AnyClassForContainer\"\r\n                        TransitionClassName=\"AnyClassForTransition\"\r\n\r\n                    >\r\n                        <CallButton/>\r\n                    </ScrollUpButton>\r\n                </div>\r\n            </React.Fragment>\r\n        );\r\n    }\r\n    \r\n}","import React from 'react';\r\nconst BlogList = React.lazy(() => import(\"../components/blog/BlogsList\"));\r\nconst HomeOne = React.lazy(() => import(\"../components/HomeOne\"));\r\nconst Single = React.lazy(() => import(\"../components/blog/Single\"));\r\nconst CourseDetail = React.lazy(() => import(\"../components/services/CourseDetail\"));\r\nconst AboutUs = React.lazy(() => import(\"../components/aboutus\"));\r\nconst NotFound = React.lazy(() => import(\"../modules/notFound\"));\r\n\r\n\r\n\r\n// then our route config\r\nconst routes = [\r\n  {\r\n      path: '/home',\r\n      component: HomeOne,\r\n  },\r\n  {\r\n    path: '/aboutus',\r\n    component: AboutUs\r\n  },\r\n    {\r\n      path: '/tin-tuc/tat-ca',\r\n      component: BlogList\r\n    },\r\n  {\r\n    path: '/tin-tuc/:id',\r\n    component: Single\r\n  },\r\n    {\r\n        path: '/khoa-hoc/:id',\r\n        component: CourseDetail\r\n    },\r\n  {\r\n      path: '/',\r\n      component: HomeOne,\r\n      exact: true,\r\n  },\r\n  {\r\n      path: '*',\r\n      component: NotFound,\r\n  }\r\n];\r\n\r\nexport default routes;\r\n\r\n","import React, {PureComponent} from 'react';\r\nimport './loading.css';\r\n\r\nexport default class Loading extends PureComponent {\r\n    render() {\r\n        return (\r\n            // #fc0904\r\n            <div className=\"divLoader\">\r\n                <svg className=\"svgLoader\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 1024 1024\" width=\"10em\" height=\"10em\">\r\n                    <path fill=\"#fc0904\"\r\n                          d=\"\" />\r\n                </svg>\r\n            </div>\r\n        )\r\n    }\r\n\r\n}","import React, { Component , Suspense } from 'react';\r\nimport {Route, Switch} from \"react-router-dom\";\r\nimport Page from \"react-page-loading\";\r\nimport { CSSTransition } from \"react-transition-group\";\r\nimport './App.css';\r\nimport ScrollUpBtn from './components/scroll';\r\nimport routes from './router';\r\nimport CallButton from \"./components/callButton\";\r\nimport Loading from \"./modules/loading\";\r\n\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <Page loader={\"comet-spin\"} color={\"#1452d9\"} size={50}>\r\n            <div>\r\n                <Suspense fallback={<Loading/>}>\r\n                        <Route\r\n                            render={({ location }) => (\r\n                                <CSSTransition\r\n                                    key={location.key}\r\n                                    timeout={{ enter: 900, exit: 900 }}\r\n                                    classNames=\"fade\"\r\n                                >\r\n                                    <section className=\"route-section\">\r\n                                          <Switch location={location}>\r\n                                            {\r\n                                              routes.map(({...restRouter}) => {\r\n                                                return (\r\n                                                    <Route key={restRouter.path} {...restRouter}/>\r\n                                                )\r\n                                              })\r\n                                            }\r\n                                          </Switch>\r\n                                    </section>\r\n                                </CSSTransition>\r\n                            )}\r\n                        />\r\n                </Suspense>\r\n                        <CallButton/>\r\n                        <ScrollUpBtn />\r\n                    </div>\r\n          </Page>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that Designers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing Designers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","// import { FETCH_BLOGS } from './action';\r\nimport {FETCH_BLOGS_ERROR, FETCH_BLOGS_DETAIL_SUCCESS, FETCH_BLOGS_SUCCESS} from \"./action\";\r\n//\r\n// const initialState ={\r\n//     isMobile: window.innerWidth < 768,\r\n//     isSidebarOpen: false,\r\n// }\r\n// const blogReducer = (state = initialState, action) =>{\r\n//     switch(action.type) {\r\n//         case FETCH_BLOGS:\r\n//             return {\r\n//                 ...state,\r\n//                 isMobile: action.value,\r\n//             }\r\n//         default:\r\n//             return state\r\n//     }\r\n//\r\n// }\r\n//\r\n// export default blogReducer;\r\n\r\n\r\n\r\nconst initialState ={\r\n    blogs : [],\r\n    blogDetail : {}\r\n}\r\n\r\n// function blogReducer(state = initialState, action) {\r\n//     return dispatch => {\r\n//         dispatch(fetchBlogsAction());\r\n//         fetch('https://nodejssalesforce.herokuapp.com/blogs')\r\n//             .then(res => res.json())\r\n//             .then(res => {\r\n//                 console.log('res' , res);\r\n//                 if(res.error) {\r\n//                     throw(res.error);\r\n//                 }\r\n//                 // dispatch(FETCH_BLOGS_SUCCESS(res.products));\r\n//                 return res;\r\n//             })\r\n//             .catch(error => {\r\n//                 // dispatch(FETCH_BLOGS_ERROR(error));\r\n//                 throw (error);\r\n//             })\r\n//     }\r\n// }\r\n\r\nconst blogReducer = (state = initialState, action) =>{\r\n    console.log('accction' , action);\r\n    switch(action.type) {\r\n        case FETCH_BLOGS_SUCCESS:\r\n            return {\r\n                ...state,\r\n                blogs: action.payload,\r\n            };\r\n        case FETCH_BLOGS_ERROR:\r\n            console.log(action.payload)\r\n            return{\r\n                ...state\r\n            };\r\n        case FETCH_BLOGS_DETAIL_SUCCESS:\r\n            return{\r\n                ...state,\r\n                blogDetail: action.payload\r\n            };\r\n        default:\r\n            return state\r\n    }\r\n\r\n}\r\n\r\nexport default blogReducer;","import { combineReducers } from 'redux';\r\nimport blogReducer from \"./blog\";\r\n\r\n\r\nconst rootReducer = combineReducers({\r\n    blog: blogReducer\r\n});\r\n\r\nexport default rootReducer;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport 'bootstrap/dist/css/bootstrap.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport {HashRouter} from 'react-router-dom';\r\nimport rootReducer from \"./store\";\r\n// import { createLogger } from 'redux-logger';\r\nimport {applyMiddleware, createStore} from \"redux\";\r\nimport {Provider} from \"react-redux\";\r\nimport thunk from 'redux-thunk';\r\nimport {composeWithDevTools} from 'redux-devtools-extension';\r\n\r\nconst middleware = [thunk];\r\n// applyMiddleware(logger)\r\n// const logger = createLogger();\r\nconst store =  createStore(\r\n    rootReducer,\r\n    composeWithDevTools(applyMiddleware(...middleware))\r\n\r\n);\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n    <HashRouter>\r\n        <App />\r\n    </HashRouter>\r\n    </Provider>\r\n     \r\n     , document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}